<?php
/**
 * BrandingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BoldSign\ApiException;
use BoldSign\Configuration;
use BoldSign\HeaderSelector;
use BoldSign\ObjectSerializer;

/**
 * BrandingApi Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BrandingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'brandList' => [
            'application/json',
        ],
        'createBrand' => [
            'multipart/form-data',
        ],
        'deleteBrand' => [
            'application/json',
        ],
        'editBrand' => [
            'multipart/form-data',
        ],
        'getBrand' => [
            'application/json',
        ],
        'resetDefaultBrand' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->config = $config ?: new Configuration();
        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation brandList
     *
     * List all the brands.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['brandList'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BoldSign\Model\BrandingRecords|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult
     */
    public function brandList(string $contentType = self::contentTypes['brandList'][0])
    {
        list($response) = $this->brandListWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation brandListWithHttpInfo
     *
     * List all the brands.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['brandList'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BoldSign\Model\BrandingRecords|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function brandListWithHttpInfo(string $contentType = self::contentTypes['brandList'][0])
    {
        $request = $this->brandListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BoldSign\Model\BrandingRecords' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\BrandingRecords' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\BrandingRecords', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BoldSign\Model\BrandingRecords';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\BrandingRecords',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation brandListAsync
     *
     * List all the brands.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['brandList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function brandListAsync(string $contentType = self::contentTypes['brandList'][0])
    {
        return $this->brandListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation brandListAsyncWithHttpInfo
     *
     * List all the brands.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['brandList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function brandListAsyncWithHttpInfo(string $contentType = self::contentTypes['brandList'][0])
    {
        $returnType = '\BoldSign\Model\BrandingRecords';
        $request = $this->brandListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'brandList'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['brandList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function brandListRequest(string $contentType = self::contentTypes['brandList'][0])
    {


        $resourcePath = '/v1/brand/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBrand
     *
     * Create the brand.
     *
     * @param  string $brand_name brand_name (required)
     * @param  \SplFileObject $brand_logo brand_logo (required)
     * @param  string $background_color background_color (optional)
     * @param  string $button_color button_color (optional)
     * @param  string $button_text_color button_text_color (optional)
     * @param  string $email_display_name email_display_name (optional)
     * @param  string $disclaimer_description disclaimer_description (optional)
     * @param  string $disclaimer_title disclaimer_title (optional)
     * @param  string $redirect_url redirect_url (optional)
     * @param  bool $is_default is_default (optional, default to false)
     * @param  bool $can_hide_tag_line can_hide_tag_line (optional, default to false)
     * @param  bool $combine_audit_trail combine_audit_trail (optional, default to false)
     * @param  bool $exclude_audit_trail_from_email exclude_audit_trail_from_email (optional, default to false)
     * @param  string $email_signed_document email_signed_document (optional, default to 'Attachment')
     * @param  string $document_time_zone document_time_zone (optional)
     * @param  bool $show_built_in_form_fields show_built_in_form_fields (optional, default to true)
     * @param  bool $allow_custom_field_creation allow_custom_field_creation (optional, default to false)
     * @param  bool $show_shared_custom_fields show_shared_custom_fields (optional, default to false)
     * @param  bool $hide_decline hide_decline (optional)
     * @param  bool $hide_save hide_save (optional)
     * @param  string $document_expiry_settings_expiry_date_type document_expiry_settings_expiry_date_type (optional)
     * @param  int $document_expiry_settings_expiry_value document_expiry_settings_expiry_value (optional)
     * @param  bool $document_expiry_settings_enable_default_expiry_alert document_expiry_settings_enable_default_expiry_alert (optional)
     * @param  bool $document_expiry_settings_enable_auto_reminder document_expiry_settings_enable_auto_reminder (optional)
     * @param  int $document_expiry_settings_reminder_days document_expiry_settings_reminder_days (optional)
     * @param  int $document_expiry_settings_reminder_count document_expiry_settings_reminder_count (optional)
     * @param  string $custom_domain_settings_domain_name custom_domain_settings_domain_name (optional)
     * @param  string $custom_domain_settings_from_name custom_domain_settings_from_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBrand'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BoldSign\Model\BrandCreated|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult
     */
    public function createBrand($brand_name, $brand_logo, $background_color = null, $button_color = null, $button_text_color = null, $email_display_name = null, $disclaimer_description = null, $disclaimer_title = null, $redirect_url = null, $is_default = false, $can_hide_tag_line = false, $combine_audit_trail = false, $exclude_audit_trail_from_email = false, $email_signed_document = 'Attachment', $document_time_zone = null, $show_built_in_form_fields = true, $allow_custom_field_creation = false, $show_shared_custom_fields = false, $hide_decline = null, $hide_save = null, $document_expiry_settings_expiry_date_type = null, $document_expiry_settings_expiry_value = null, $document_expiry_settings_enable_default_expiry_alert = null, $document_expiry_settings_enable_auto_reminder = null, $document_expiry_settings_reminder_days = null, $document_expiry_settings_reminder_count = null, $custom_domain_settings_domain_name = null, $custom_domain_settings_from_name = null, string $contentType = self::contentTypes['createBrand'][0])
    {
        list($response) = $this->createBrandWithHttpInfo($brand_name, $brand_logo, $background_color, $button_color, $button_text_color, $email_display_name, $disclaimer_description, $disclaimer_title, $redirect_url, $is_default, $can_hide_tag_line, $combine_audit_trail, $exclude_audit_trail_from_email, $email_signed_document, $document_time_zone, $show_built_in_form_fields, $allow_custom_field_creation, $show_shared_custom_fields, $hide_decline, $hide_save, $document_expiry_settings_expiry_date_type, $document_expiry_settings_expiry_value, $document_expiry_settings_enable_default_expiry_alert, $document_expiry_settings_enable_auto_reminder, $document_expiry_settings_reminder_days, $document_expiry_settings_reminder_count, $custom_domain_settings_domain_name, $custom_domain_settings_from_name, $contentType);
        return $response;
    }

    /**
     * Operation createBrandWithHttpInfo
     *
     * Create the brand.
     *
     * @param  string $brand_name (required)
     * @param  \SplFileObject $brand_logo (required)
     * @param  string $background_color (optional)
     * @param  string $button_color (optional)
     * @param  string $button_text_color (optional)
     * @param  string $email_display_name (optional)
     * @param  string $disclaimer_description (optional)
     * @param  string $disclaimer_title (optional)
     * @param  string $redirect_url (optional)
     * @param  bool $is_default (optional, default to false)
     * @param  bool $can_hide_tag_line (optional, default to false)
     * @param  bool $combine_audit_trail (optional, default to false)
     * @param  bool $exclude_audit_trail_from_email (optional, default to false)
     * @param  string $email_signed_document (optional, default to 'Attachment')
     * @param  string $document_time_zone (optional)
     * @param  bool $show_built_in_form_fields (optional, default to true)
     * @param  bool $allow_custom_field_creation (optional, default to false)
     * @param  bool $show_shared_custom_fields (optional, default to false)
     * @param  bool $hide_decline (optional)
     * @param  bool $hide_save (optional)
     * @param  string $document_expiry_settings_expiry_date_type (optional)
     * @param  int $document_expiry_settings_expiry_value (optional)
     * @param  bool $document_expiry_settings_enable_default_expiry_alert (optional)
     * @param  bool $document_expiry_settings_enable_auto_reminder (optional)
     * @param  int $document_expiry_settings_reminder_days (optional)
     * @param  int $document_expiry_settings_reminder_count (optional)
     * @param  string $custom_domain_settings_domain_name (optional)
     * @param  string $custom_domain_settings_from_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBrand'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BoldSign\Model\BrandCreated|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBrandWithHttpInfo($brand_name, $brand_logo, $background_color = null, $button_color = null, $button_text_color = null, $email_display_name = null, $disclaimer_description = null, $disclaimer_title = null, $redirect_url = null, $is_default = false, $can_hide_tag_line = false, $combine_audit_trail = false, $exclude_audit_trail_from_email = false, $email_signed_document = 'Attachment', $document_time_zone = null, $show_built_in_form_fields = true, $allow_custom_field_creation = false, $show_shared_custom_fields = false, $hide_decline = null, $hide_save = null, $document_expiry_settings_expiry_date_type = null, $document_expiry_settings_expiry_value = null, $document_expiry_settings_enable_default_expiry_alert = null, $document_expiry_settings_enable_auto_reminder = null, $document_expiry_settings_reminder_days = null, $document_expiry_settings_reminder_count = null, $custom_domain_settings_domain_name = null, $custom_domain_settings_from_name = null, string $contentType = self::contentTypes['createBrand'][0])
    {
        $request = $this->createBrandRequest($brand_name, $brand_logo, $background_color, $button_color, $button_text_color, $email_display_name, $disclaimer_description, $disclaimer_title, $redirect_url, $is_default, $can_hide_tag_line, $combine_audit_trail, $exclude_audit_trail_from_email, $email_signed_document, $document_time_zone, $show_built_in_form_fields, $allow_custom_field_creation, $show_shared_custom_fields, $hide_decline, $hide_save, $document_expiry_settings_expiry_date_type, $document_expiry_settings_expiry_value, $document_expiry_settings_enable_default_expiry_alert, $document_expiry_settings_enable_auto_reminder, $document_expiry_settings_reminder_days, $document_expiry_settings_reminder_count, $custom_domain_settings_domain_name, $custom_domain_settings_from_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BoldSign\Model\BrandCreated' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\BrandCreated' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\BrandCreated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BoldSign\Model\BrandCreated';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\BrandCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBrandAsync
     *
     * Create the brand.
     *
     * @param  string $brand_name (required)
     * @param  \SplFileObject $brand_logo (required)
     * @param  string $background_color (optional)
     * @param  string $button_color (optional)
     * @param  string $button_text_color (optional)
     * @param  string $email_display_name (optional)
     * @param  string $disclaimer_description (optional)
     * @param  string $disclaimer_title (optional)
     * @param  string $redirect_url (optional)
     * @param  bool $is_default (optional, default to false)
     * @param  bool $can_hide_tag_line (optional, default to false)
     * @param  bool $combine_audit_trail (optional, default to false)
     * @param  bool $exclude_audit_trail_from_email (optional, default to false)
     * @param  string $email_signed_document (optional, default to 'Attachment')
     * @param  string $document_time_zone (optional)
     * @param  bool $show_built_in_form_fields (optional, default to true)
     * @param  bool $allow_custom_field_creation (optional, default to false)
     * @param  bool $show_shared_custom_fields (optional, default to false)
     * @param  bool $hide_decline (optional)
     * @param  bool $hide_save (optional)
     * @param  string $document_expiry_settings_expiry_date_type (optional)
     * @param  int $document_expiry_settings_expiry_value (optional)
     * @param  bool $document_expiry_settings_enable_default_expiry_alert (optional)
     * @param  bool $document_expiry_settings_enable_auto_reminder (optional)
     * @param  int $document_expiry_settings_reminder_days (optional)
     * @param  int $document_expiry_settings_reminder_count (optional)
     * @param  string $custom_domain_settings_domain_name (optional)
     * @param  string $custom_domain_settings_from_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBrandAsync($brand_name, $brand_logo, $background_color = null, $button_color = null, $button_text_color = null, $email_display_name = null, $disclaimer_description = null, $disclaimer_title = null, $redirect_url = null, $is_default = false, $can_hide_tag_line = false, $combine_audit_trail = false, $exclude_audit_trail_from_email = false, $email_signed_document = 'Attachment', $document_time_zone = null, $show_built_in_form_fields = true, $allow_custom_field_creation = false, $show_shared_custom_fields = false, $hide_decline = null, $hide_save = null, $document_expiry_settings_expiry_date_type = null, $document_expiry_settings_expiry_value = null, $document_expiry_settings_enable_default_expiry_alert = null, $document_expiry_settings_enable_auto_reminder = null, $document_expiry_settings_reminder_days = null, $document_expiry_settings_reminder_count = null, $custom_domain_settings_domain_name = null, $custom_domain_settings_from_name = null, string $contentType = self::contentTypes['createBrand'][0])
    {
        return $this->createBrandAsyncWithHttpInfo($brand_name, $brand_logo, $background_color, $button_color, $button_text_color, $email_display_name, $disclaimer_description, $disclaimer_title, $redirect_url, $is_default, $can_hide_tag_line, $combine_audit_trail, $exclude_audit_trail_from_email, $email_signed_document, $document_time_zone, $show_built_in_form_fields, $allow_custom_field_creation, $show_shared_custom_fields, $hide_decline, $hide_save, $document_expiry_settings_expiry_date_type, $document_expiry_settings_expiry_value, $document_expiry_settings_enable_default_expiry_alert, $document_expiry_settings_enable_auto_reminder, $document_expiry_settings_reminder_days, $document_expiry_settings_reminder_count, $custom_domain_settings_domain_name, $custom_domain_settings_from_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBrandAsyncWithHttpInfo
     *
     * Create the brand.
     *
     * @param  string $brand_name (required)
     * @param  \SplFileObject $brand_logo (required)
     * @param  string $background_color (optional)
     * @param  string $button_color (optional)
     * @param  string $button_text_color (optional)
     * @param  string $email_display_name (optional)
     * @param  string $disclaimer_description (optional)
     * @param  string $disclaimer_title (optional)
     * @param  string $redirect_url (optional)
     * @param  bool $is_default (optional, default to false)
     * @param  bool $can_hide_tag_line (optional, default to false)
     * @param  bool $combine_audit_trail (optional, default to false)
     * @param  bool $exclude_audit_trail_from_email (optional, default to false)
     * @param  string $email_signed_document (optional, default to 'Attachment')
     * @param  string $document_time_zone (optional)
     * @param  bool $show_built_in_form_fields (optional, default to true)
     * @param  bool $allow_custom_field_creation (optional, default to false)
     * @param  bool $show_shared_custom_fields (optional, default to false)
     * @param  bool $hide_decline (optional)
     * @param  bool $hide_save (optional)
     * @param  string $document_expiry_settings_expiry_date_type (optional)
     * @param  int $document_expiry_settings_expiry_value (optional)
     * @param  bool $document_expiry_settings_enable_default_expiry_alert (optional)
     * @param  bool $document_expiry_settings_enable_auto_reminder (optional)
     * @param  int $document_expiry_settings_reminder_days (optional)
     * @param  int $document_expiry_settings_reminder_count (optional)
     * @param  string $custom_domain_settings_domain_name (optional)
     * @param  string $custom_domain_settings_from_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBrandAsyncWithHttpInfo($brand_name, $brand_logo, $background_color = null, $button_color = null, $button_text_color = null, $email_display_name = null, $disclaimer_description = null, $disclaimer_title = null, $redirect_url = null, $is_default = false, $can_hide_tag_line = false, $combine_audit_trail = false, $exclude_audit_trail_from_email = false, $email_signed_document = 'Attachment', $document_time_zone = null, $show_built_in_form_fields = true, $allow_custom_field_creation = false, $show_shared_custom_fields = false, $hide_decline = null, $hide_save = null, $document_expiry_settings_expiry_date_type = null, $document_expiry_settings_expiry_value = null, $document_expiry_settings_enable_default_expiry_alert = null, $document_expiry_settings_enable_auto_reminder = null, $document_expiry_settings_reminder_days = null, $document_expiry_settings_reminder_count = null, $custom_domain_settings_domain_name = null, $custom_domain_settings_from_name = null, string $contentType = self::contentTypes['createBrand'][0])
    {
        $returnType = '\BoldSign\Model\BrandCreated';
        $request = $this->createBrandRequest($brand_name, $brand_logo, $background_color, $button_color, $button_text_color, $email_display_name, $disclaimer_description, $disclaimer_title, $redirect_url, $is_default, $can_hide_tag_line, $combine_audit_trail, $exclude_audit_trail_from_email, $email_signed_document, $document_time_zone, $show_built_in_form_fields, $allow_custom_field_creation, $show_shared_custom_fields, $hide_decline, $hide_save, $document_expiry_settings_expiry_date_type, $document_expiry_settings_expiry_value, $document_expiry_settings_enable_default_expiry_alert, $document_expiry_settings_enable_auto_reminder, $document_expiry_settings_reminder_days, $document_expiry_settings_reminder_count, $custom_domain_settings_domain_name, $custom_domain_settings_from_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBrand'
     *
     * @param  string $brand_name (required)
     * @param  \SplFileObject $brand_logo (required)
     * @param  string $background_color (optional)
     * @param  string $button_color (optional)
     * @param  string $button_text_color (optional)
     * @param  string $email_display_name (optional)
     * @param  string $disclaimer_description (optional)
     * @param  string $disclaimer_title (optional)
     * @param  string $redirect_url (optional)
     * @param  bool $is_default (optional, default to false)
     * @param  bool $can_hide_tag_line (optional, default to false)
     * @param  bool $combine_audit_trail (optional, default to false)
     * @param  bool $exclude_audit_trail_from_email (optional, default to false)
     * @param  string $email_signed_document (optional, default to 'Attachment')
     * @param  string $document_time_zone (optional)
     * @param  bool $show_built_in_form_fields (optional, default to true)
     * @param  bool $allow_custom_field_creation (optional, default to false)
     * @param  bool $show_shared_custom_fields (optional, default to false)
     * @param  bool $hide_decline (optional)
     * @param  bool $hide_save (optional)
     * @param  string $document_expiry_settings_expiry_date_type (optional)
     * @param  int $document_expiry_settings_expiry_value (optional)
     * @param  bool $document_expiry_settings_enable_default_expiry_alert (optional)
     * @param  bool $document_expiry_settings_enable_auto_reminder (optional)
     * @param  int $document_expiry_settings_reminder_days (optional)
     * @param  int $document_expiry_settings_reminder_count (optional)
     * @param  string $custom_domain_settings_domain_name (optional)
     * @param  string $custom_domain_settings_from_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBrandRequest($brand_name, $brand_logo, $background_color = null, $button_color = null, $button_text_color = null, $email_display_name = null, $disclaimer_description = null, $disclaimer_title = null, $redirect_url = null, $is_default = false, $can_hide_tag_line = false, $combine_audit_trail = false, $exclude_audit_trail_from_email = false, $email_signed_document = 'Attachment', $document_time_zone = null, $show_built_in_form_fields = true, $allow_custom_field_creation = false, $show_shared_custom_fields = false, $hide_decline = null, $hide_save = null, $document_expiry_settings_expiry_date_type = null, $document_expiry_settings_expiry_value = null, $document_expiry_settings_enable_default_expiry_alert = null, $document_expiry_settings_enable_auto_reminder = null, $document_expiry_settings_reminder_days = null, $document_expiry_settings_reminder_count = null, $custom_domain_settings_domain_name = null, $custom_domain_settings_from_name = null, string $contentType = self::contentTypes['createBrand'][0])
    {

        // verify the required parameter 'brand_name' is set
        if ($brand_name === null || (is_array($brand_name) && count($brand_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_name when calling createBrand'
            );
        }

        // verify the required parameter 'brand_logo' is set
        if ($brand_logo === null || (is_array($brand_logo) && count($brand_logo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_logo when calling createBrand'
            );
        }























        if ($document_expiry_settings_reminder_days !== null && $document_expiry_settings_reminder_days > 180) {
            throw new \InvalidArgumentException('invalid value for "$document_expiry_settings_reminder_days" when calling BrandingApi.createBrand, must be smaller than or equal to 180.');
        }
        if ($document_expiry_settings_reminder_days !== null && $document_expiry_settings_reminder_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$document_expiry_settings_reminder_days" when calling BrandingApi.createBrand, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v1/brand/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($brand_name !== null) {
            $formParams['BrandName'] = ObjectSerializer::toFormValue($brand_name);
        }
        // form params
        if ($brand_logo !== null) {
            $multipart = true;
            $formParams['BrandLogo'] = [];
            $paramFiles = is_array($brand_logo) ? $brand_logo : [$brand_logo];
            foreach ($paramFiles as $paramFile) {
                $formParams['BrandLogo'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($background_color !== null) {
            $formParams['BackgroundColor'] = ObjectSerializer::toFormValue($background_color);
        }
        // form params
        if ($button_color !== null) {
            $formParams['ButtonColor'] = ObjectSerializer::toFormValue($button_color);
        }
        // form params
        if ($button_text_color !== null) {
            $formParams['ButtonTextColor'] = ObjectSerializer::toFormValue($button_text_color);
        }
        // form params
        if ($email_display_name !== null) {
            $formParams['EmailDisplayName'] = ObjectSerializer::toFormValue($email_display_name);
        }
        // form params
        if ($disclaimer_description !== null) {
            $formParams['DisclaimerDescription'] = ObjectSerializer::toFormValue($disclaimer_description);
        }
        // form params
        if ($disclaimer_title !== null) {
            $formParams['DisclaimerTitle'] = ObjectSerializer::toFormValue($disclaimer_title);
        }
        // form params
        if ($redirect_url !== null) {
            $formParams['RedirectUrl'] = ObjectSerializer::toFormValue($redirect_url);
        }
        // form params
        if ($is_default !== null) {
            $formParams['IsDefault'] = ObjectSerializer::toFormValue($is_default);
        }
        // form params
        if ($can_hide_tag_line !== null) {
            $formParams['CanHideTagLine'] = ObjectSerializer::toFormValue($can_hide_tag_line);
        }
        // form params
        if ($combine_audit_trail !== null) {
            $formParams['CombineAuditTrail'] = ObjectSerializer::toFormValue($combine_audit_trail);
        }
        // form params
        if ($exclude_audit_trail_from_email !== null) {
            $formParams['ExcludeAuditTrailFromEmail'] = ObjectSerializer::toFormValue($exclude_audit_trail_from_email);
        }
        // form params
        if ($email_signed_document !== null) {
            $formParams['EmailSignedDocument'] = ObjectSerializer::toFormValue($email_signed_document);
        }
        // form params
        if ($document_time_zone !== null) {
            $formParams['DocumentTimeZone'] = ObjectSerializer::toFormValue($document_time_zone);
        }
        // form params
        if ($show_built_in_form_fields !== null) {
            $formParams['ShowBuiltInFormFields'] = ObjectSerializer::toFormValue($show_built_in_form_fields);
        }
        // form params
        if ($allow_custom_field_creation !== null) {
            $formParams['AllowCustomFieldCreation'] = ObjectSerializer::toFormValue($allow_custom_field_creation);
        }
        // form params
        if ($show_shared_custom_fields !== null) {
            $formParams['ShowSharedCustomFields'] = ObjectSerializer::toFormValue($show_shared_custom_fields);
        }
        // form params
        if ($hide_decline !== null) {
            $formParams['HideDecline'] = ObjectSerializer::toFormValue($hide_decline);
        }
        // form params
        if ($hide_save !== null) {
            $formParams['HideSave'] = ObjectSerializer::toFormValue($hide_save);
        }
        // form params
        if ($document_expiry_settings_expiry_date_type !== null) {
            $formParams['DocumentExpirySettings.ExpiryDateType'] = ObjectSerializer::toFormValue($document_expiry_settings_expiry_date_type);
        }
        // form params
        if ($document_expiry_settings_expiry_value !== null) {
            $formParams['DocumentExpirySettings.ExpiryValue'] = ObjectSerializer::toFormValue($document_expiry_settings_expiry_value);
        }
        // form params
        if ($document_expiry_settings_enable_default_expiry_alert !== null) {
            $formParams['DocumentExpirySettings.EnableDefaultExpiryAlert'] = ObjectSerializer::toFormValue($document_expiry_settings_enable_default_expiry_alert);
        }
        // form params
        if ($document_expiry_settings_enable_auto_reminder !== null) {
            $formParams['DocumentExpirySettings.EnableAutoReminder'] = ObjectSerializer::toFormValue($document_expiry_settings_enable_auto_reminder);
        }
        // form params
        if ($document_expiry_settings_reminder_days !== null) {
            $formParams['DocumentExpirySettings.ReminderDays'] = ObjectSerializer::toFormValue($document_expiry_settings_reminder_days);
        }
        // form params
        if ($document_expiry_settings_reminder_count !== null) {
            $formParams['DocumentExpirySettings.ReminderCount'] = ObjectSerializer::toFormValue($document_expiry_settings_reminder_count);
        }
        // form params
        if ($custom_domain_settings_domain_name !== null) {
            $formParams['CustomDomainSettings.DomainName'] = ObjectSerializer::toFormValue($custom_domain_settings_domain_name);
        }
        // form params
        if ($custom_domain_settings_from_name !== null) {
            $formParams['CustomDomainSettings.FromName'] = ObjectSerializer::toFormValue($custom_domain_settings_from_name);
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=minimal;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;IEEE754Compatible=true', 'application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=full;IEEE754Compatible=false', 'application/json;odata.metadata=full;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=none;IEEE754Compatible=false', 'application/json;odata.metadata=none;IEEE754Compatible=true', 'application/json;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.streaming=false;IEEE754Compatible=true', 'application/json;IEEE754Compatible=false', 'application/json;IEEE754Compatible=true', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBrand
     *
     * Delete the brand.
     *
     * @param  string $brand_id brand Id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBrand'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BoldSign\Model\BrandingMessage|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult
     */
    public function deleteBrand($brand_id, string $contentType = self::contentTypes['deleteBrand'][0])
    {
        list($response) = $this->deleteBrandWithHttpInfo($brand_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteBrandWithHttpInfo
     *
     * Delete the brand.
     *
     * @param  string $brand_id brand Id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBrand'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BoldSign\Model\BrandingMessage|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBrandWithHttpInfo($brand_id, string $contentType = self::contentTypes['deleteBrand'][0])
    {
        $request = $this->deleteBrandRequest($brand_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BoldSign\Model\BrandingMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\BrandingMessage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\BrandingMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BoldSign\Model\BrandingMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\BrandingMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBrandAsync
     *
     * Delete the brand.
     *
     * @param  string $brand_id brand Id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBrandAsync($brand_id, string $contentType = self::contentTypes['deleteBrand'][0])
    {
        return $this->deleteBrandAsyncWithHttpInfo($brand_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBrandAsyncWithHttpInfo
     *
     * Delete the brand.
     *
     * @param  string $brand_id brand Id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBrandAsyncWithHttpInfo($brand_id, string $contentType = self::contentTypes['deleteBrand'][0])
    {
        $returnType = '\BoldSign\Model\BrandingMessage';
        $request = $this->deleteBrandRequest($brand_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBrand'
     *
     * @param  string $brand_id brand Id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBrandRequest($brand_id, string $contentType = self::contentTypes['deleteBrand'][0])
    {

        // verify the required parameter 'brand_id' is set
        if ($brand_id === null || (is_array($brand_id) && count($brand_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_id when calling deleteBrand'
            );
        }


        $resourcePath = '/v1/brand/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brand_id,
            'brandId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=minimal;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;IEEE754Compatible=true', 'application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=full;IEEE754Compatible=false', 'application/json;odata.metadata=full;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=none;IEEE754Compatible=false', 'application/json;odata.metadata=none;IEEE754Compatible=true', 'application/json;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.streaming=false;IEEE754Compatible=true', 'application/json;IEEE754Compatible=false', 'application/json;IEEE754Compatible=true', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editBrand
     *
     * Edit the brand.
     *
     * @param  string $brand_id The brand id. (required)
     * @param  string $brand_name brand_name (optional)
     * @param  \SplFileObject $brand_logo brand_logo (optional)
     * @param  string $background_color background_color (optional)
     * @param  string $button_color button_color (optional)
     * @param  string $button_text_color button_text_color (optional)
     * @param  string $email_display_name email_display_name (optional)
     * @param  string $disclaimer_description disclaimer_description (optional)
     * @param  string $disclaimer_title disclaimer_title (optional)
     * @param  string $redirect_url redirect_url (optional)
     * @param  bool $is_default is_default (optional, default to false)
     * @param  bool $can_hide_tag_line can_hide_tag_line (optional, default to false)
     * @param  bool $combine_audit_trail combine_audit_trail (optional, default to false)
     * @param  bool $exclude_audit_trail_from_email exclude_audit_trail_from_email (optional, default to false)
     * @param  string $email_signed_document email_signed_document (optional, default to 'Attachment')
     * @param  string $document_time_zone document_time_zone (optional)
     * @param  bool $show_built_in_form_fields show_built_in_form_fields (optional, default to true)
     * @param  bool $allow_custom_field_creation allow_custom_field_creation (optional, default to false)
     * @param  bool $show_shared_custom_fields show_shared_custom_fields (optional, default to false)
     * @param  bool $hide_decline hide_decline (optional)
     * @param  bool $hide_save hide_save (optional)
     * @param  string $document_expiry_settings_expiry_date_type document_expiry_settings_expiry_date_type (optional)
     * @param  int $document_expiry_settings_expiry_value document_expiry_settings_expiry_value (optional)
     * @param  bool $document_expiry_settings_enable_default_expiry_alert document_expiry_settings_enable_default_expiry_alert (optional)
     * @param  bool $document_expiry_settings_enable_auto_reminder document_expiry_settings_enable_auto_reminder (optional)
     * @param  int $document_expiry_settings_reminder_days document_expiry_settings_reminder_days (optional)
     * @param  int $document_expiry_settings_reminder_count document_expiry_settings_reminder_count (optional)
     * @param  string $custom_domain_settings_domain_name custom_domain_settings_domain_name (optional)
     * @param  string $custom_domain_settings_from_name custom_domain_settings_from_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editBrand'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BoldSign\Model\BrandCreated|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult
     */
    public function editBrand($brand_id, $brand_name = null, $brand_logo = null, $background_color = null, $button_color = null, $button_text_color = null, $email_display_name = null, $disclaimer_description = null, $disclaimer_title = null, $redirect_url = null, $is_default = false, $can_hide_tag_line = false, $combine_audit_trail = false, $exclude_audit_trail_from_email = false, $email_signed_document = 'Attachment', $document_time_zone = null, $show_built_in_form_fields = true, $allow_custom_field_creation = false, $show_shared_custom_fields = false, $hide_decline = null, $hide_save = null, $document_expiry_settings_expiry_date_type = null, $document_expiry_settings_expiry_value = null, $document_expiry_settings_enable_default_expiry_alert = null, $document_expiry_settings_enable_auto_reminder = null, $document_expiry_settings_reminder_days = null, $document_expiry_settings_reminder_count = null, $custom_domain_settings_domain_name = null, $custom_domain_settings_from_name = null, string $contentType = self::contentTypes['editBrand'][0])
    {
        list($response) = $this->editBrandWithHttpInfo($brand_id, $brand_name, $brand_logo, $background_color, $button_color, $button_text_color, $email_display_name, $disclaimer_description, $disclaimer_title, $redirect_url, $is_default, $can_hide_tag_line, $combine_audit_trail, $exclude_audit_trail_from_email, $email_signed_document, $document_time_zone, $show_built_in_form_fields, $allow_custom_field_creation, $show_shared_custom_fields, $hide_decline, $hide_save, $document_expiry_settings_expiry_date_type, $document_expiry_settings_expiry_value, $document_expiry_settings_enable_default_expiry_alert, $document_expiry_settings_enable_auto_reminder, $document_expiry_settings_reminder_days, $document_expiry_settings_reminder_count, $custom_domain_settings_domain_name, $custom_domain_settings_from_name, $contentType);
        return $response;
    }

    /**
     * Operation editBrandWithHttpInfo
     *
     * Edit the brand.
     *
     * @param  string $brand_id The brand id. (required)
     * @param  string $brand_name (optional)
     * @param  \SplFileObject $brand_logo (optional)
     * @param  string $background_color (optional)
     * @param  string $button_color (optional)
     * @param  string $button_text_color (optional)
     * @param  string $email_display_name (optional)
     * @param  string $disclaimer_description (optional)
     * @param  string $disclaimer_title (optional)
     * @param  string $redirect_url (optional)
     * @param  bool $is_default (optional, default to false)
     * @param  bool $can_hide_tag_line (optional, default to false)
     * @param  bool $combine_audit_trail (optional, default to false)
     * @param  bool $exclude_audit_trail_from_email (optional, default to false)
     * @param  string $email_signed_document (optional, default to 'Attachment')
     * @param  string $document_time_zone (optional)
     * @param  bool $show_built_in_form_fields (optional, default to true)
     * @param  bool $allow_custom_field_creation (optional, default to false)
     * @param  bool $show_shared_custom_fields (optional, default to false)
     * @param  bool $hide_decline (optional)
     * @param  bool $hide_save (optional)
     * @param  string $document_expiry_settings_expiry_date_type (optional)
     * @param  int $document_expiry_settings_expiry_value (optional)
     * @param  bool $document_expiry_settings_enable_default_expiry_alert (optional)
     * @param  bool $document_expiry_settings_enable_auto_reminder (optional)
     * @param  int $document_expiry_settings_reminder_days (optional)
     * @param  int $document_expiry_settings_reminder_count (optional)
     * @param  string $custom_domain_settings_domain_name (optional)
     * @param  string $custom_domain_settings_from_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editBrand'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BoldSign\Model\BrandCreated|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function editBrandWithHttpInfo($brand_id, $brand_name = null, $brand_logo = null, $background_color = null, $button_color = null, $button_text_color = null, $email_display_name = null, $disclaimer_description = null, $disclaimer_title = null, $redirect_url = null, $is_default = false, $can_hide_tag_line = false, $combine_audit_trail = false, $exclude_audit_trail_from_email = false, $email_signed_document = 'Attachment', $document_time_zone = null, $show_built_in_form_fields = true, $allow_custom_field_creation = false, $show_shared_custom_fields = false, $hide_decline = null, $hide_save = null, $document_expiry_settings_expiry_date_type = null, $document_expiry_settings_expiry_value = null, $document_expiry_settings_enable_default_expiry_alert = null, $document_expiry_settings_enable_auto_reminder = null, $document_expiry_settings_reminder_days = null, $document_expiry_settings_reminder_count = null, $custom_domain_settings_domain_name = null, $custom_domain_settings_from_name = null, string $contentType = self::contentTypes['editBrand'][0])
    {
        $request = $this->editBrandRequest($brand_id, $brand_name, $brand_logo, $background_color, $button_color, $button_text_color, $email_display_name, $disclaimer_description, $disclaimer_title, $redirect_url, $is_default, $can_hide_tag_line, $combine_audit_trail, $exclude_audit_trail_from_email, $email_signed_document, $document_time_zone, $show_built_in_form_fields, $allow_custom_field_creation, $show_shared_custom_fields, $hide_decline, $hide_save, $document_expiry_settings_expiry_date_type, $document_expiry_settings_expiry_value, $document_expiry_settings_enable_default_expiry_alert, $document_expiry_settings_enable_auto_reminder, $document_expiry_settings_reminder_days, $document_expiry_settings_reminder_count, $custom_domain_settings_domain_name, $custom_domain_settings_from_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BoldSign\Model\BrandCreated' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\BrandCreated' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\BrandCreated', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BoldSign\Model\BrandCreated';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\BrandCreated',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editBrandAsync
     *
     * Edit the brand.
     *
     * @param  string $brand_id The brand id. (required)
     * @param  string $brand_name (optional)
     * @param  \SplFileObject $brand_logo (optional)
     * @param  string $background_color (optional)
     * @param  string $button_color (optional)
     * @param  string $button_text_color (optional)
     * @param  string $email_display_name (optional)
     * @param  string $disclaimer_description (optional)
     * @param  string $disclaimer_title (optional)
     * @param  string $redirect_url (optional)
     * @param  bool $is_default (optional, default to false)
     * @param  bool $can_hide_tag_line (optional, default to false)
     * @param  bool $combine_audit_trail (optional, default to false)
     * @param  bool $exclude_audit_trail_from_email (optional, default to false)
     * @param  string $email_signed_document (optional, default to 'Attachment')
     * @param  string $document_time_zone (optional)
     * @param  bool $show_built_in_form_fields (optional, default to true)
     * @param  bool $allow_custom_field_creation (optional, default to false)
     * @param  bool $show_shared_custom_fields (optional, default to false)
     * @param  bool $hide_decline (optional)
     * @param  bool $hide_save (optional)
     * @param  string $document_expiry_settings_expiry_date_type (optional)
     * @param  int $document_expiry_settings_expiry_value (optional)
     * @param  bool $document_expiry_settings_enable_default_expiry_alert (optional)
     * @param  bool $document_expiry_settings_enable_auto_reminder (optional)
     * @param  int $document_expiry_settings_reminder_days (optional)
     * @param  int $document_expiry_settings_reminder_count (optional)
     * @param  string $custom_domain_settings_domain_name (optional)
     * @param  string $custom_domain_settings_from_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editBrandAsync($brand_id, $brand_name = null, $brand_logo = null, $background_color = null, $button_color = null, $button_text_color = null, $email_display_name = null, $disclaimer_description = null, $disclaimer_title = null, $redirect_url = null, $is_default = false, $can_hide_tag_line = false, $combine_audit_trail = false, $exclude_audit_trail_from_email = false, $email_signed_document = 'Attachment', $document_time_zone = null, $show_built_in_form_fields = true, $allow_custom_field_creation = false, $show_shared_custom_fields = false, $hide_decline = null, $hide_save = null, $document_expiry_settings_expiry_date_type = null, $document_expiry_settings_expiry_value = null, $document_expiry_settings_enable_default_expiry_alert = null, $document_expiry_settings_enable_auto_reminder = null, $document_expiry_settings_reminder_days = null, $document_expiry_settings_reminder_count = null, $custom_domain_settings_domain_name = null, $custom_domain_settings_from_name = null, string $contentType = self::contentTypes['editBrand'][0])
    {
        return $this->editBrandAsyncWithHttpInfo($brand_id, $brand_name, $brand_logo, $background_color, $button_color, $button_text_color, $email_display_name, $disclaimer_description, $disclaimer_title, $redirect_url, $is_default, $can_hide_tag_line, $combine_audit_trail, $exclude_audit_trail_from_email, $email_signed_document, $document_time_zone, $show_built_in_form_fields, $allow_custom_field_creation, $show_shared_custom_fields, $hide_decline, $hide_save, $document_expiry_settings_expiry_date_type, $document_expiry_settings_expiry_value, $document_expiry_settings_enable_default_expiry_alert, $document_expiry_settings_enable_auto_reminder, $document_expiry_settings_reminder_days, $document_expiry_settings_reminder_count, $custom_domain_settings_domain_name, $custom_domain_settings_from_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editBrandAsyncWithHttpInfo
     *
     * Edit the brand.
     *
     * @param  string $brand_id The brand id. (required)
     * @param  string $brand_name (optional)
     * @param  \SplFileObject $brand_logo (optional)
     * @param  string $background_color (optional)
     * @param  string $button_color (optional)
     * @param  string $button_text_color (optional)
     * @param  string $email_display_name (optional)
     * @param  string $disclaimer_description (optional)
     * @param  string $disclaimer_title (optional)
     * @param  string $redirect_url (optional)
     * @param  bool $is_default (optional, default to false)
     * @param  bool $can_hide_tag_line (optional, default to false)
     * @param  bool $combine_audit_trail (optional, default to false)
     * @param  bool $exclude_audit_trail_from_email (optional, default to false)
     * @param  string $email_signed_document (optional, default to 'Attachment')
     * @param  string $document_time_zone (optional)
     * @param  bool $show_built_in_form_fields (optional, default to true)
     * @param  bool $allow_custom_field_creation (optional, default to false)
     * @param  bool $show_shared_custom_fields (optional, default to false)
     * @param  bool $hide_decline (optional)
     * @param  bool $hide_save (optional)
     * @param  string $document_expiry_settings_expiry_date_type (optional)
     * @param  int $document_expiry_settings_expiry_value (optional)
     * @param  bool $document_expiry_settings_enable_default_expiry_alert (optional)
     * @param  bool $document_expiry_settings_enable_auto_reminder (optional)
     * @param  int $document_expiry_settings_reminder_days (optional)
     * @param  int $document_expiry_settings_reminder_count (optional)
     * @param  string $custom_domain_settings_domain_name (optional)
     * @param  string $custom_domain_settings_from_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editBrandAsyncWithHttpInfo($brand_id, $brand_name = null, $brand_logo = null, $background_color = null, $button_color = null, $button_text_color = null, $email_display_name = null, $disclaimer_description = null, $disclaimer_title = null, $redirect_url = null, $is_default = false, $can_hide_tag_line = false, $combine_audit_trail = false, $exclude_audit_trail_from_email = false, $email_signed_document = 'Attachment', $document_time_zone = null, $show_built_in_form_fields = true, $allow_custom_field_creation = false, $show_shared_custom_fields = false, $hide_decline = null, $hide_save = null, $document_expiry_settings_expiry_date_type = null, $document_expiry_settings_expiry_value = null, $document_expiry_settings_enable_default_expiry_alert = null, $document_expiry_settings_enable_auto_reminder = null, $document_expiry_settings_reminder_days = null, $document_expiry_settings_reminder_count = null, $custom_domain_settings_domain_name = null, $custom_domain_settings_from_name = null, string $contentType = self::contentTypes['editBrand'][0])
    {
        $returnType = '\BoldSign\Model\BrandCreated';
        $request = $this->editBrandRequest($brand_id, $brand_name, $brand_logo, $background_color, $button_color, $button_text_color, $email_display_name, $disclaimer_description, $disclaimer_title, $redirect_url, $is_default, $can_hide_tag_line, $combine_audit_trail, $exclude_audit_trail_from_email, $email_signed_document, $document_time_zone, $show_built_in_form_fields, $allow_custom_field_creation, $show_shared_custom_fields, $hide_decline, $hide_save, $document_expiry_settings_expiry_date_type, $document_expiry_settings_expiry_value, $document_expiry_settings_enable_default_expiry_alert, $document_expiry_settings_enable_auto_reminder, $document_expiry_settings_reminder_days, $document_expiry_settings_reminder_count, $custom_domain_settings_domain_name, $custom_domain_settings_from_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editBrand'
     *
     * @param  string $brand_id The brand id. (required)
     * @param  string $brand_name (optional)
     * @param  \SplFileObject $brand_logo (optional)
     * @param  string $background_color (optional)
     * @param  string $button_color (optional)
     * @param  string $button_text_color (optional)
     * @param  string $email_display_name (optional)
     * @param  string $disclaimer_description (optional)
     * @param  string $disclaimer_title (optional)
     * @param  string $redirect_url (optional)
     * @param  bool $is_default (optional, default to false)
     * @param  bool $can_hide_tag_line (optional, default to false)
     * @param  bool $combine_audit_trail (optional, default to false)
     * @param  bool $exclude_audit_trail_from_email (optional, default to false)
     * @param  string $email_signed_document (optional, default to 'Attachment')
     * @param  string $document_time_zone (optional)
     * @param  bool $show_built_in_form_fields (optional, default to true)
     * @param  bool $allow_custom_field_creation (optional, default to false)
     * @param  bool $show_shared_custom_fields (optional, default to false)
     * @param  bool $hide_decline (optional)
     * @param  bool $hide_save (optional)
     * @param  string $document_expiry_settings_expiry_date_type (optional)
     * @param  int $document_expiry_settings_expiry_value (optional)
     * @param  bool $document_expiry_settings_enable_default_expiry_alert (optional)
     * @param  bool $document_expiry_settings_enable_auto_reminder (optional)
     * @param  int $document_expiry_settings_reminder_days (optional)
     * @param  int $document_expiry_settings_reminder_count (optional)
     * @param  string $custom_domain_settings_domain_name (optional)
     * @param  string $custom_domain_settings_from_name (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editBrandRequest($brand_id, $brand_name = null, $brand_logo = null, $background_color = null, $button_color = null, $button_text_color = null, $email_display_name = null, $disclaimer_description = null, $disclaimer_title = null, $redirect_url = null, $is_default = false, $can_hide_tag_line = false, $combine_audit_trail = false, $exclude_audit_trail_from_email = false, $email_signed_document = 'Attachment', $document_time_zone = null, $show_built_in_form_fields = true, $allow_custom_field_creation = false, $show_shared_custom_fields = false, $hide_decline = null, $hide_save = null, $document_expiry_settings_expiry_date_type = null, $document_expiry_settings_expiry_value = null, $document_expiry_settings_enable_default_expiry_alert = null, $document_expiry_settings_enable_auto_reminder = null, $document_expiry_settings_reminder_days = null, $document_expiry_settings_reminder_count = null, $custom_domain_settings_domain_name = null, $custom_domain_settings_from_name = null, string $contentType = self::contentTypes['editBrand'][0])
    {

        // verify the required parameter 'brand_id' is set
        if ($brand_id === null || (is_array($brand_id) && count($brand_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_id when calling editBrand'
            );
        }

























        if ($document_expiry_settings_reminder_days !== null && $document_expiry_settings_reminder_days > 180) {
            throw new \InvalidArgumentException('invalid value for "$document_expiry_settings_reminder_days" when calling BrandingApi.editBrand, must be smaller than or equal to 180.');
        }
        if ($document_expiry_settings_reminder_days !== null && $document_expiry_settings_reminder_days < 1) {
            throw new \InvalidArgumentException('invalid value for "$document_expiry_settings_reminder_days" when calling BrandingApi.editBrand, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/v1/brand/edit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brand_id,
            'brandId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);



        // form params
        if ($brand_name !== null) {
            $formParams['BrandName'] = ObjectSerializer::toFormValue($brand_name);
        }
        // form params
        if ($brand_logo !== null) {
            $multipart = true;
            $formParams['BrandLogo'] = [];
            $paramFiles = is_array($brand_logo) ? $brand_logo : [$brand_logo];
            foreach ($paramFiles as $paramFile) {
                $formParams['BrandLogo'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($background_color !== null) {
            $formParams['BackgroundColor'] = ObjectSerializer::toFormValue($background_color);
        }
        // form params
        if ($button_color !== null) {
            $formParams['ButtonColor'] = ObjectSerializer::toFormValue($button_color);
        }
        // form params
        if ($button_text_color !== null) {
            $formParams['ButtonTextColor'] = ObjectSerializer::toFormValue($button_text_color);
        }
        // form params
        if ($email_display_name !== null) {
            $formParams['EmailDisplayName'] = ObjectSerializer::toFormValue($email_display_name);
        }
        // form params
        if ($disclaimer_description !== null) {
            $formParams['DisclaimerDescription'] = ObjectSerializer::toFormValue($disclaimer_description);
        }
        // form params
        if ($disclaimer_title !== null) {
            $formParams['DisclaimerTitle'] = ObjectSerializer::toFormValue($disclaimer_title);
        }
        // form params
        if ($redirect_url !== null) {
            $formParams['RedirectUrl'] = ObjectSerializer::toFormValue($redirect_url);
        }
        // form params
        if ($is_default !== null) {
            $formParams['IsDefault'] = ObjectSerializer::toFormValue($is_default);
        }
        // form params
        if ($can_hide_tag_line !== null) {
            $formParams['CanHideTagLine'] = ObjectSerializer::toFormValue($can_hide_tag_line);
        }
        // form params
        if ($combine_audit_trail !== null) {
            $formParams['CombineAuditTrail'] = ObjectSerializer::toFormValue($combine_audit_trail);
        }
        // form params
        if ($exclude_audit_trail_from_email !== null) {
            $formParams['ExcludeAuditTrailFromEmail'] = ObjectSerializer::toFormValue($exclude_audit_trail_from_email);
        }
        // form params
        if ($email_signed_document !== null) {
            $formParams['EmailSignedDocument'] = ObjectSerializer::toFormValue($email_signed_document);
        }
        // form params
        if ($document_time_zone !== null) {
            $formParams['DocumentTimeZone'] = ObjectSerializer::toFormValue($document_time_zone);
        }
        // form params
        if ($show_built_in_form_fields !== null) {
            $formParams['ShowBuiltInFormFields'] = ObjectSerializer::toFormValue($show_built_in_form_fields);
        }
        // form params
        if ($allow_custom_field_creation !== null) {
            $formParams['AllowCustomFieldCreation'] = ObjectSerializer::toFormValue($allow_custom_field_creation);
        }
        // form params
        if ($show_shared_custom_fields !== null) {
            $formParams['ShowSharedCustomFields'] = ObjectSerializer::toFormValue($show_shared_custom_fields);
        }
        // form params
        if ($hide_decline !== null) {
            $formParams['HideDecline'] = ObjectSerializer::toFormValue($hide_decline);
        }
        // form params
        if ($hide_save !== null) {
            $formParams['HideSave'] = ObjectSerializer::toFormValue($hide_save);
        }
        // form params
        if ($document_expiry_settings_expiry_date_type !== null) {
            $formParams['DocumentExpirySettings.ExpiryDateType'] = ObjectSerializer::toFormValue($document_expiry_settings_expiry_date_type);
        }
        // form params
        if ($document_expiry_settings_expiry_value !== null) {
            $formParams['DocumentExpirySettings.ExpiryValue'] = ObjectSerializer::toFormValue($document_expiry_settings_expiry_value);
        }
        // form params
        if ($document_expiry_settings_enable_default_expiry_alert !== null) {
            $formParams['DocumentExpirySettings.EnableDefaultExpiryAlert'] = ObjectSerializer::toFormValue($document_expiry_settings_enable_default_expiry_alert);
        }
        // form params
        if ($document_expiry_settings_enable_auto_reminder !== null) {
            $formParams['DocumentExpirySettings.EnableAutoReminder'] = ObjectSerializer::toFormValue($document_expiry_settings_enable_auto_reminder);
        }
        // form params
        if ($document_expiry_settings_reminder_days !== null) {
            $formParams['DocumentExpirySettings.ReminderDays'] = ObjectSerializer::toFormValue($document_expiry_settings_reminder_days);
        }
        // form params
        if ($document_expiry_settings_reminder_count !== null) {
            $formParams['DocumentExpirySettings.ReminderCount'] = ObjectSerializer::toFormValue($document_expiry_settings_reminder_count);
        }
        // form params
        if ($custom_domain_settings_domain_name !== null) {
            $formParams['CustomDomainSettings.DomainName'] = ObjectSerializer::toFormValue($custom_domain_settings_domain_name);
        }
        // form params
        if ($custom_domain_settings_from_name !== null) {
            $formParams['CustomDomainSettings.FromName'] = ObjectSerializer::toFormValue($custom_domain_settings_from_name);
        }

        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=minimal;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;IEEE754Compatible=true', 'application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=full;IEEE754Compatible=false', 'application/json;odata.metadata=full;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=none;IEEE754Compatible=false', 'application/json;odata.metadata=none;IEEE754Compatible=true', 'application/json;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.streaming=false;IEEE754Compatible=true', 'application/json;IEEE754Compatible=false', 'application/json;IEEE754Compatible=true', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBrand
     *
     * Get the specific brand details.
     *
     * @param  string $brand_id The brand id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrand'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BoldSign\Model\ViewBrandDetails|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult
     */
    public function getBrand($brand_id, string $contentType = self::contentTypes['getBrand'][0])
    {
        list($response) = $this->getBrandWithHttpInfo($brand_id, $contentType);
        return $response;
    }

    /**
     * Operation getBrandWithHttpInfo
     *
     * Get the specific brand details.
     *
     * @param  string $brand_id The brand id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrand'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BoldSign\Model\ViewBrandDetails|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBrandWithHttpInfo($brand_id, string $contentType = self::contentTypes['getBrand'][0])
    {
        $request = $this->getBrandRequest($brand_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BoldSign\Model\ViewBrandDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ViewBrandDetails' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ViewBrandDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BoldSign\Model\ViewBrandDetails';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ViewBrandDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBrandAsync
     *
     * Get the specific brand details.
     *
     * @param  string $brand_id The brand id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBrandAsync($brand_id, string $contentType = self::contentTypes['getBrand'][0])
    {
        return $this->getBrandAsyncWithHttpInfo($brand_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBrandAsyncWithHttpInfo
     *
     * Get the specific brand details.
     *
     * @param  string $brand_id The brand id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBrandAsyncWithHttpInfo($brand_id, string $contentType = self::contentTypes['getBrand'][0])
    {
        $returnType = '\BoldSign\Model\ViewBrandDetails';
        $request = $this->getBrandRequest($brand_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBrand'
     *
     * @param  string $brand_id The brand id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBrandRequest($brand_id, string $contentType = self::contentTypes['getBrand'][0])
    {

        // verify the required parameter 'brand_id' is set
        if ($brand_id === null || (is_array($brand_id) && count($brand_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_id when calling getBrand'
            );
        }


        $resourcePath = '/v1/brand/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brand_id,
            'brandId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetDefaultBrand
     *
     * Reset default brand.
     *
     * @param  string $brand_id brand Id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetDefaultBrand'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \BoldSign\Model\BrandingMessage|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult
     */
    public function resetDefaultBrand($brand_id, string $contentType = self::contentTypes['resetDefaultBrand'][0])
    {
        list($response) = $this->resetDefaultBrandWithHttpInfo($brand_id, $contentType);
        return $response;
    }

    /**
     * Operation resetDefaultBrandWithHttpInfo
     *
     * Reset default brand.
     *
     * @param  string $brand_id brand Id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetDefaultBrand'] to see the possible values for this operation
     *
     * @throws \BoldSign\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \BoldSign\Model\BrandingMessage|\BoldSign\Model\ErrorResult|\BoldSign\Model\ErrorResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetDefaultBrandWithHttpInfo($brand_id, string $contentType = self::contentTypes['resetDefaultBrand'][0])
    {
        $request = $this->resetDefaultBrandRequest($brand_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BoldSign\Model\BrandingMessage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\BrandingMessage' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\BrandingMessage', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BoldSign\Model\ErrorResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BoldSign\Model\ErrorResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BoldSign\Model\ErrorResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BoldSign\Model\BrandingMessage';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\BrandingMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BoldSign\Model\ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetDefaultBrandAsync
     *
     * Reset default brand.
     *
     * @param  string $brand_id brand Id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetDefaultBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetDefaultBrandAsync($brand_id, string $contentType = self::contentTypes['resetDefaultBrand'][0])
    {
        return $this->resetDefaultBrandAsyncWithHttpInfo($brand_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetDefaultBrandAsyncWithHttpInfo
     *
     * Reset default brand.
     *
     * @param  string $brand_id brand Id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetDefaultBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetDefaultBrandAsyncWithHttpInfo($brand_id, string $contentType = self::contentTypes['resetDefaultBrand'][0])
    {
        $returnType = '\BoldSign\Model\BrandingMessage';
        $request = $this->resetDefaultBrandRequest($brand_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetDefaultBrand'
     *
     * @param  string $brand_id brand Id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetDefaultBrand'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetDefaultBrandRequest($brand_id, string $contentType = self::contentTypes['resetDefaultBrand'][0])
    {

        // verify the required parameter 'brand_id' is set
        if ($brand_id === null || (is_array($brand_id) && count($brand_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand_id when calling resetDefaultBrand'
            );
        }


        $resourcePath = '/v1/brand/resetdefault';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brand_id,
            'brandId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            $multipart ? ['multipart/form-data'] : ['application/json;odata.metadata=minimal;odata.streaming=true', 'application/json;odata.metadata=minimal;odata.streaming=false', 'application/json;odata.metadata=minimal', 'application/json;odata.metadata=full;odata.streaming=true', 'application/json;odata.metadata=full;odata.streaming=false', 'application/json;odata.metadata=full', 'application/json;odata.metadata=none;odata.streaming=true', 'application/json;odata.metadata=none;odata.streaming=false', 'application/json;odata.metadata=none', 'application/json;odata.streaming=true', 'application/json;odata.streaming=false', 'application/json', 'application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=minimal;IEEE754Compatible=false', 'application/json;odata.metadata=minimal;IEEE754Compatible=true', 'application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=full;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=full;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=full;IEEE754Compatible=false', 'application/json;odata.metadata=full;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.metadata=none;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=true', 'application/json;odata.metadata=none;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.metadata=none;IEEE754Compatible=false', 'application/json;odata.metadata=none;IEEE754Compatible=true', 'application/json;odata.streaming=true;IEEE754Compatible=false', 'application/json;odata.streaming=true;IEEE754Compatible=true', 'application/json;odata.streaming=false;IEEE754Compatible=false', 'application/json;odata.streaming=false;IEEE754Compatible=true', 'application/json;IEEE754Compatible=false', 'application/json;IEEE754Compatible=true', 'application/xml', 'text/plain', 'application/octet-stream', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name'     => 'body',
                        'contents' => $body,
                        'headers'  => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-KEY');
        if ($apiKey !== null) {
            $headers['X-API-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
