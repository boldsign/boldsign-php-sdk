<?php
/**
 * AuditTrail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * AuditTrail Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuditTrail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuditTrail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'email' => 'string',
        'to_name' => 'string',
        'to_email' => 'string',
        'ipaddress' => 'string',
        'action' => 'string',
        'timestamp' => 'int',
        'recipient_change_log' => '\BoldSign\Model\RecipientChangeLog',
        'document_change_log' => '\BoldSign\Model\ModificationDetails',
        'field_change_log' => '\BoldSign\Model\ModificationDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'email' => null,
        'to_name' => null,
        'to_email' => null,
        'ipaddress' => null,
        'action' => null,
        'timestamp' => 'int64',
        'recipient_change_log' => null,
        'document_change_log' => null,
        'field_change_log' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'name' => true,
        'email' => true,
        'to_name' => true,
        'to_email' => true,
        'ipaddress' => true,
        'action' => false,
        'timestamp' => false,
        'recipient_change_log' => false,
        'document_change_log' => false,
        'field_change_log' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'email' => 'email',
        'to_name' => 'toName',
        'to_email' => 'toEmail',
        'ipaddress' => 'ipaddress',
        'action' => 'action',
        'timestamp' => 'timestamp',
        'recipient_change_log' => 'recipientChangeLog',
        'document_change_log' => 'documentChangeLog',
        'field_change_log' => 'fieldChangeLog'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'email' => 'setEmail',
        'to_name' => 'setToName',
        'to_email' => 'setToEmail',
        'ipaddress' => 'setIpaddress',
        'action' => 'setAction',
        'timestamp' => 'setTimestamp',
        'recipient_change_log' => 'setRecipientChangeLog',
        'document_change_log' => 'setDocumentChangeLog',
        'field_change_log' => 'setFieldChangeLog'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'email' => 'getEmail',
        'to_name' => 'getToName',
        'to_email' => 'getToEmail',
        'ipaddress' => 'getIpaddress',
        'action' => 'getAction',
        'timestamp' => 'getTimestamp',
        'recipient_change_log' => 'getRecipientChangeLog',
        'document_change_log' => 'getDocumentChangeLog',
        'field_change_log' => 'getFieldChangeLog'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACTION_SENT = 'Sent';
    public const ACTION_VIEWED = 'Viewed';
    public const ACTION_SIGNED = 'Signed';
    public const ACTION_COMPLETED = 'Completed';
    public const ACTION_DOWNLOADED = 'Downloaded';
    public const ACTION_REASSIGNED = 'Reassigned';
    public const ACTION_DECLINED = 'Declined';
    public const ACTION_RECALLED = 'Recalled';
    public const ACTION_CREATED = 'Created';
    public const ACTION_AUTHENTICATION_FAILED = 'AuthenticationFailed';
    public const ACTION_REMINDER = 'Reminder';
    public const ACTION_ACCESS_CODE_CHANGED = 'AccessCodeChanged';
    public const ACTION_ACCESS_CODE_VIEWED = 'AccessCodeViewed';
    public const ACTION_DOWNLOADED_FOR_PRINT_SIGN = 'DownloadedForPrintSign';
    public const ACTION_FORM_CREATED = 'FormCreated';
    public const ACTION_EMAIL_OTP = 'EmailOTP';
    public const ACTION_AUTHENTICATION_REMOVED = 'AuthenticationRemoved';
    public const ACTION_DOWNLOADED_AUDIT_TRAIL = 'DownloadedAuditTrail';
    public const ACTION_CLONED = 'Cloned';
    public const ACTION_CLONED_WITH_FIELD_VALUES = 'ClonedWithFieldValues';
    public const ACTION_DELETED = 'Deleted';
    public const ACTION_MOVED_TO_TRASH = 'MovedToTrash';
    public const ACTION_RESTORED = 'Restored';
    public const ACTION_AUTO_REMINDER = 'AutoReminder';
    public const ACTION_RESEND = 'Resend';
    public const ACTION_REVIEWED = 'Reviewed';
    public const ACTION_INITIATE_PRINT_SIGN = 'InitiatePrintSign';
    public const ACTION_CANCEL_PRINT_SIGN = 'CancelPrintSign';
    public const ACTION_COMPLETE_PRINT_SIGN = 'CompletePrintSign';
    public const ACTION_GENERATED_EMBEDDED_SIGN_LINK = 'GeneratedEmbeddedSignLink';
    public const ACTION_EMBEDDED_SIGNED = 'EmbeddedSigned';
    public const ACTION_EMBEDDED_REVIEWED = 'EmbeddedReviewed';
    public const ACTION_EXPIRY_DATE_EXTENDED = 'ExpiryDateExtended';
    public const ACTION_ATTACHMENT = 'Attachment';
    public const ACTION_EDIT_RECIPIENT = 'EditRecipient';
    public const ACTION_AUTHENTICATION_ADDED = 'AuthenticationAdded';
    public const ACTION_AUTO_REMINDER_ON = 'AutoReminderON';
    public const ACTION_AUTO_REMINDER_OFF = 'AutoReminderOFF';
    public const ACTION_SMSOTP = 'SMSOTP';
    public const ACTION_PHONE_NUMBER_CHANGED = 'PhoneNumberChanged';
    public const ACTION_UNLOCKED_SMSOTP = 'UnlockedSMSOTP';
    public const ACTION_SMS_AUTHENTICATION_ADDED = 'SMSAuthenticationAdded';
    public const ACTION_SMS_AUTHENTICATION_REMOVED = 'SMSAuthenticationRemoved';
    public const ACTION_SMSOTP_VERIFIED = 'SMSOTPVerified';
    public const ACTION_SMS_AUTHENTICATION_FAILED = 'SMSAuthenticationFailed';
    public const ACTION_UNLOCK_EMAIL_OTP = 'UnlockEmailOTP';
    public const ACTION_EMAIL_AUTHENTICATION_ADDED = 'EmailAuthenticationAdded';
    public const ACTION_EMAIL_AUTHENTICATION_REMOVED = 'EmailAuthenticationRemoved';
    public const ACTION_EMAIL_OTP_VERIFY = 'EmailOtpVerify';
    public const ACTION_EMAIL_AUTHENTICATION_FAILED = 'EmailAuthenticationFailed';
    public const ACTION_SMSOTP_RESEND = 'SMSOTPResend';
    public const ACTION_EMAIL_OTP_RESEND = 'EmailOTPResend';
    public const ACTION_RESUME_DOCUMENT_SIGNING = 'ResumeDocumentSigning';
    public const ACTION_EMAIL_OTP_AUTHENTICATION_ADDED = 'EmailOTPAuthenticationAdded';
    public const ACTION_EMAIL_OTP_AUTHENTICATION_REMOVED = 'EmailOTPAuthenticationRemoved';
    public const ACTION_EMAIL_OTP_AUTHENTICATION_FAILED = 'EmailOTPAuthenticationFailed';
    public const ACTION_EMAIL_OTP_VERIFIED = 'EmailOTPVerified';
    public const ACTION_IDENTITY_VERIFICATION_INITIATED = 'IdentityVerificationInitiated';
    public const ACTION_IDENTITY_VERIFICATION_REMOVED = 'IdentityVerificationRemoved';
    public const ACTION_IDENTITY_VERIFICATION_COMPLETED = 'IdentityVerificationCompleted';
    public const ACTION_IDENTITY_VERIFICATION_FAILED = 'IdentityVerificationFailed';
    public const ACTION_DOWNLOADED_VERIFICATION_DATA = 'DownloadedVerificationData';
    public const ACTION_MANUAL_IDENTITY_VERIFICATION_COMPLETED = 'ManualIdentityVerificationCompleted';
    public const ACTION_IDENTITY_VERIFICATION_RESET = 'IdentityVerificationReset';
    public const ACTION_CREATE_EMBEDDED_VERIFICATION_LINK = 'CreateEmbeddedVerificationLink';
    public const ACTION_SENSITIVE_DATA_DOWNLOADED = 'SensitiveDataDownloaded';
    public const ACTION_ID_VERIFICATION_REMOVED = 'IdVerificationRemoved';
    public const ACTION_ID_VERIFICATION_ADDED = 'IdVerificationAdded';
    public const ACTION_MANUAL_IDENTITY_VERIFICATION_INITIATED = 'ManualIdentityVerificationInitiated';
    public const ACTION_GENERATED_SIGNING_LINK = 'GeneratedSigningLink';
    public const ACTION_EDITING_INITIATED = 'EditingInitiated';
    public const ACTION_EDITING_CANCELLED = 'EditingCancelled';
    public const ACTION_EDITING_COMPLETED = 'EditingCompleted';
    public const ACTION_QES_VERIFICATION_INITIATED = 'QESVerificationInitiated';
    public const ACTION_QES_VERIFIED = 'QESVerified';
    public const ACTION_QES_REJECTED = 'QESRejected';
    public const ACTION_QES_EXPIRED = 'QESExpired';
    public const ACTION_QES_WITHDRAWN = 'QESWithdrawn';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_SENT,
            self::ACTION_VIEWED,
            self::ACTION_SIGNED,
            self::ACTION_COMPLETED,
            self::ACTION_DOWNLOADED,
            self::ACTION_REASSIGNED,
            self::ACTION_DECLINED,
            self::ACTION_RECALLED,
            self::ACTION_CREATED,
            self::ACTION_AUTHENTICATION_FAILED,
            self::ACTION_REMINDER,
            self::ACTION_ACCESS_CODE_CHANGED,
            self::ACTION_ACCESS_CODE_VIEWED,
            self::ACTION_DOWNLOADED_FOR_PRINT_SIGN,
            self::ACTION_FORM_CREATED,
            self::ACTION_EMAIL_OTP,
            self::ACTION_AUTHENTICATION_REMOVED,
            self::ACTION_DOWNLOADED_AUDIT_TRAIL,
            self::ACTION_CLONED,
            self::ACTION_CLONED_WITH_FIELD_VALUES,
            self::ACTION_DELETED,
            self::ACTION_MOVED_TO_TRASH,
            self::ACTION_RESTORED,
            self::ACTION_AUTO_REMINDER,
            self::ACTION_RESEND,
            self::ACTION_REVIEWED,
            self::ACTION_INITIATE_PRINT_SIGN,
            self::ACTION_CANCEL_PRINT_SIGN,
            self::ACTION_COMPLETE_PRINT_SIGN,
            self::ACTION_GENERATED_EMBEDDED_SIGN_LINK,
            self::ACTION_EMBEDDED_SIGNED,
            self::ACTION_EMBEDDED_REVIEWED,
            self::ACTION_EXPIRY_DATE_EXTENDED,
            self::ACTION_ATTACHMENT,
            self::ACTION_EDIT_RECIPIENT,
            self::ACTION_AUTHENTICATION_ADDED,
            self::ACTION_AUTO_REMINDER_ON,
            self::ACTION_AUTO_REMINDER_OFF,
            self::ACTION_SMSOTP,
            self::ACTION_PHONE_NUMBER_CHANGED,
            self::ACTION_UNLOCKED_SMSOTP,
            self::ACTION_SMS_AUTHENTICATION_ADDED,
            self::ACTION_SMS_AUTHENTICATION_REMOVED,
            self::ACTION_SMSOTP_VERIFIED,
            self::ACTION_SMS_AUTHENTICATION_FAILED,
            self::ACTION_UNLOCK_EMAIL_OTP,
            self::ACTION_EMAIL_AUTHENTICATION_ADDED,
            self::ACTION_EMAIL_AUTHENTICATION_REMOVED,
            self::ACTION_EMAIL_OTP_VERIFY,
            self::ACTION_EMAIL_AUTHENTICATION_FAILED,
            self::ACTION_SMSOTP_RESEND,
            self::ACTION_EMAIL_OTP_RESEND,
            self::ACTION_RESUME_DOCUMENT_SIGNING,
            self::ACTION_EMAIL_OTP_AUTHENTICATION_ADDED,
            self::ACTION_EMAIL_OTP_AUTHENTICATION_REMOVED,
            self::ACTION_EMAIL_OTP_AUTHENTICATION_FAILED,
            self::ACTION_EMAIL_OTP_VERIFIED,
            self::ACTION_IDENTITY_VERIFICATION_INITIATED,
            self::ACTION_IDENTITY_VERIFICATION_REMOVED,
            self::ACTION_IDENTITY_VERIFICATION_COMPLETED,
            self::ACTION_IDENTITY_VERIFICATION_FAILED,
            self::ACTION_DOWNLOADED_VERIFICATION_DATA,
            self::ACTION_MANUAL_IDENTITY_VERIFICATION_COMPLETED,
            self::ACTION_IDENTITY_VERIFICATION_RESET,
            self::ACTION_CREATE_EMBEDDED_VERIFICATION_LINK,
            self::ACTION_SENSITIVE_DATA_DOWNLOADED,
            self::ACTION_ID_VERIFICATION_REMOVED,
            self::ACTION_ID_VERIFICATION_ADDED,
            self::ACTION_MANUAL_IDENTITY_VERIFICATION_INITIATED,
            self::ACTION_GENERATED_SIGNING_LINK,
            self::ACTION_EDITING_INITIATED,
            self::ACTION_EDITING_CANCELLED,
            self::ACTION_EDITING_COMPLETED,
            self::ACTION_QES_VERIFICATION_INITIATED,
            self::ACTION_QES_VERIFIED,
            self::ACTION_QES_REJECTED,
            self::ACTION_QES_EXPIRED,
            self::ACTION_QES_WITHDRAWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('to_name', $data ?? [], null);
        $this->setIfExists('to_email', $data ?? [], null);
        $this->setIfExists('ipaddress', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('recipient_change_log', $data ?? [], null);
        $this->setIfExists('document_change_log', $data ?? [], null);
        $this->setIfExists('field_change_log', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets to_name
     *
     * @return string|null
     */
    public function getToName()
    {
        return $this->container['to_name'];
    }

    /**
     * Sets to_name
     *
     * @param string|null $to_name to_name
     *
     * @return self
     */
    public function setToName($to_name)
    {
        if (is_null($to_name)) {
            array_push($this->openAPINullablesSetToNull, 'to_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_name'] = $to_name;

        return $this;
    }

    /**
     * Gets to_email
     *
     * @return string|null
     */
    public function getToEmail()
    {
        return $this->container['to_email'];
    }

    /**
     * Sets to_email
     *
     * @param string|null $to_email to_email
     *
     * @return self
     */
    public function setToEmail($to_email)
    {
        if (is_null($to_email)) {
            array_push($this->openAPINullablesSetToNull, 'to_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to_email'] = $to_email;

        return $this;
    }

    /**
     * Gets ipaddress
     *
     * @return string|null
     */
    public function getIpaddress()
    {
        return $this->container['ipaddress'];
    }

    /**
     * Sets ipaddress
     *
     * @param string|null $ipaddress ipaddress
     *
     * @return self
     */
    public function setIpaddress($ipaddress)
    {
        if (is_null($ipaddress)) {
            array_push($this->openAPINullablesSetToNull, 'ipaddress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ipaddress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ipaddress'] = $ipaddress;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $allowedValues = $this->getActionAllowableValues();
        if (!in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets recipient_change_log
     *
     * @return \BoldSign\Model\RecipientChangeLog|null
     */
    public function getRecipientChangeLog()
    {
        return $this->container['recipient_change_log'];
    }

    /**
     * Sets recipient_change_log
     *
     * @param \BoldSign\Model\RecipientChangeLog|null $recipient_change_log recipient_change_log
     *
     * @return self
     */
    public function setRecipientChangeLog($recipient_change_log)
    {
        if (is_null($recipient_change_log)) {
            throw new \InvalidArgumentException('non-nullable recipient_change_log cannot be null');
        }
        $this->container['recipient_change_log'] = $recipient_change_log;

        return $this;
    }

    /**
     * Gets document_change_log
     *
     * @return \BoldSign\Model\ModificationDetails|null
     */
    public function getDocumentChangeLog()
    {
        return $this->container['document_change_log'];
    }

    /**
     * Sets document_change_log
     *
     * @param \BoldSign\Model\ModificationDetails|null $document_change_log document_change_log
     *
     * @return self
     */
    public function setDocumentChangeLog($document_change_log)
    {
        if (is_null($document_change_log)) {
            throw new \InvalidArgumentException('non-nullable document_change_log cannot be null');
        }
        $this->container['document_change_log'] = $document_change_log;

        return $this;
    }

    /**
     * Gets field_change_log
     *
     * @return \BoldSign\Model\ModificationDetails|null
     */
    public function getFieldChangeLog()
    {
        return $this->container['field_change_log'];
    }

    /**
     * Sets field_change_log
     *
     * @param \BoldSign\Model\ModificationDetails|null $field_change_log field_change_log
     *
     * @return self
     */
    public function setFieldChangeLog($field_change_log)
    {
        if (is_null($field_change_log)) {
            throw new \InvalidArgumentException('non-nullable field_change_log cannot be null');
        }
        $this->container['field_change_log'] = $field_change_log;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


