<?php
/**
 * ChangeRecipient
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * ChangeRecipient Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChangeRecipient implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChangeRecipient';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'new_signer_name' => 'string',
        'reason' => 'string',
        'order' => 'int',
        'new_signer_email' => 'string',
        'old_signer_email' => 'string',
        'on_behalf_of' => 'string',
        'phone_number' => '\BoldSign\Model\PhoneNumber',
        'old_phone_number' => '\BoldSign\Model\PhoneNumber'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'new_signer_name' => null,
        'reason' => null,
        'order' => 'int32',
        'new_signer_email' => 'email',
        'old_signer_email' => 'email',
        'on_behalf_of' => null,
        'phone_number' => null,
        'old_phone_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'new_signer_name' => false,
        'reason' => false,
        'order' => true,
        'new_signer_email' => true,
        'old_signer_email' => true,
        'on_behalf_of' => true,
        'phone_number' => false,
        'old_phone_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'new_signer_name' => 'newSignerName',
        'reason' => 'reason',
        'order' => 'order',
        'new_signer_email' => 'newSignerEmail',
        'old_signer_email' => 'oldSignerEmail',
        'on_behalf_of' => 'onBehalfOf',
        'phone_number' => 'phoneNumber',
        'old_phone_number' => 'oldPhoneNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'new_signer_name' => 'setNewSignerName',
        'reason' => 'setReason',
        'order' => 'setOrder',
        'new_signer_email' => 'setNewSignerEmail',
        'old_signer_email' => 'setOldSignerEmail',
        'on_behalf_of' => 'setOnBehalfOf',
        'phone_number' => 'setPhoneNumber',
        'old_phone_number' => 'setOldPhoneNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'new_signer_name' => 'getNewSignerName',
        'reason' => 'getReason',
        'order' => 'getOrder',
        'new_signer_email' => 'getNewSignerEmail',
        'old_signer_email' => 'getOldSignerEmail',
        'on_behalf_of' => 'getOnBehalfOf',
        'phone_number' => 'getPhoneNumber',
        'old_phone_number' => 'getOldPhoneNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('new_signer_name', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('new_signer_email', $data ?? [], null);
        $this->setIfExists('old_signer_email', $data ?? [], null);
        $this->setIfExists('on_behalf_of', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('old_phone_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['new_signer_name'] === null) {
            $invalidProperties[] = "'new_signer_name' can't be null";
        }
        if ((mb_strlen($this->container['new_signer_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'new_signer_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        if ((mb_strlen($this->container['reason']) < 1)) {
            $invalidProperties[] = "invalid value for 'reason', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['order']) && ($this->container['order'] > 50)) {
            $invalidProperties[] = "invalid value for 'order', must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['order']) && ($this->container['order'] < 1)) {
            $invalidProperties[] = "invalid value for 'order', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets new_signer_name
     *
     * @return string
     */
    public function getNewSignerName()
    {
        return $this->container['new_signer_name'];
    }

    /**
     * Sets new_signer_name
     *
     * @param string $new_signer_name new_signer_name
     *
     * @return self
     */
    public function setNewSignerName($new_signer_name)
    {
        if (is_null($new_signer_name)) {
            throw new \InvalidArgumentException('non-nullable new_signer_name cannot be null');
        }

        if ((mb_strlen($new_signer_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $new_signer_name when calling ChangeRecipient., must be bigger than or equal to 1.');
        }

        $this->container['new_signer_name'] = $new_signer_name;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }

        if ((mb_strlen($reason) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reason when calling ChangeRecipient., must be bigger than or equal to 1.');
        }

        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($order) && ($order > 50)) {
            throw new \InvalidArgumentException('invalid value for $order when calling ChangeRecipient., must be smaller than or equal to 50.');
        }
        if (!is_null($order) && ($order < 1)) {
            throw new \InvalidArgumentException('invalid value for $order when calling ChangeRecipient., must be bigger than or equal to 1.');
        }

        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets new_signer_email
     *
     * @return string|null
     */
    public function getNewSignerEmail()
    {
        return $this->container['new_signer_email'];
    }

    /**
     * Sets new_signer_email
     *
     * @param string|null $new_signer_email new_signer_email
     *
     * @return self
     */
    public function setNewSignerEmail($new_signer_email)
    {
        if (is_null($new_signer_email)) {
            array_push($this->openAPINullablesSetToNull, 'new_signer_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('new_signer_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['new_signer_email'] = $new_signer_email;

        return $this;
    }

    /**
     * Gets old_signer_email
     *
     * @return string|null
     */
    public function getOldSignerEmail()
    {
        return $this->container['old_signer_email'];
    }

    /**
     * Sets old_signer_email
     *
     * @param string|null $old_signer_email old_signer_email
     *
     * @return self
     */
    public function setOldSignerEmail($old_signer_email)
    {
        if (is_null($old_signer_email)) {
            array_push($this->openAPINullablesSetToNull, 'old_signer_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('old_signer_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['old_signer_email'] = $old_signer_email;

        return $this;
    }

    /**
     * Gets on_behalf_of
     *
     * @return string|null
     */
    public function getOnBehalfOf()
    {
        return $this->container['on_behalf_of'];
    }

    /**
     * Sets on_behalf_of
     *
     * @param string|null $on_behalf_of on_behalf_of
     *
     * @return self
     */
    public function setOnBehalfOf($on_behalf_of)
    {
        if (is_null($on_behalf_of)) {
            array_push($this->openAPINullablesSetToNull, 'on_behalf_of');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('on_behalf_of', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['on_behalf_of'] = $on_behalf_of;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return \BoldSign\Model\PhoneNumber|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param \BoldSign\Model\PhoneNumber|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets old_phone_number
     *
     * @return \BoldSign\Model\PhoneNumber|null
     */
    public function getOldPhoneNumber()
    {
        return $this->container['old_phone_number'];
    }

    /**
     * Sets old_phone_number
     *
     * @param \BoldSign\Model\PhoneNumber|null $old_phone_number old_phone_number
     *
     * @return self
     */
    public function setOldPhoneNumber($old_phone_number)
    {
        if (is_null($old_phone_number)) {
            throw new \InvalidArgumentException('non-nullable old_phone_number cannot be null');
        }
        $this->container['old_phone_number'] = $old_phone_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


