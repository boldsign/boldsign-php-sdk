<?php
/**
 * Document
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Document implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'document_id' => 'string',
        'sender_detail' => '\BoldSign\Model\DocumentSenderDetail',
        'cc_details' => '\BoldSign\Model\DocumentCcDetails[]',
        'created_date' => 'int',
        'activity_date' => 'int',
        'activity_by' => 'string',
        'message_title' => 'string',
        'status' => 'string',
        'signer_details' => '\BoldSign\Model\DocumentSignerDetails[]',
        'expiry_date' => 'int',
        'enable_signing_order' => 'bool',
        'is_deleted' => 'bool',
        'labels' => 'string[]',
        'cursor' => 'int',
        'brand_id' => 'string',
        'scheduled_send_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'document_id' => null,
        'sender_detail' => null,
        'cc_details' => null,
        'created_date' => 'int64',
        'activity_date' => 'int64',
        'activity_by' => null,
        'message_title' => null,
        'status' => null,
        'signer_details' => null,
        'expiry_date' => 'int64',
        'enable_signing_order' => null,
        'is_deleted' => null,
        'labels' => null,
        'cursor' => 'int64',
        'brand_id' => null,
        'scheduled_send_time' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'document_id' => true,
        'sender_detail' => false,
        'cc_details' => true,
        'created_date' => false,
        'activity_date' => false,
        'activity_by' => true,
        'message_title' => true,
        'status' => false,
        'signer_details' => true,
        'expiry_date' => false,
        'enable_signing_order' => false,
        'is_deleted' => false,
        'labels' => true,
        'cursor' => false,
        'brand_id' => true,
        'scheduled_send_time' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_id' => 'documentId',
        'sender_detail' => 'senderDetail',
        'cc_details' => 'ccDetails',
        'created_date' => 'createdDate',
        'activity_date' => 'activityDate',
        'activity_by' => 'activityBy',
        'message_title' => 'messageTitle',
        'status' => 'status',
        'signer_details' => 'signerDetails',
        'expiry_date' => 'expiryDate',
        'enable_signing_order' => 'enableSigningOrder',
        'is_deleted' => 'isDeleted',
        'labels' => 'labels',
        'cursor' => 'cursor',
        'brand_id' => 'brandId',
        'scheduled_send_time' => 'scheduledSendTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_id' => 'setDocumentId',
        'sender_detail' => 'setSenderDetail',
        'cc_details' => 'setCcDetails',
        'created_date' => 'setCreatedDate',
        'activity_date' => 'setActivityDate',
        'activity_by' => 'setActivityBy',
        'message_title' => 'setMessageTitle',
        'status' => 'setStatus',
        'signer_details' => 'setSignerDetails',
        'expiry_date' => 'setExpiryDate',
        'enable_signing_order' => 'setEnableSigningOrder',
        'is_deleted' => 'setIsDeleted',
        'labels' => 'setLabels',
        'cursor' => 'setCursor',
        'brand_id' => 'setBrandId',
        'scheduled_send_time' => 'setScheduledSendTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_id' => 'getDocumentId',
        'sender_detail' => 'getSenderDetail',
        'cc_details' => 'getCcDetails',
        'created_date' => 'getCreatedDate',
        'activity_date' => 'getActivityDate',
        'activity_by' => 'getActivityBy',
        'message_title' => 'getMessageTitle',
        'status' => 'getStatus',
        'signer_details' => 'getSignerDetails',
        'expiry_date' => 'getExpiryDate',
        'enable_signing_order' => 'getEnableSigningOrder',
        'is_deleted' => 'getIsDeleted',
        'labels' => 'getLabels',
        'cursor' => 'getCursor',
        'brand_id' => 'getBrandId',
        'scheduled_send_time' => 'getScheduledSendTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_IN_PROGRESS = 'InProgress';
    public const STATUS_COMPLETED = 'Completed';
    public const STATUS_DECLINED = 'Declined';
    public const STATUS_EXPIRED = 'Expired';
    public const STATUS_REVOKED = 'Revoked';
    public const STATUS_DRAFT = 'Draft';
    public const STATUS_SCHEDULED = 'Scheduled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_IN_PROGRESS,
            self::STATUS_COMPLETED,
            self::STATUS_DECLINED,
            self::STATUS_EXPIRED,
            self::STATUS_REVOKED,
            self::STATUS_DRAFT,
            self::STATUS_SCHEDULED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('document_id', $data ?? [], null);
        $this->setIfExists('sender_detail', $data ?? [], null);
        $this->setIfExists('cc_details', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('activity_date', $data ?? [], null);
        $this->setIfExists('activity_by', $data ?? [], null);
        $this->setIfExists('message_title', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('signer_details', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('enable_signing_order', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('cursor', $data ?? [], null);
        $this->setIfExists('brand_id', $data ?? [], null);
        $this->setIfExists('scheduled_send_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_id
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string|null $document_id document_id
     *
     * @return self
     */
    public function setDocumentId($document_id)
    {
        if (is_null($document_id)) {
            array_push($this->openAPINullablesSetToNull, 'document_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets sender_detail
     *
     * @return \BoldSign\Model\DocumentSenderDetail|null
     */
    public function getSenderDetail()
    {
        return $this->container['sender_detail'];
    }

    /**
     * Sets sender_detail
     *
     * @param \BoldSign\Model\DocumentSenderDetail|null $sender_detail sender_detail
     *
     * @return self
     */
    public function setSenderDetail($sender_detail)
    {
        if (is_null($sender_detail)) {
            throw new \InvalidArgumentException('non-nullable sender_detail cannot be null');
        }
        $this->container['sender_detail'] = $sender_detail;

        return $this;
    }

    /**
     * Gets cc_details
     *
     * @return \BoldSign\Model\DocumentCcDetails[]|null
     */
    public function getCcDetails()
    {
        return $this->container['cc_details'];
    }

    /**
     * Sets cc_details
     *
     * @param \BoldSign\Model\DocumentCcDetails[]|null $cc_details cc_details
     *
     * @return self
     */
    public function setCcDetails($cc_details)
    {
        if (is_null($cc_details)) {
            array_push($this->openAPINullablesSetToNull, 'cc_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cc_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cc_details'] = $cc_details;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets activity_date
     *
     * @return int|null
     */
    public function getActivityDate()
    {
        return $this->container['activity_date'];
    }

    /**
     * Sets activity_date
     *
     * @param int|null $activity_date activity_date
     *
     * @return self
     */
    public function setActivityDate($activity_date)
    {
        if (is_null($activity_date)) {
            throw new \InvalidArgumentException('non-nullable activity_date cannot be null');
        }
        $this->container['activity_date'] = $activity_date;

        return $this;
    }

    /**
     * Gets activity_by
     *
     * @return string|null
     */
    public function getActivityBy()
    {
        return $this->container['activity_by'];
    }

    /**
     * Sets activity_by
     *
     * @param string|null $activity_by activity_by
     *
     * @return self
     */
    public function setActivityBy($activity_by)
    {
        if (is_null($activity_by)) {
            array_push($this->openAPINullablesSetToNull, 'activity_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_by'] = $activity_by;

        return $this;
    }

    /**
     * Gets message_title
     *
     * @return string|null
     */
    public function getMessageTitle()
    {
        return $this->container['message_title'];
    }

    /**
     * Sets message_title
     *
     * @param string|null $message_title message_title
     *
     * @return self
     */
    public function setMessageTitle($message_title)
    {
        if (is_null($message_title)) {
            array_push($this->openAPINullablesSetToNull, 'message_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message_title'] = $message_title;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets signer_details
     *
     * @return \BoldSign\Model\DocumentSignerDetails[]|null
     */
    public function getSignerDetails()
    {
        return $this->container['signer_details'];
    }

    /**
     * Sets signer_details
     *
     * @param \BoldSign\Model\DocumentSignerDetails[]|null $signer_details signer_details
     *
     * @return self
     */
    public function setSignerDetails($signer_details)
    {
        if (is_null($signer_details)) {
            array_push($this->openAPINullablesSetToNull, 'signer_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signer_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signer_details'] = $signer_details;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return int|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param int|null $expiry_date expiry_date
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {
        if (is_null($expiry_date)) {
            throw new \InvalidArgumentException('non-nullable expiry_date cannot be null');
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets enable_signing_order
     *
     * @return bool|null
     */
    public function getEnableSigningOrder()
    {
        return $this->container['enable_signing_order'];
    }

    /**
     * Sets enable_signing_order
     *
     * @param bool|null $enable_signing_order enable_signing_order
     *
     * @return self
     */
    public function setEnableSigningOrder($enable_signing_order)
    {
        if (is_null($enable_signing_order)) {
            throw new \InvalidArgumentException('non-nullable enable_signing_order cannot be null');
        }
        $this->container['enable_signing_order'] = $enable_signing_order;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            array_push($this->openAPINullablesSetToNull, 'labels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('labels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets cursor
     *
     * @return int|null
     */
    public function getCursor()
    {
        return $this->container['cursor'];
    }

    /**
     * Sets cursor
     *
     * @param int|null $cursor cursor
     *
     * @return self
     */
    public function setCursor($cursor)
    {
        if (is_null($cursor)) {
            throw new \InvalidArgumentException('non-nullable cursor cannot be null');
        }
        $this->container['cursor'] = $cursor;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string|null $brand_id brand_id
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        if (is_null($brand_id)) {
            array_push($this->openAPINullablesSetToNull, 'brand_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets scheduled_send_time
     *
     * @return int|null
     */
    public function getScheduledSendTime()
    {
        return $this->container['scheduled_send_time'];
    }

    /**
     * Sets scheduled_send_time
     *
     * @param int|null $scheduled_send_time scheduled_send_time
     *
     * @return self
     */
    public function setScheduledSendTime($scheduled_send_time)
    {
        if (is_null($scheduled_send_time)) {
            array_push($this->openAPINullablesSetToNull, 'scheduled_send_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduled_send_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduled_send_time'] = $scheduled_send_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


