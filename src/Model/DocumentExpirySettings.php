<?php
/**
 * DocumentExpirySettings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * DocumentExpirySettings Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentExpirySettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentExpirySettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'expiry_date_type' => 'string',
        'expiry_value' => 'int',
        'enable_default_expiry_alert' => 'bool',
        'enable_auto_reminder' => 'bool',
        'reminder_days' => 'int',
        'reminder_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'expiry_date_type' => null,
        'expiry_value' => 'int32',
        'enable_default_expiry_alert' => null,
        'enable_auto_reminder' => null,
        'reminder_days' => 'int32',
        'reminder_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'expiry_date_type' => true,
        'expiry_value' => true,
        'enable_default_expiry_alert' => true,
        'enable_auto_reminder' => true,
        'reminder_days' => true,
        'reminder_count' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expiry_date_type' => 'expiryDateType',
        'expiry_value' => 'expiryValue',
        'enable_default_expiry_alert' => 'enableDefaultExpiryAlert',
        'enable_auto_reminder' => 'enableAutoReminder',
        'reminder_days' => 'reminderDays',
        'reminder_count' => 'reminderCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expiry_date_type' => 'setExpiryDateType',
        'expiry_value' => 'setExpiryValue',
        'enable_default_expiry_alert' => 'setEnableDefaultExpiryAlert',
        'enable_auto_reminder' => 'setEnableAutoReminder',
        'reminder_days' => 'setReminderDays',
        'reminder_count' => 'setReminderCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expiry_date_type' => 'getExpiryDateType',
        'expiry_value' => 'getExpiryValue',
        'enable_default_expiry_alert' => 'getEnableDefaultExpiryAlert',
        'enable_auto_reminder' => 'getEnableAutoReminder',
        'reminder_days' => 'getReminderDays',
        'reminder_count' => 'getReminderCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EXPIRY_DATE_TYPE_DAYS = 'Days';
    public const EXPIRY_DATE_TYPE_HOURS = 'Hours';
    public const EXPIRY_DATE_TYPE_SPECIFIC_DATE_TIME = 'SpecificDateTime';
    public const EXPIRY_DATE_TYPE_NULL = 'null';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpiryDateTypeAllowableValues()
    {
        return [
            self::EXPIRY_DATE_TYPE_DAYS,
            self::EXPIRY_DATE_TYPE_HOURS,
            self::EXPIRY_DATE_TYPE_SPECIFIC_DATE_TIME,
            self::EXPIRY_DATE_TYPE_NULL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('expiry_date_type', $data ?? [], null);
        $this->setIfExists('expiry_value', $data ?? [], null);
        $this->setIfExists('enable_default_expiry_alert', $data ?? [], null);
        $this->setIfExists('enable_auto_reminder', $data ?? [], null);
        $this->setIfExists('reminder_days', $data ?? [], null);
        $this->setIfExists('reminder_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getExpiryDateTypeAllowableValues();
        if (!is_null($this->container['expiry_date_type']) && !in_array($this->container['expiry_date_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'expiry_date_type', must be one of '%s'",
                $this->container['expiry_date_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['reminder_days']) && ($this->container['reminder_days'] > 180)) {
            $invalidProperties[] = "invalid value for 'reminder_days', must be smaller than or equal to 180.";
        }

        if (!is_null($this->container['reminder_days']) && ($this->container['reminder_days'] < 1)) {
            $invalidProperties[] = "invalid value for 'reminder_days', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expiry_date_type
     *
     * @return string|null
     */
    public function getExpiryDateType()
    {
        return $this->container['expiry_date_type'];
    }

    /**
     * Sets expiry_date_type
     *
     * @param string|null $expiry_date_type expiry_date_type
     *
     * @return self
     */
    public function setExpiryDateType($expiry_date_type)
    {
        if (is_null($expiry_date_type)) {
            array_push($this->openAPINullablesSetToNull, 'expiry_date_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiry_date_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getExpiryDateTypeAllowableValues();
        if (!is_null($expiry_date_type) && !in_array($expiry_date_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'expiry_date_type', must be one of '%s'",
                    $expiry_date_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expiry_date_type'] = $expiry_date_type;

        return $this;
    }

    /**
     * Gets expiry_value
     *
     * @return int|null
     */
    public function getExpiryValue()
    {
        return $this->container['expiry_value'];
    }

    /**
     * Sets expiry_value
     *
     * @param int|null $expiry_value expiry_value
     *
     * @return self
     */
    public function setExpiryValue($expiry_value)
    {
        if (is_null($expiry_value)) {
            array_push($this->openAPINullablesSetToNull, 'expiry_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiry_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiry_value'] = $expiry_value;

        return $this;
    }

    /**
     * Gets enable_default_expiry_alert
     *
     * @return bool|null
     */
    public function getEnableDefaultExpiryAlert()
    {
        return $this->container['enable_default_expiry_alert'];
    }

    /**
     * Sets enable_default_expiry_alert
     *
     * @param bool|null $enable_default_expiry_alert enable_default_expiry_alert
     *
     * @return self
     */
    public function setEnableDefaultExpiryAlert($enable_default_expiry_alert)
    {
        if (is_null($enable_default_expiry_alert)) {
            array_push($this->openAPINullablesSetToNull, 'enable_default_expiry_alert');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_default_expiry_alert', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_default_expiry_alert'] = $enable_default_expiry_alert;

        return $this;
    }

    /**
     * Gets enable_auto_reminder
     *
     * @return bool|null
     */
    public function getEnableAutoReminder()
    {
        return $this->container['enable_auto_reminder'];
    }

    /**
     * Sets enable_auto_reminder
     *
     * @param bool|null $enable_auto_reminder enable_auto_reminder
     *
     * @return self
     */
    public function setEnableAutoReminder($enable_auto_reminder)
    {
        if (is_null($enable_auto_reminder)) {
            array_push($this->openAPINullablesSetToNull, 'enable_auto_reminder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_auto_reminder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_auto_reminder'] = $enable_auto_reminder;

        return $this;
    }

    /**
     * Gets reminder_days
     *
     * @return int|null
     */
    public function getReminderDays()
    {
        return $this->container['reminder_days'];
    }

    /**
     * Sets reminder_days
     *
     * @param int|null $reminder_days reminder_days
     *
     * @return self
     */
    public function setReminderDays($reminder_days)
    {
        if (is_null($reminder_days)) {
            array_push($this->openAPINullablesSetToNull, 'reminder_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reminder_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($reminder_days) && ($reminder_days > 180)) {
            throw new \InvalidArgumentException('invalid value for $reminder_days when calling DocumentExpirySettings., must be smaller than or equal to 180.');
        }
        if (!is_null($reminder_days) && ($reminder_days < 1)) {
            throw new \InvalidArgumentException('invalid value for $reminder_days when calling DocumentExpirySettings., must be bigger than or equal to 1.');
        }

        $this->container['reminder_days'] = $reminder_days;

        return $this;
    }

    /**
     * Gets reminder_count
     *
     * @return int|null
     */
    public function getReminderCount()
    {
        return $this->container['reminder_count'];
    }

    /**
     * Sets reminder_count
     *
     * @param int|null $reminder_count reminder_count
     *
     * @return self
     */
    public function setReminderCount($reminder_count)
    {
        if (is_null($reminder_count)) {
            array_push($this->openAPINullablesSetToNull, 'reminder_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reminder_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reminder_count'] = $reminder_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


