<?php
/**
 * DocumentProperties
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * DocumentProperties Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'document_id' => 'string',
        'brand_id' => 'string',
        'message_title' => 'string',
        'document_description' => 'string',
        'status' => 'string',
        'files' => '\BoldSign\Model\DocumentFiles[]',
        'sender_detail' => '\BoldSign\Model\DocumentSenderDetail',
        'signer_details' => '\BoldSign\Model\DocumentSignerDetails[]',
        'form_groups' => '\BoldSign\Model\FormGroup[]',
        'common_fields' => '\BoldSign\Model\DocumentFormFields[]',
        'behalf_of' => '\BoldSign\Model\BehalfOf',
        'cc_details' => '\BoldSign\Model\DocumentCcDetails[]',
        'reminder_settings' => '\BoldSign\Model\ReminderSettings',
        'reassign' => '\BoldSign\Model\DocumentReassign[]',
        'document_history' => '\BoldSign\Model\AuditTrail[]',
        'activity_by' => 'string',
        'activity_date' => 'int',
        'activity_action' => 'string',
        'created_date' => 'int',
        'expiry_days' => 'int',
        'expiry_date' => 'int',
        'enable_signing_order' => 'bool',
        'is_deleted' => 'bool',
        'revoke_message' => 'string',
        'decline_message' => 'string',
        'application_id' => 'string',
        'labels' => 'string[]',
        'disable_emails' => 'bool',
        'enable_print_and_sign' => 'bool',
        'enable_reassign' => 'bool',
        'disable_expiry_alert' => 'bool',
        'hide_document_id' => 'bool',
        'expiry_date_type' => 'string',
        'expiry_value' => 'int',
        'document_download_option' => 'string',
        'meta_data' => 'array<string,string>',
        'recipient_notification_settings' => '\BoldSign\Model\RecipientNotificationSettings',
        'enable_audit_trail_localization' => 'bool',
        'download_file_name' => 'string',
        'scheduled_send_time' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'document_id' => null,
        'brand_id' => null,
        'message_title' => null,
        'document_description' => null,
        'status' => null,
        'files' => null,
        'sender_detail' => null,
        'signer_details' => null,
        'form_groups' => null,
        'common_fields' => null,
        'behalf_of' => null,
        'cc_details' => null,
        'reminder_settings' => null,
        'reassign' => null,
        'document_history' => null,
        'activity_by' => null,
        'activity_date' => 'int64',
        'activity_action' => null,
        'created_date' => 'int64',
        'expiry_days' => 'int32',
        'expiry_date' => 'int64',
        'enable_signing_order' => null,
        'is_deleted' => null,
        'revoke_message' => null,
        'decline_message' => null,
        'application_id' => null,
        'labels' => null,
        'disable_emails' => null,
        'enable_print_and_sign' => null,
        'enable_reassign' => null,
        'disable_expiry_alert' => null,
        'hide_document_id' => null,
        'expiry_date_type' => null,
        'expiry_value' => 'int64',
        'document_download_option' => null,
        'meta_data' => null,
        'recipient_notification_settings' => null,
        'enable_audit_trail_localization' => null,
        'download_file_name' => null,
        'scheduled_send_time' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'document_id' => true,
        'brand_id' => true,
        'message_title' => true,
        'document_description' => true,
        'status' => false,
        'files' => true,
        'sender_detail' => false,
        'signer_details' => true,
        'form_groups' => true,
        'common_fields' => true,
        'behalf_of' => false,
        'cc_details' => true,
        'reminder_settings' => false,
        'reassign' => true,
        'document_history' => true,
        'activity_by' => true,
        'activity_date' => false,
        'activity_action' => false,
        'created_date' => false,
        'expiry_days' => false,
        'expiry_date' => true,
        'enable_signing_order' => false,
        'is_deleted' => false,
        'revoke_message' => true,
        'decline_message' => true,
        'application_id' => true,
        'labels' => true,
        'disable_emails' => false,
        'enable_print_and_sign' => false,
        'enable_reassign' => false,
        'disable_expiry_alert' => false,
        'hide_document_id' => false,
        'expiry_date_type' => false,
        'expiry_value' => false,
        'document_download_option' => false,
        'meta_data' => true,
        'recipient_notification_settings' => false,
        'enable_audit_trail_localization' => false,
        'download_file_name' => true,
        'scheduled_send_time' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_id' => 'documentId',
        'brand_id' => 'brandId',
        'message_title' => 'messageTitle',
        'document_description' => 'documentDescription',
        'status' => 'status',
        'files' => 'files',
        'sender_detail' => 'senderDetail',
        'signer_details' => 'signerDetails',
        'form_groups' => 'formGroups',
        'common_fields' => 'commonFields',
        'behalf_of' => 'behalfOf',
        'cc_details' => 'ccDetails',
        'reminder_settings' => 'reminderSettings',
        'reassign' => 'reassign',
        'document_history' => 'documentHistory',
        'activity_by' => 'activityBy',
        'activity_date' => 'activityDate',
        'activity_action' => 'activityAction',
        'created_date' => 'createdDate',
        'expiry_days' => 'expiryDays',
        'expiry_date' => 'expiryDate',
        'enable_signing_order' => 'enableSigningOrder',
        'is_deleted' => 'isDeleted',
        'revoke_message' => 'revokeMessage',
        'decline_message' => 'declineMessage',
        'application_id' => 'applicationId',
        'labels' => 'labels',
        'disable_emails' => 'disableEmails',
        'enable_print_and_sign' => 'enablePrintAndSign',
        'enable_reassign' => 'enableReassign',
        'disable_expiry_alert' => 'disableExpiryAlert',
        'hide_document_id' => 'hideDocumentId',
        'expiry_date_type' => 'expiryDateType',
        'expiry_value' => 'expiryValue',
        'document_download_option' => 'documentDownloadOption',
        'meta_data' => 'metaData',
        'recipient_notification_settings' => 'recipientNotificationSettings',
        'enable_audit_trail_localization' => 'enableAuditTrailLocalization',
        'download_file_name' => 'downloadFileName',
        'scheduled_send_time' => 'scheduledSendTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_id' => 'setDocumentId',
        'brand_id' => 'setBrandId',
        'message_title' => 'setMessageTitle',
        'document_description' => 'setDocumentDescription',
        'status' => 'setStatus',
        'files' => 'setFiles',
        'sender_detail' => 'setSenderDetail',
        'signer_details' => 'setSignerDetails',
        'form_groups' => 'setFormGroups',
        'common_fields' => 'setCommonFields',
        'behalf_of' => 'setBehalfOf',
        'cc_details' => 'setCcDetails',
        'reminder_settings' => 'setReminderSettings',
        'reassign' => 'setReassign',
        'document_history' => 'setDocumentHistory',
        'activity_by' => 'setActivityBy',
        'activity_date' => 'setActivityDate',
        'activity_action' => 'setActivityAction',
        'created_date' => 'setCreatedDate',
        'expiry_days' => 'setExpiryDays',
        'expiry_date' => 'setExpiryDate',
        'enable_signing_order' => 'setEnableSigningOrder',
        'is_deleted' => 'setIsDeleted',
        'revoke_message' => 'setRevokeMessage',
        'decline_message' => 'setDeclineMessage',
        'application_id' => 'setApplicationId',
        'labels' => 'setLabels',
        'disable_emails' => 'setDisableEmails',
        'enable_print_and_sign' => 'setEnablePrintAndSign',
        'enable_reassign' => 'setEnableReassign',
        'disable_expiry_alert' => 'setDisableExpiryAlert',
        'hide_document_id' => 'setHideDocumentId',
        'expiry_date_type' => 'setExpiryDateType',
        'expiry_value' => 'setExpiryValue',
        'document_download_option' => 'setDocumentDownloadOption',
        'meta_data' => 'setMetaData',
        'recipient_notification_settings' => 'setRecipientNotificationSettings',
        'enable_audit_trail_localization' => 'setEnableAuditTrailLocalization',
        'download_file_name' => 'setDownloadFileName',
        'scheduled_send_time' => 'setScheduledSendTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_id' => 'getDocumentId',
        'brand_id' => 'getBrandId',
        'message_title' => 'getMessageTitle',
        'document_description' => 'getDocumentDescription',
        'status' => 'getStatus',
        'files' => 'getFiles',
        'sender_detail' => 'getSenderDetail',
        'signer_details' => 'getSignerDetails',
        'form_groups' => 'getFormGroups',
        'common_fields' => 'getCommonFields',
        'behalf_of' => 'getBehalfOf',
        'cc_details' => 'getCcDetails',
        'reminder_settings' => 'getReminderSettings',
        'reassign' => 'getReassign',
        'document_history' => 'getDocumentHistory',
        'activity_by' => 'getActivityBy',
        'activity_date' => 'getActivityDate',
        'activity_action' => 'getActivityAction',
        'created_date' => 'getCreatedDate',
        'expiry_days' => 'getExpiryDays',
        'expiry_date' => 'getExpiryDate',
        'enable_signing_order' => 'getEnableSigningOrder',
        'is_deleted' => 'getIsDeleted',
        'revoke_message' => 'getRevokeMessage',
        'decline_message' => 'getDeclineMessage',
        'application_id' => 'getApplicationId',
        'labels' => 'getLabels',
        'disable_emails' => 'getDisableEmails',
        'enable_print_and_sign' => 'getEnablePrintAndSign',
        'enable_reassign' => 'getEnableReassign',
        'disable_expiry_alert' => 'getDisableExpiryAlert',
        'hide_document_id' => 'getHideDocumentId',
        'expiry_date_type' => 'getExpiryDateType',
        'expiry_value' => 'getExpiryValue',
        'document_download_option' => 'getDocumentDownloadOption',
        'meta_data' => 'getMetaData',
        'recipient_notification_settings' => 'getRecipientNotificationSettings',
        'enable_audit_trail_localization' => 'getEnableAuditTrailLocalization',
        'download_file_name' => 'getDownloadFileName',
        'scheduled_send_time' => 'getScheduledSendTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_IN_PROGRESS = 'InProgress';
    public const STATUS_COMPLETED = 'Completed';
    public const STATUS_DECLINED = 'Declined';
    public const STATUS_EXPIRED = 'Expired';
    public const STATUS_REVOKED = 'Revoked';
    public const STATUS_DRAFT = 'Draft';
    public const STATUS_SCHEDULED = 'Scheduled';
    public const ACTIVITY_ACTION_VIEWED = 'Viewed';
    public const ACTIVITY_ACTION_SIGNED = 'Signed';
    public const ACTIVITY_ACTION_REASSIGNED = 'Reassigned';
    public const ACTIVITY_ACTION_DECLINED = 'Declined';
    public const ACTIVITY_ACTION_REVOKED = 'Revoked';
    public const ACTIVITY_ACTION_EXPIRED = 'Expired';
    public const ACTIVITY_ACTION_DOWNLOADED = 'Downloaded';
    public const ACTIVITY_ACTION_DOWNLOADED_FOR_PRINT_SIGN = 'DownloadedForPrintSign';
    public const ACTIVITY_ACTION_INITIATE_PRINT_AND_SIGN = 'InitiatePrintAndSign';
    public const ACTIVITY_ACTION_INITIATE_FORM_SIGN = 'InitiateFormSign';
    public const ACTIVITY_ACTION_CANCEL_PRINT_AND_SIGN = 'CancelPrintAndSign';
    public const ACTIVITY_ACTION_COMPLETE_PRINT_AND_SIGN = 'CompletePrintAndSign';
    public const ACTIVITY_ACTION_REVIEWED = 'Reviewed';
    public const ACTIVITY_ACTION_NONE = 'None';
    public const ACTIVITY_ACTION_EDITING_INITIATED = 'EditingInitiated';
    public const ACTIVITY_ACTION_EDITING_CANCELLED = 'EditingCancelled';
    public const ACTIVITY_ACTION_EDITING_COMPLETED = 'EditingCompleted';
    public const ACTIVITY_ACTION_DOCUMENT_SCHEDULED = 'DocumentScheduled';
    public const EXPIRY_DATE_TYPE_DAYS = 'Days';
    public const EXPIRY_DATE_TYPE_HOURS = 'Hours';
    public const EXPIRY_DATE_TYPE_SPECIFIC_DATE_TIME = 'SpecificDateTime';
    public const DOCUMENT_DOWNLOAD_OPTION_COMBINED = 'Combined';
    public const DOCUMENT_DOWNLOAD_OPTION_INDIVIDUALLY = 'Individually';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_IN_PROGRESS,
            self::STATUS_COMPLETED,
            self::STATUS_DECLINED,
            self::STATUS_EXPIRED,
            self::STATUS_REVOKED,
            self::STATUS_DRAFT,
            self::STATUS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivityActionAllowableValues()
    {
        return [
            self::ACTIVITY_ACTION_VIEWED,
            self::ACTIVITY_ACTION_SIGNED,
            self::ACTIVITY_ACTION_REASSIGNED,
            self::ACTIVITY_ACTION_DECLINED,
            self::ACTIVITY_ACTION_REVOKED,
            self::ACTIVITY_ACTION_EXPIRED,
            self::ACTIVITY_ACTION_DOWNLOADED,
            self::ACTIVITY_ACTION_DOWNLOADED_FOR_PRINT_SIGN,
            self::ACTIVITY_ACTION_INITIATE_PRINT_AND_SIGN,
            self::ACTIVITY_ACTION_INITIATE_FORM_SIGN,
            self::ACTIVITY_ACTION_CANCEL_PRINT_AND_SIGN,
            self::ACTIVITY_ACTION_COMPLETE_PRINT_AND_SIGN,
            self::ACTIVITY_ACTION_REVIEWED,
            self::ACTIVITY_ACTION_NONE,
            self::ACTIVITY_ACTION_EDITING_INITIATED,
            self::ACTIVITY_ACTION_EDITING_CANCELLED,
            self::ACTIVITY_ACTION_EDITING_COMPLETED,
            self::ACTIVITY_ACTION_DOCUMENT_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpiryDateTypeAllowableValues()
    {
        return [
            self::EXPIRY_DATE_TYPE_DAYS,
            self::EXPIRY_DATE_TYPE_HOURS,
            self::EXPIRY_DATE_TYPE_SPECIFIC_DATE_TIME,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentDownloadOptionAllowableValues()
    {
        return [
            self::DOCUMENT_DOWNLOAD_OPTION_COMBINED,
            self::DOCUMENT_DOWNLOAD_OPTION_INDIVIDUALLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('document_id', $data ?? [], null);
        $this->setIfExists('brand_id', $data ?? [], null);
        $this->setIfExists('message_title', $data ?? [], null);
        $this->setIfExists('document_description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('sender_detail', $data ?? [], null);
        $this->setIfExists('signer_details', $data ?? [], null);
        $this->setIfExists('form_groups', $data ?? [], null);
        $this->setIfExists('common_fields', $data ?? [], null);
        $this->setIfExists('behalf_of', $data ?? [], null);
        $this->setIfExists('cc_details', $data ?? [], null);
        $this->setIfExists('reminder_settings', $data ?? [], null);
        $this->setIfExists('reassign', $data ?? [], null);
        $this->setIfExists('document_history', $data ?? [], null);
        $this->setIfExists('activity_by', $data ?? [], null);
        $this->setIfExists('activity_date', $data ?? [], null);
        $this->setIfExists('activity_action', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('expiry_days', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('enable_signing_order', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('revoke_message', $data ?? [], null);
        $this->setIfExists('decline_message', $data ?? [], null);
        $this->setIfExists('application_id', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('disable_emails', $data ?? [], null);
        $this->setIfExists('enable_print_and_sign', $data ?? [], null);
        $this->setIfExists('enable_reassign', $data ?? [], null);
        $this->setIfExists('disable_expiry_alert', $data ?? [], null);
        $this->setIfExists('hide_document_id', $data ?? [], null);
        $this->setIfExists('expiry_date_type', $data ?? [], null);
        $this->setIfExists('expiry_value', $data ?? [], null);
        $this->setIfExists('document_download_option', $data ?? [], null);
        $this->setIfExists('meta_data', $data ?? [], null);
        $this->setIfExists('recipient_notification_settings', $data ?? [], null);
        $this->setIfExists('enable_audit_trail_localization', $data ?? [], null);
        $this->setIfExists('download_file_name', $data ?? [], null);
        $this->setIfExists('scheduled_send_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActivityActionAllowableValues();
        if (!is_null($this->container['activity_action']) && !in_array($this->container['activity_action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'activity_action', must be one of '%s'",
                $this->container['activity_action'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getExpiryDateTypeAllowableValues();
        if (!is_null($this->container['expiry_date_type']) && !in_array($this->container['expiry_date_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'expiry_date_type', must be one of '%s'",
                $this->container['expiry_date_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentDownloadOptionAllowableValues();
        if (!is_null($this->container['document_download_option']) && !in_array($this->container['document_download_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_download_option', must be one of '%s'",
                $this->container['document_download_option'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_id
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string|null $document_id document_id
     *
     * @return self
     */
    public function setDocumentId($document_id)
    {
        if (is_null($document_id)) {
            array_push($this->openAPINullablesSetToNull, 'document_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string|null $brand_id brand_id
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        if (is_null($brand_id)) {
            array_push($this->openAPINullablesSetToNull, 'brand_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets message_title
     *
     * @return string|null
     */
    public function getMessageTitle()
    {
        return $this->container['message_title'];
    }

    /**
     * Sets message_title
     *
     * @param string|null $message_title message_title
     *
     * @return self
     */
    public function setMessageTitle($message_title)
    {
        if (is_null($message_title)) {
            array_push($this->openAPINullablesSetToNull, 'message_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message_title'] = $message_title;

        return $this;
    }

    /**
     * Gets document_description
     *
     * @return string|null
     */
    public function getDocumentDescription()
    {
        return $this->container['document_description'];
    }

    /**
     * Sets document_description
     *
     * @param string|null $document_description document_description
     *
     * @return self
     */
    public function setDocumentDescription($document_description)
    {
        if (is_null($document_description)) {
            array_push($this->openAPINullablesSetToNull, 'document_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_description'] = $document_description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \BoldSign\Model\DocumentFiles[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \BoldSign\Model\DocumentFiles[]|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            array_push($this->openAPINullablesSetToNull, 'files');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('files', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets sender_detail
     *
     * @return \BoldSign\Model\DocumentSenderDetail|null
     */
    public function getSenderDetail()
    {
        return $this->container['sender_detail'];
    }

    /**
     * Sets sender_detail
     *
     * @param \BoldSign\Model\DocumentSenderDetail|null $sender_detail sender_detail
     *
     * @return self
     */
    public function setSenderDetail($sender_detail)
    {
        if (is_null($sender_detail)) {
            throw new \InvalidArgumentException('non-nullable sender_detail cannot be null');
        }
        $this->container['sender_detail'] = $sender_detail;

        return $this;
    }

    /**
     * Gets signer_details
     *
     * @return \BoldSign\Model\DocumentSignerDetails[]|null
     */
    public function getSignerDetails()
    {
        return $this->container['signer_details'];
    }

    /**
     * Sets signer_details
     *
     * @param \BoldSign\Model\DocumentSignerDetails[]|null $signer_details signer_details
     *
     * @return self
     */
    public function setSignerDetails($signer_details)
    {
        if (is_null($signer_details)) {
            array_push($this->openAPINullablesSetToNull, 'signer_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signer_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signer_details'] = $signer_details;

        return $this;
    }

    /**
     * Gets form_groups
     *
     * @return \BoldSign\Model\FormGroup[]|null
     */
    public function getFormGroups()
    {
        return $this->container['form_groups'];
    }

    /**
     * Sets form_groups
     *
     * @param \BoldSign\Model\FormGroup[]|null $form_groups form_groups
     *
     * @return self
     */
    public function setFormGroups($form_groups)
    {
        if (is_null($form_groups)) {
            array_push($this->openAPINullablesSetToNull, 'form_groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_groups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_groups'] = $form_groups;

        return $this;
    }

    /**
     * Gets common_fields
     *
     * @return \BoldSign\Model\DocumentFormFields[]|null
     */
    public function getCommonFields()
    {
        return $this->container['common_fields'];
    }

    /**
     * Sets common_fields
     *
     * @param \BoldSign\Model\DocumentFormFields[]|null $common_fields common_fields
     *
     * @return self
     */
    public function setCommonFields($common_fields)
    {
        if (is_null($common_fields)) {
            array_push($this->openAPINullablesSetToNull, 'common_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('common_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['common_fields'] = $common_fields;

        return $this;
    }

    /**
     * Gets behalf_of
     *
     * @return \BoldSign\Model\BehalfOf|null
     */
    public function getBehalfOf()
    {
        return $this->container['behalf_of'];
    }

    /**
     * Sets behalf_of
     *
     * @param \BoldSign\Model\BehalfOf|null $behalf_of behalf_of
     *
     * @return self
     */
    public function setBehalfOf($behalf_of)
    {
        if (is_null($behalf_of)) {
            throw new \InvalidArgumentException('non-nullable behalf_of cannot be null');
        }
        $this->container['behalf_of'] = $behalf_of;

        return $this;
    }

    /**
     * Gets cc_details
     *
     * @return \BoldSign\Model\DocumentCcDetails[]|null
     */
    public function getCcDetails()
    {
        return $this->container['cc_details'];
    }

    /**
     * Sets cc_details
     *
     * @param \BoldSign\Model\DocumentCcDetails[]|null $cc_details cc_details
     *
     * @return self
     */
    public function setCcDetails($cc_details)
    {
        if (is_null($cc_details)) {
            array_push($this->openAPINullablesSetToNull, 'cc_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cc_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cc_details'] = $cc_details;

        return $this;
    }

    /**
     * Gets reminder_settings
     *
     * @return \BoldSign\Model\ReminderSettings|null
     */
    public function getReminderSettings()
    {
        return $this->container['reminder_settings'];
    }

    /**
     * Sets reminder_settings
     *
     * @param \BoldSign\Model\ReminderSettings|null $reminder_settings reminder_settings
     *
     * @return self
     */
    public function setReminderSettings($reminder_settings)
    {
        if (is_null($reminder_settings)) {
            throw new \InvalidArgumentException('non-nullable reminder_settings cannot be null');
        }
        $this->container['reminder_settings'] = $reminder_settings;

        return $this;
    }

    /**
     * Gets reassign
     *
     * @return \BoldSign\Model\DocumentReassign[]|null
     */
    public function getReassign()
    {
        return $this->container['reassign'];
    }

    /**
     * Sets reassign
     *
     * @param \BoldSign\Model\DocumentReassign[]|null $reassign reassign
     *
     * @return self
     */
    public function setReassign($reassign)
    {
        if (is_null($reassign)) {
            array_push($this->openAPINullablesSetToNull, 'reassign');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reassign', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reassign'] = $reassign;

        return $this;
    }

    /**
     * Gets document_history
     *
     * @return \BoldSign\Model\AuditTrail[]|null
     */
    public function getDocumentHistory()
    {
        return $this->container['document_history'];
    }

    /**
     * Sets document_history
     *
     * @param \BoldSign\Model\AuditTrail[]|null $document_history document_history
     *
     * @return self
     */
    public function setDocumentHistory($document_history)
    {
        if (is_null($document_history)) {
            array_push($this->openAPINullablesSetToNull, 'document_history');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_history', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_history'] = $document_history;

        return $this;
    }

    /**
     * Gets activity_by
     *
     * @return string|null
     */
    public function getActivityBy()
    {
        return $this->container['activity_by'];
    }

    /**
     * Sets activity_by
     *
     * @param string|null $activity_by activity_by
     *
     * @return self
     */
    public function setActivityBy($activity_by)
    {
        if (is_null($activity_by)) {
            array_push($this->openAPINullablesSetToNull, 'activity_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_by'] = $activity_by;

        return $this;
    }

    /**
     * Gets activity_date
     *
     * @return int|null
     */
    public function getActivityDate()
    {
        return $this->container['activity_date'];
    }

    /**
     * Sets activity_date
     *
     * @param int|null $activity_date activity_date
     *
     * @return self
     */
    public function setActivityDate($activity_date)
    {
        if (is_null($activity_date)) {
            throw new \InvalidArgumentException('non-nullable activity_date cannot be null');
        }
        $this->container['activity_date'] = $activity_date;

        return $this;
    }

    /**
     * Gets activity_action
     *
     * @return string|null
     */
    public function getActivityAction()
    {
        return $this->container['activity_action'];
    }

    /**
     * Sets activity_action
     *
     * @param string|null $activity_action activity_action
     *
     * @return self
     */
    public function setActivityAction($activity_action)
    {
        if (is_null($activity_action)) {
            throw new \InvalidArgumentException('non-nullable activity_action cannot be null');
        }
        $allowedValues = $this->getActivityActionAllowableValues();
        if (!in_array($activity_action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'activity_action', must be one of '%s'",
                    $activity_action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activity_action'] = $activity_action;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets expiry_days
     *
     * @return int|null
     */
    public function getExpiryDays()
    {
        return $this->container['expiry_days'];
    }

    /**
     * Sets expiry_days
     *
     * @param int|null $expiry_days expiry_days
     *
     * @return self
     */
    public function setExpiryDays($expiry_days)
    {
        if (is_null($expiry_days)) {
            throw new \InvalidArgumentException('non-nullable expiry_days cannot be null');
        }
        $this->container['expiry_days'] = $expiry_days;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return int|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param int|null $expiry_date expiry_date
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {
        if (is_null($expiry_date)) {
            array_push($this->openAPINullablesSetToNull, 'expiry_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiry_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets enable_signing_order
     *
     * @return bool|null
     */
    public function getEnableSigningOrder()
    {
        return $this->container['enable_signing_order'];
    }

    /**
     * Sets enable_signing_order
     *
     * @param bool|null $enable_signing_order enable_signing_order
     *
     * @return self
     */
    public function setEnableSigningOrder($enable_signing_order)
    {
        if (is_null($enable_signing_order)) {
            throw new \InvalidArgumentException('non-nullable enable_signing_order cannot be null');
        }
        $this->container['enable_signing_order'] = $enable_signing_order;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets revoke_message
     *
     * @return string|null
     */
    public function getRevokeMessage()
    {
        return $this->container['revoke_message'];
    }

    /**
     * Sets revoke_message
     *
     * @param string|null $revoke_message revoke_message
     *
     * @return self
     */
    public function setRevokeMessage($revoke_message)
    {
        if (is_null($revoke_message)) {
            array_push($this->openAPINullablesSetToNull, 'revoke_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('revoke_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['revoke_message'] = $revoke_message;

        return $this;
    }

    /**
     * Gets decline_message
     *
     * @return string|null
     */
    public function getDeclineMessage()
    {
        return $this->container['decline_message'];
    }

    /**
     * Sets decline_message
     *
     * @param string|null $decline_message decline_message
     *
     * @return self
     */
    public function setDeclineMessage($decline_message)
    {
        if (is_null($decline_message)) {
            array_push($this->openAPINullablesSetToNull, 'decline_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('decline_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['decline_message'] = $decline_message;

        return $this;
    }

    /**
     * Gets application_id
     *
     * @return string|null
     */
    public function getApplicationId()
    {
        return $this->container['application_id'];
    }

    /**
     * Sets application_id
     *
     * @param string|null $application_id application_id
     *
     * @return self
     */
    public function setApplicationId($application_id)
    {
        if (is_null($application_id)) {
            array_push($this->openAPINullablesSetToNull, 'application_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('application_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['application_id'] = $application_id;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            array_push($this->openAPINullablesSetToNull, 'labels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('labels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets disable_emails
     *
     * @return bool|null
     */
    public function getDisableEmails()
    {
        return $this->container['disable_emails'];
    }

    /**
     * Sets disable_emails
     *
     * @param bool|null $disable_emails disable_emails
     *
     * @return self
     */
    public function setDisableEmails($disable_emails)
    {
        if (is_null($disable_emails)) {
            throw new \InvalidArgumentException('non-nullable disable_emails cannot be null');
        }
        $this->container['disable_emails'] = $disable_emails;

        return $this;
    }

    /**
     * Gets enable_print_and_sign
     *
     * @return bool|null
     */
    public function getEnablePrintAndSign()
    {
        return $this->container['enable_print_and_sign'];
    }

    /**
     * Sets enable_print_and_sign
     *
     * @param bool|null $enable_print_and_sign enable_print_and_sign
     *
     * @return self
     */
    public function setEnablePrintAndSign($enable_print_and_sign)
    {
        if (is_null($enable_print_and_sign)) {
            throw new \InvalidArgumentException('non-nullable enable_print_and_sign cannot be null');
        }
        $this->container['enable_print_and_sign'] = $enable_print_and_sign;

        return $this;
    }

    /**
     * Gets enable_reassign
     *
     * @return bool|null
     */
    public function getEnableReassign()
    {
        return $this->container['enable_reassign'];
    }

    /**
     * Sets enable_reassign
     *
     * @param bool|null $enable_reassign enable_reassign
     *
     * @return self
     */
    public function setEnableReassign($enable_reassign)
    {
        if (is_null($enable_reassign)) {
            throw new \InvalidArgumentException('non-nullable enable_reassign cannot be null');
        }
        $this->container['enable_reassign'] = $enable_reassign;

        return $this;
    }

    /**
     * Gets disable_expiry_alert
     *
     * @return bool|null
     */
    public function getDisableExpiryAlert()
    {
        return $this->container['disable_expiry_alert'];
    }

    /**
     * Sets disable_expiry_alert
     *
     * @param bool|null $disable_expiry_alert disable_expiry_alert
     *
     * @return self
     */
    public function setDisableExpiryAlert($disable_expiry_alert)
    {
        if (is_null($disable_expiry_alert)) {
            throw new \InvalidArgumentException('non-nullable disable_expiry_alert cannot be null');
        }
        $this->container['disable_expiry_alert'] = $disable_expiry_alert;

        return $this;
    }

    /**
     * Gets hide_document_id
     *
     * @return bool|null
     */
    public function getHideDocumentId()
    {
        return $this->container['hide_document_id'];
    }

    /**
     * Sets hide_document_id
     *
     * @param bool|null $hide_document_id hide_document_id
     *
     * @return self
     */
    public function setHideDocumentId($hide_document_id)
    {
        if (is_null($hide_document_id)) {
            throw new \InvalidArgumentException('non-nullable hide_document_id cannot be null');
        }
        $this->container['hide_document_id'] = $hide_document_id;

        return $this;
    }

    /**
     * Gets expiry_date_type
     *
     * @return string|null
     */
    public function getExpiryDateType()
    {
        return $this->container['expiry_date_type'];
    }

    /**
     * Sets expiry_date_type
     *
     * @param string|null $expiry_date_type expiry_date_type
     *
     * @return self
     */
    public function setExpiryDateType($expiry_date_type)
    {
        if (is_null($expiry_date_type)) {
            throw new \InvalidArgumentException('non-nullable expiry_date_type cannot be null');
        }
        $allowedValues = $this->getExpiryDateTypeAllowableValues();
        if (!in_array($expiry_date_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'expiry_date_type', must be one of '%s'",
                    $expiry_date_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expiry_date_type'] = $expiry_date_type;

        return $this;
    }

    /**
     * Gets expiry_value
     *
     * @return int|null
     */
    public function getExpiryValue()
    {
        return $this->container['expiry_value'];
    }

    /**
     * Sets expiry_value
     *
     * @param int|null $expiry_value expiry_value
     *
     * @return self
     */
    public function setExpiryValue($expiry_value)
    {
        if (is_null($expiry_value)) {
            throw new \InvalidArgumentException('non-nullable expiry_value cannot be null');
        }
        $this->container['expiry_value'] = $expiry_value;

        return $this;
    }

    /**
     * Gets document_download_option
     *
     * @return string|null
     */
    public function getDocumentDownloadOption()
    {
        return $this->container['document_download_option'];
    }

    /**
     * Sets document_download_option
     *
     * @param string|null $document_download_option document_download_option
     *
     * @return self
     */
    public function setDocumentDownloadOption($document_download_option)
    {
        if (is_null($document_download_option)) {
            throw new \InvalidArgumentException('non-nullable document_download_option cannot be null');
        }
        $allowedValues = $this->getDocumentDownloadOptionAllowableValues();
        if (!in_array($document_download_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_download_option', must be one of '%s'",
                    $document_download_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_download_option'] = $document_download_option;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return array<string,string>|null
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param array<string,string>|null $meta_data meta_data
     *
     * @return self
     */
    public function setMetaData($meta_data)
    {
        if (is_null($meta_data)) {
            array_push($this->openAPINullablesSetToNull, 'meta_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets recipient_notification_settings
     *
     * @return \BoldSign\Model\RecipientNotificationSettings|null
     */
    public function getRecipientNotificationSettings()
    {
        return $this->container['recipient_notification_settings'];
    }

    /**
     * Sets recipient_notification_settings
     *
     * @param \BoldSign\Model\RecipientNotificationSettings|null $recipient_notification_settings recipient_notification_settings
     *
     * @return self
     */
    public function setRecipientNotificationSettings($recipient_notification_settings)
    {
        if (is_null($recipient_notification_settings)) {
            throw new \InvalidArgumentException('non-nullable recipient_notification_settings cannot be null');
        }
        $this->container['recipient_notification_settings'] = $recipient_notification_settings;

        return $this;
    }

    /**
     * Gets enable_audit_trail_localization
     *
     * @return bool|null
     */
    public function getEnableAuditTrailLocalization()
    {
        return $this->container['enable_audit_trail_localization'];
    }

    /**
     * Sets enable_audit_trail_localization
     *
     * @param bool|null $enable_audit_trail_localization enable_audit_trail_localization
     *
     * @return self
     */
    public function setEnableAuditTrailLocalization($enable_audit_trail_localization)
    {
        if (is_null($enable_audit_trail_localization)) {
            throw new \InvalidArgumentException('non-nullable enable_audit_trail_localization cannot be null');
        }
        $this->container['enable_audit_trail_localization'] = $enable_audit_trail_localization;

        return $this;
    }

    /**
     * Gets download_file_name
     *
     * @return string|null
     */
    public function getDownloadFileName()
    {
        return $this->container['download_file_name'];
    }

    /**
     * Sets download_file_name
     *
     * @param string|null $download_file_name download_file_name
     *
     * @return self
     */
    public function setDownloadFileName($download_file_name)
    {
        if (is_null($download_file_name)) {
            array_push($this->openAPINullablesSetToNull, 'download_file_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('download_file_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['download_file_name'] = $download_file_name;

        return $this;
    }

    /**
     * Gets scheduled_send_time
     *
     * @return int|null
     */
    public function getScheduledSendTime()
    {
        return $this->container['scheduled_send_time'];
    }

    /**
     * Sets scheduled_send_time
     *
     * @param int|null $scheduled_send_time scheduled_send_time
     *
     * @return self
     */
    public function setScheduledSendTime($scheduled_send_time)
    {
        if (is_null($scheduled_send_time)) {
            array_push($this->openAPINullablesSetToNull, 'scheduled_send_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduled_send_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduled_send_time'] = $scheduled_send_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


