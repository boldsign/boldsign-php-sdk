<?php
/**
 * DocumentSignerWebhookModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * DocumentSignerWebhookModel Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentSignerWebhookModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentSignerWebhookModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'signer_name' => 'string',
        'signer_role' => 'string',
        'signer_email' => 'string',
        'phone_number' => '\BoldSign\Model\PhoneNumberWebhookModel',
        'status' => 'string',
        'enable_access_code' => 'bool',
        'is_authentication_failed' => 'bool',
        'enable_email_otp' => 'bool',
        'is_delivery_failed' => 'bool',
        'is_viewed' => 'bool',
        'order' => 'int',
        'signer_type' => 'string',
        'is_reassigned' => 'bool',
        'reassign_message' => 'string',
        'decline_message' => 'string',
        'last_activity_date' => '\DateTime',
        'authentication_type' => 'string',
        'id_verification' => '\BoldSign\Model\IdVerification',
        'allow_field_configuration' => 'bool',
        'last_reminder_sent_on' => '\DateTime',
        'authentication_retry_count' => 'int',
        'authentication_settings' => '\BoldSign\Model\SignerAuthenticationSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'signer_name' => null,
        'signer_role' => null,
        'signer_email' => null,
        'phone_number' => null,
        'status' => null,
        'enable_access_code' => null,
        'is_authentication_failed' => null,
        'enable_email_otp' => null,
        'is_delivery_failed' => null,
        'is_viewed' => null,
        'order' => 'int32',
        'signer_type' => null,
        'is_reassigned' => null,
        'reassign_message' => null,
        'decline_message' => null,
        'last_activity_date' => 'date-time',
        'authentication_type' => null,
        'id_verification' => null,
        'allow_field_configuration' => null,
        'last_reminder_sent_on' => 'date-time',
        'authentication_retry_count' => 'int32',
        'authentication_settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'signer_name' => true,
        'signer_role' => true,
        'signer_email' => true,
        'phone_number' => false,
        'status' => false,
        'enable_access_code' => false,
        'is_authentication_failed' => true,
        'enable_email_otp' => false,
        'is_delivery_failed' => false,
        'is_viewed' => false,
        'order' => false,
        'signer_type' => true,
        'is_reassigned' => false,
        'reassign_message' => true,
        'decline_message' => true,
        'last_activity_date' => true,
        'authentication_type' => true,
        'id_verification' => false,
        'allow_field_configuration' => false,
        'last_reminder_sent_on' => true,
        'authentication_retry_count' => true,
        'authentication_settings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signer_name' => 'signerName',
        'signer_role' => 'signerRole',
        'signer_email' => 'signerEmail',
        'phone_number' => 'phoneNumber',
        'status' => 'status',
        'enable_access_code' => 'enableAccessCode',
        'is_authentication_failed' => 'isAuthenticationFailed',
        'enable_email_otp' => 'enableEmailOTP',
        'is_delivery_failed' => 'isDeliveryFailed',
        'is_viewed' => 'isViewed',
        'order' => 'order',
        'signer_type' => 'signerType',
        'is_reassigned' => 'isReassigned',
        'reassign_message' => 'reassignMessage',
        'decline_message' => 'declineMessage',
        'last_activity_date' => 'lastActivityDate',
        'authentication_type' => 'authenticationType',
        'id_verification' => 'idVerification',
        'allow_field_configuration' => 'allowFieldConfiguration',
        'last_reminder_sent_on' => 'lastReminderSentOn',
        'authentication_retry_count' => 'authenticationRetryCount',
        'authentication_settings' => 'authenticationSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signer_name' => 'setSignerName',
        'signer_role' => 'setSignerRole',
        'signer_email' => 'setSignerEmail',
        'phone_number' => 'setPhoneNumber',
        'status' => 'setStatus',
        'enable_access_code' => 'setEnableAccessCode',
        'is_authentication_failed' => 'setIsAuthenticationFailed',
        'enable_email_otp' => 'setEnableEmailOtp',
        'is_delivery_failed' => 'setIsDeliveryFailed',
        'is_viewed' => 'setIsViewed',
        'order' => 'setOrder',
        'signer_type' => 'setSignerType',
        'is_reassigned' => 'setIsReassigned',
        'reassign_message' => 'setReassignMessage',
        'decline_message' => 'setDeclineMessage',
        'last_activity_date' => 'setLastActivityDate',
        'authentication_type' => 'setAuthenticationType',
        'id_verification' => 'setIdVerification',
        'allow_field_configuration' => 'setAllowFieldConfiguration',
        'last_reminder_sent_on' => 'setLastReminderSentOn',
        'authentication_retry_count' => 'setAuthenticationRetryCount',
        'authentication_settings' => 'setAuthenticationSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signer_name' => 'getSignerName',
        'signer_role' => 'getSignerRole',
        'signer_email' => 'getSignerEmail',
        'phone_number' => 'getPhoneNumber',
        'status' => 'getStatus',
        'enable_access_code' => 'getEnableAccessCode',
        'is_authentication_failed' => 'getIsAuthenticationFailed',
        'enable_email_otp' => 'getEnableEmailOtp',
        'is_delivery_failed' => 'getIsDeliveryFailed',
        'is_viewed' => 'getIsViewed',
        'order' => 'getOrder',
        'signer_type' => 'getSignerType',
        'is_reassigned' => 'getIsReassigned',
        'reassign_message' => 'getReassignMessage',
        'decline_message' => 'getDeclineMessage',
        'last_activity_date' => 'getLastActivityDate',
        'authentication_type' => 'getAuthenticationType',
        'id_verification' => 'getIdVerification',
        'allow_field_configuration' => 'getAllowFieldConfiguration',
        'last_reminder_sent_on' => 'getLastReminderSentOn',
        'authentication_retry_count' => 'getAuthenticationRetryCount',
        'authentication_settings' => 'getAuthenticationSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_NONE = 'None';
    public const STATUS_NOT_COMPLETED = 'NotCompleted';
    public const STATUS_COMPLETED = 'Completed';
    public const STATUS_DECLINED = 'Declined';
    public const STATUS_REVOKED = 'Revoked';
    public const STATUS_EXPIRED = 'Expired';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_NONE,
            self::STATUS_NOT_COMPLETED,
            self::STATUS_COMPLETED,
            self::STATUS_DECLINED,
            self::STATUS_REVOKED,
            self::STATUS_EXPIRED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('signer_name', $data ?? [], null);
        $this->setIfExists('signer_role', $data ?? [], null);
        $this->setIfExists('signer_email', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('enable_access_code', $data ?? [], null);
        $this->setIfExists('is_authentication_failed', $data ?? [], null);
        $this->setIfExists('enable_email_otp', $data ?? [], null);
        $this->setIfExists('is_delivery_failed', $data ?? [], null);
        $this->setIfExists('is_viewed', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('signer_type', $data ?? [], null);
        $this->setIfExists('is_reassigned', $data ?? [], null);
        $this->setIfExists('reassign_message', $data ?? [], null);
        $this->setIfExists('decline_message', $data ?? [], null);
        $this->setIfExists('last_activity_date', $data ?? [], null);
        $this->setIfExists('authentication_type', $data ?? [], null);
        $this->setIfExists('id_verification', $data ?? [], null);
        $this->setIfExists('allow_field_configuration', $data ?? [], null);
        $this->setIfExists('last_reminder_sent_on', $data ?? [], null);
        $this->setIfExists('authentication_retry_count', $data ?? [], null);
        $this->setIfExists('authentication_settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets signer_name
     *
     * @return string|null
     */
    public function getSignerName()
    {
        return $this->container['signer_name'];
    }

    /**
     * Sets signer_name
     *
     * @param string|null $signer_name signer_name
     *
     * @return self
     */
    public function setSignerName($signer_name)
    {
        if (is_null($signer_name)) {
            array_push($this->openAPINullablesSetToNull, 'signer_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signer_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signer_name'] = $signer_name;

        return $this;
    }

    /**
     * Gets signer_role
     *
     * @return string|null
     */
    public function getSignerRole()
    {
        return $this->container['signer_role'];
    }

    /**
     * Sets signer_role
     *
     * @param string|null $signer_role signer_role
     *
     * @return self
     */
    public function setSignerRole($signer_role)
    {
        if (is_null($signer_role)) {
            array_push($this->openAPINullablesSetToNull, 'signer_role');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signer_role', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signer_role'] = $signer_role;

        return $this;
    }

    /**
     * Gets signer_email
     *
     * @return string|null
     */
    public function getSignerEmail()
    {
        return $this->container['signer_email'];
    }

    /**
     * Sets signer_email
     *
     * @param string|null $signer_email signer_email
     *
     * @return self
     */
    public function setSignerEmail($signer_email)
    {
        if (is_null($signer_email)) {
            array_push($this->openAPINullablesSetToNull, 'signer_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signer_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signer_email'] = $signer_email;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return \BoldSign\Model\PhoneNumberWebhookModel|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param \BoldSign\Model\PhoneNumberWebhookModel|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets enable_access_code
     *
     * @return bool|null
     */
    public function getEnableAccessCode()
    {
        return $this->container['enable_access_code'];
    }

    /**
     * Sets enable_access_code
     *
     * @param bool|null $enable_access_code enable_access_code
     *
     * @return self
     */
    public function setEnableAccessCode($enable_access_code)
    {
        if (is_null($enable_access_code)) {
            throw new \InvalidArgumentException('non-nullable enable_access_code cannot be null');
        }
        $this->container['enable_access_code'] = $enable_access_code;

        return $this;
    }

    /**
     * Gets is_authentication_failed
     *
     * @return bool|null
     */
    public function getIsAuthenticationFailed()
    {
        return $this->container['is_authentication_failed'];
    }

    /**
     * Sets is_authentication_failed
     *
     * @param bool|null $is_authentication_failed is_authentication_failed
     *
     * @return self
     */
    public function setIsAuthenticationFailed($is_authentication_failed)
    {
        if (is_null($is_authentication_failed)) {
            array_push($this->openAPINullablesSetToNull, 'is_authentication_failed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_authentication_failed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_authentication_failed'] = $is_authentication_failed;

        return $this;
    }

    /**
     * Gets enable_email_otp
     *
     * @return bool|null
     */
    public function getEnableEmailOtp()
    {
        return $this->container['enable_email_otp'];
    }

    /**
     * Sets enable_email_otp
     *
     * @param bool|null $enable_email_otp enable_email_otp
     *
     * @return self
     */
    public function setEnableEmailOtp($enable_email_otp)
    {
        if (is_null($enable_email_otp)) {
            throw new \InvalidArgumentException('non-nullable enable_email_otp cannot be null');
        }
        $this->container['enable_email_otp'] = $enable_email_otp;

        return $this;
    }

    /**
     * Gets is_delivery_failed
     *
     * @return bool|null
     */
    public function getIsDeliveryFailed()
    {
        return $this->container['is_delivery_failed'];
    }

    /**
     * Sets is_delivery_failed
     *
     * @param bool|null $is_delivery_failed is_delivery_failed
     *
     * @return self
     */
    public function setIsDeliveryFailed($is_delivery_failed)
    {
        if (is_null($is_delivery_failed)) {
            throw new \InvalidArgumentException('non-nullable is_delivery_failed cannot be null');
        }
        $this->container['is_delivery_failed'] = $is_delivery_failed;

        return $this;
    }

    /**
     * Gets is_viewed
     *
     * @return bool|null
     */
    public function getIsViewed()
    {
        return $this->container['is_viewed'];
    }

    /**
     * Sets is_viewed
     *
     * @param bool|null $is_viewed is_viewed
     *
     * @return self
     */
    public function setIsViewed($is_viewed)
    {
        if (is_null($is_viewed)) {
            throw new \InvalidArgumentException('non-nullable is_viewed cannot be null');
        }
        $this->container['is_viewed'] = $is_viewed;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets signer_type
     *
     * @return string|null
     */
    public function getSignerType()
    {
        return $this->container['signer_type'];
    }

    /**
     * Sets signer_type
     *
     * @param string|null $signer_type signer_type
     *
     * @return self
     */
    public function setSignerType($signer_type)
    {
        if (is_null($signer_type)) {
            array_push($this->openAPINullablesSetToNull, 'signer_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signer_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signer_type'] = $signer_type;

        return $this;
    }

    /**
     * Gets is_reassigned
     *
     * @return bool|null
     */
    public function getIsReassigned()
    {
        return $this->container['is_reassigned'];
    }

    /**
     * Sets is_reassigned
     *
     * @param bool|null $is_reassigned is_reassigned
     *
     * @return self
     */
    public function setIsReassigned($is_reassigned)
    {
        if (is_null($is_reassigned)) {
            throw new \InvalidArgumentException('non-nullable is_reassigned cannot be null');
        }
        $this->container['is_reassigned'] = $is_reassigned;

        return $this;
    }

    /**
     * Gets reassign_message
     *
     * @return string|null
     */
    public function getReassignMessage()
    {
        return $this->container['reassign_message'];
    }

    /**
     * Sets reassign_message
     *
     * @param string|null $reassign_message reassign_message
     *
     * @return self
     */
    public function setReassignMessage($reassign_message)
    {
        if (is_null($reassign_message)) {
            array_push($this->openAPINullablesSetToNull, 'reassign_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reassign_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reassign_message'] = $reassign_message;

        return $this;
    }

    /**
     * Gets decline_message
     *
     * @return string|null
     */
    public function getDeclineMessage()
    {
        return $this->container['decline_message'];
    }

    /**
     * Sets decline_message
     *
     * @param string|null $decline_message decline_message
     *
     * @return self
     */
    public function setDeclineMessage($decline_message)
    {
        if (is_null($decline_message)) {
            array_push($this->openAPINullablesSetToNull, 'decline_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('decline_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['decline_message'] = $decline_message;

        return $this;
    }

    /**
     * Gets last_activity_date
     *
     * @return \DateTime|null
     */
    public function getLastActivityDate()
    {
        return $this->container['last_activity_date'];
    }

    /**
     * Sets last_activity_date
     *
     * @param \DateTime|null $last_activity_date last_activity_date
     *
     * @return self
     */
    public function setLastActivityDate($last_activity_date)
    {
        if (is_null($last_activity_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_activity_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_activity_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_activity_date'] = $last_activity_date;

        return $this;
    }

    /**
     * Gets authentication_type
     *
     * @return string|null
     */
    public function getAuthenticationType()
    {
        return $this->container['authentication_type'];
    }

    /**
     * Sets authentication_type
     *
     * @param string|null $authentication_type authentication_type
     *
     * @return self
     */
    public function setAuthenticationType($authentication_type)
    {
        if (is_null($authentication_type)) {
            array_push($this->openAPINullablesSetToNull, 'authentication_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authentication_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authentication_type'] = $authentication_type;

        return $this;
    }

    /**
     * Gets id_verification
     *
     * @return \BoldSign\Model\IdVerification|null
     */
    public function getIdVerification()
    {
        return $this->container['id_verification'];
    }

    /**
     * Sets id_verification
     *
     * @param \BoldSign\Model\IdVerification|null $id_verification id_verification
     *
     * @return self
     */
    public function setIdVerification($id_verification)
    {
        if (is_null($id_verification)) {
            throw new \InvalidArgumentException('non-nullable id_verification cannot be null');
        }
        $this->container['id_verification'] = $id_verification;

        return $this;
    }

    /**
     * Gets allow_field_configuration
     *
     * @return bool|null
     */
    public function getAllowFieldConfiguration()
    {
        return $this->container['allow_field_configuration'];
    }

    /**
     * Sets allow_field_configuration
     *
     * @param bool|null $allow_field_configuration allow_field_configuration
     *
     * @return self
     */
    public function setAllowFieldConfiguration($allow_field_configuration)
    {
        if (is_null($allow_field_configuration)) {
            throw new \InvalidArgumentException('non-nullable allow_field_configuration cannot be null');
        }
        $this->container['allow_field_configuration'] = $allow_field_configuration;

        return $this;
    }

    /**
     * Gets last_reminder_sent_on
     *
     * @return \DateTime|null
     */
    public function getLastReminderSentOn()
    {
        return $this->container['last_reminder_sent_on'];
    }

    /**
     * Sets last_reminder_sent_on
     *
     * @param \DateTime|null $last_reminder_sent_on last_reminder_sent_on
     *
     * @return self
     */
    public function setLastReminderSentOn($last_reminder_sent_on)
    {
        if (is_null($last_reminder_sent_on)) {
            array_push($this->openAPINullablesSetToNull, 'last_reminder_sent_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_reminder_sent_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_reminder_sent_on'] = $last_reminder_sent_on;

        return $this;
    }

    /**
     * Gets authentication_retry_count
     *
     * @return int|null
     */
    public function getAuthenticationRetryCount()
    {
        return $this->container['authentication_retry_count'];
    }

    /**
     * Sets authentication_retry_count
     *
     * @param int|null $authentication_retry_count authentication_retry_count
     *
     * @return self
     */
    public function setAuthenticationRetryCount($authentication_retry_count)
    {
        if (is_null($authentication_retry_count)) {
            array_push($this->openAPINullablesSetToNull, 'authentication_retry_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authentication_retry_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authentication_retry_count'] = $authentication_retry_count;

        return $this;
    }

    /**
     * Gets authentication_settings
     *
     * @return \BoldSign\Model\SignerAuthenticationSettings|null
     */
    public function getAuthenticationSettings()
    {
        return $this->container['authentication_settings'];
    }

    /**
     * Sets authentication_settings
     *
     * @param \BoldSign\Model\SignerAuthenticationSettings|null $authentication_settings authentication_settings
     *
     * @return self
     */
    public function setAuthenticationSettings($authentication_settings)
    {
        if (is_null($authentication_settings)) {
            throw new \InvalidArgumentException('non-nullable authentication_settings cannot be null');
        }
        $this->container['authentication_settings'] = $authentication_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


