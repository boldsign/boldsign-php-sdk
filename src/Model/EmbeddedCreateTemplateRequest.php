<?php
/**
 * EmbeddedCreateTemplateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * EmbeddedCreateTemplateRequest Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmbeddedCreateTemplateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmbeddedCreateTemplateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'redirect_url' => 'string',
        'show_toolbar' => 'bool',
        'view_option' => 'string',
        'show_save_button' => 'bool',
        'locale' => 'string',
        'show_send_button' => 'bool',
        'show_create_button' => 'bool',
        'show_preview_button' => 'bool',
        'show_navigation_buttons' => 'bool',
        'link_valid_till' => '\DateTime',
        'show_tooltip' => 'bool',
        'description' => 'string',
        'document_title' => 'string',
        'document_message' => 'string',
        'files' => '\SplFileObject[]',
        'file_urls' => 'string[]',
        'roles' => '\BoldSign\Model\TemplateRole[]',
        'allow_modify_files' => 'bool',
        'cc' => '\BoldSign\Model\DocumentCC[]',
        'brand_id' => 'string',
        'allow_message_editing' => 'bool',
        'allow_new_roles' => 'bool',
        'allow_new_files' => 'bool',
        'enable_reassign' => 'bool',
        'enable_print_and_sign' => 'bool',
        'enable_signing_order' => 'bool',
        'document_info' => '\BoldSign\Model\DocumentInfo[]',
        'use_text_tags' => 'bool',
        'text_tag_definitions' => '\BoldSign\Model\TextTagDefinition[]',
        'auto_detect_fields' => 'bool',
        'on_behalf_of' => 'string',
        'labels' => 'string[]',
        'template_labels' => 'string[]',
        'recipient_notification_settings' => '\BoldSign\Model\RecipientNotificationSettings',
        'form_groups' => '\BoldSign\Model\FormGroup[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'redirect_url' => 'uri',
        'show_toolbar' => null,
        'view_option' => null,
        'show_save_button' => null,
        'locale' => null,
        'show_send_button' => null,
        'show_create_button' => null,
        'show_preview_button' => null,
        'show_navigation_buttons' => null,
        'link_valid_till' => 'date-time',
        'show_tooltip' => null,
        'description' => null,
        'document_title' => null,
        'document_message' => null,
        'files' => 'binary',
        'file_urls' => 'uri',
        'roles' => null,
        'allow_modify_files' => null,
        'cc' => null,
        'brand_id' => null,
        'allow_message_editing' => null,
        'allow_new_roles' => null,
        'allow_new_files' => null,
        'enable_reassign' => null,
        'enable_print_and_sign' => null,
        'enable_signing_order' => null,
        'document_info' => null,
        'use_text_tags' => null,
        'text_tag_definitions' => null,
        'auto_detect_fields' => null,
        'on_behalf_of' => null,
        'labels' => null,
        'template_labels' => null,
        'recipient_notification_settings' => null,
        'form_groups' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => false,
        'redirect_url' => true,
        'show_toolbar' => false,
        'view_option' => false,
        'show_save_button' => false,
        'locale' => false,
        'show_send_button' => true,
        'show_create_button' => false,
        'show_preview_button' => false,
        'show_navigation_buttons' => false,
        'link_valid_till' => true,
        'show_tooltip' => false,
        'description' => true,
        'document_title' => true,
        'document_message' => true,
        'files' => true,
        'file_urls' => true,
        'roles' => true,
        'allow_modify_files' => false,
        'cc' => true,
        'brand_id' => true,
        'allow_message_editing' => false,
        'allow_new_roles' => false,
        'allow_new_files' => false,
        'enable_reassign' => false,
        'enable_print_and_sign' => false,
        'enable_signing_order' => false,
        'document_info' => true,
        'use_text_tags' => false,
        'text_tag_definitions' => true,
        'auto_detect_fields' => false,
        'on_behalf_of' => true,
        'labels' => true,
        'template_labels' => true,
        'recipient_notification_settings' => false,
        'form_groups' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'redirect_url' => 'redirectUrl',
        'show_toolbar' => 'showToolbar',
        'view_option' => 'viewOption',
        'show_save_button' => 'showSaveButton',
        'locale' => 'locale',
        'show_send_button' => 'showSendButton',
        'show_create_button' => 'showCreateButton',
        'show_preview_button' => 'showPreviewButton',
        'show_navigation_buttons' => 'showNavigationButtons',
        'link_valid_till' => 'linkValidTill',
        'show_tooltip' => 'showTooltip',
        'description' => 'description',
        'document_title' => 'documentTitle',
        'document_message' => 'documentMessage',
        'files' => 'files',
        'file_urls' => 'fileUrls',
        'roles' => 'roles',
        'allow_modify_files' => 'allowModifyFiles',
        'cc' => 'cc',
        'brand_id' => 'brandId',
        'allow_message_editing' => 'allowMessageEditing',
        'allow_new_roles' => 'allowNewRoles',
        'allow_new_files' => 'allowNewFiles',
        'enable_reassign' => 'enableReassign',
        'enable_print_and_sign' => 'enablePrintAndSign',
        'enable_signing_order' => 'enableSigningOrder',
        'document_info' => 'documentInfo',
        'use_text_tags' => 'useTextTags',
        'text_tag_definitions' => 'textTagDefinitions',
        'auto_detect_fields' => 'autoDetectFields',
        'on_behalf_of' => 'onBehalfOf',
        'labels' => 'labels',
        'template_labels' => 'templateLabels',
        'recipient_notification_settings' => 'recipientNotificationSettings',
        'form_groups' => 'formGroups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'redirect_url' => 'setRedirectUrl',
        'show_toolbar' => 'setShowToolbar',
        'view_option' => 'setViewOption',
        'show_save_button' => 'setShowSaveButton',
        'locale' => 'setLocale',
        'show_send_button' => 'setShowSendButton',
        'show_create_button' => 'setShowCreateButton',
        'show_preview_button' => 'setShowPreviewButton',
        'show_navigation_buttons' => 'setShowNavigationButtons',
        'link_valid_till' => 'setLinkValidTill',
        'show_tooltip' => 'setShowTooltip',
        'description' => 'setDescription',
        'document_title' => 'setDocumentTitle',
        'document_message' => 'setDocumentMessage',
        'files' => 'setFiles',
        'file_urls' => 'setFileUrls',
        'roles' => 'setRoles',
        'allow_modify_files' => 'setAllowModifyFiles',
        'cc' => 'setCc',
        'brand_id' => 'setBrandId',
        'allow_message_editing' => 'setAllowMessageEditing',
        'allow_new_roles' => 'setAllowNewRoles',
        'allow_new_files' => 'setAllowNewFiles',
        'enable_reassign' => 'setEnableReassign',
        'enable_print_and_sign' => 'setEnablePrintAndSign',
        'enable_signing_order' => 'setEnableSigningOrder',
        'document_info' => 'setDocumentInfo',
        'use_text_tags' => 'setUseTextTags',
        'text_tag_definitions' => 'setTextTagDefinitions',
        'auto_detect_fields' => 'setAutoDetectFields',
        'on_behalf_of' => 'setOnBehalfOf',
        'labels' => 'setLabels',
        'template_labels' => 'setTemplateLabels',
        'recipient_notification_settings' => 'setRecipientNotificationSettings',
        'form_groups' => 'setFormGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'redirect_url' => 'getRedirectUrl',
        'show_toolbar' => 'getShowToolbar',
        'view_option' => 'getViewOption',
        'show_save_button' => 'getShowSaveButton',
        'locale' => 'getLocale',
        'show_send_button' => 'getShowSendButton',
        'show_create_button' => 'getShowCreateButton',
        'show_preview_button' => 'getShowPreviewButton',
        'show_navigation_buttons' => 'getShowNavigationButtons',
        'link_valid_till' => 'getLinkValidTill',
        'show_tooltip' => 'getShowTooltip',
        'description' => 'getDescription',
        'document_title' => 'getDocumentTitle',
        'document_message' => 'getDocumentMessage',
        'files' => 'getFiles',
        'file_urls' => 'getFileUrls',
        'roles' => 'getRoles',
        'allow_modify_files' => 'getAllowModifyFiles',
        'cc' => 'getCc',
        'brand_id' => 'getBrandId',
        'allow_message_editing' => 'getAllowMessageEditing',
        'allow_new_roles' => 'getAllowNewRoles',
        'allow_new_files' => 'getAllowNewFiles',
        'enable_reassign' => 'getEnableReassign',
        'enable_print_and_sign' => 'getEnablePrintAndSign',
        'enable_signing_order' => 'getEnableSigningOrder',
        'document_info' => 'getDocumentInfo',
        'use_text_tags' => 'getUseTextTags',
        'text_tag_definitions' => 'getTextTagDefinitions',
        'auto_detect_fields' => 'getAutoDetectFields',
        'on_behalf_of' => 'getOnBehalfOf',
        'labels' => 'getLabels',
        'template_labels' => 'getTemplateLabels',
        'recipient_notification_settings' => 'getRecipientNotificationSettings',
        'form_groups' => 'getFormGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VIEW_OPTION_PREPARE_PAGE = 'PreparePage';
    public const VIEW_OPTION_FILLING_PAGE = 'FillingPage';
    public const LOCALE_EN = 'EN';
    public const LOCALE_NO = 'NO';
    public const LOCALE_FR = 'FR';
    public const LOCALE_DE = 'DE';
    public const LOCALE_ES = 'ES';
    public const LOCALE_BG = 'BG';
    public const LOCALE_CS = 'CS';
    public const LOCALE_DA = 'DA';
    public const LOCALE_IT = 'IT';
    public const LOCALE_NL = 'NL';
    public const LOCALE_PL = 'PL';
    public const LOCALE_PT = 'PT';
    public const LOCALE_RO = 'RO';
    public const LOCALE_RU = 'RU';
    public const LOCALE_SV = 'SV';
    public const LOCALE__DEFAULT = 'Default';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViewOptionAllowableValues()
    {
        return [
            self::VIEW_OPTION_PREPARE_PAGE,
            self::VIEW_OPTION_FILLING_PAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocaleAllowableValues()
    {
        return [
            self::LOCALE_EN,
            self::LOCALE_NO,
            self::LOCALE_FR,
            self::LOCALE_DE,
            self::LOCALE_ES,
            self::LOCALE_BG,
            self::LOCALE_CS,
            self::LOCALE_DA,
            self::LOCALE_IT,
            self::LOCALE_NL,
            self::LOCALE_PL,
            self::LOCALE_PT,
            self::LOCALE_RO,
            self::LOCALE_RU,
            self::LOCALE_SV,
            self::LOCALE__DEFAULT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('show_toolbar', $data ?? [], false);
        $this->setIfExists('view_option', $data ?? [], 'PreparePage');
        $this->setIfExists('show_save_button', $data ?? [], true);
        $this->setIfExists('locale', $data ?? [], 'EN');
        $this->setIfExists('show_send_button', $data ?? [], null);
        $this->setIfExists('show_create_button', $data ?? [], true);
        $this->setIfExists('show_preview_button', $data ?? [], true);
        $this->setIfExists('show_navigation_buttons', $data ?? [], true);
        $this->setIfExists('link_valid_till', $data ?? [], null);
        $this->setIfExists('show_tooltip', $data ?? [], false);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('document_title', $data ?? [], null);
        $this->setIfExists('document_message', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('file_urls', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('allow_modify_files', $data ?? [], true);
        $this->setIfExists('cc', $data ?? [], null);
        $this->setIfExists('brand_id', $data ?? [], null);
        $this->setIfExists('allow_message_editing', $data ?? [], true);
        $this->setIfExists('allow_new_roles', $data ?? [], true);
        $this->setIfExists('allow_new_files', $data ?? [], true);
        $this->setIfExists('enable_reassign', $data ?? [], true);
        $this->setIfExists('enable_print_and_sign', $data ?? [], false);
        $this->setIfExists('enable_signing_order', $data ?? [], false);
        $this->setIfExists('document_info', $data ?? [], null);
        $this->setIfExists('use_text_tags', $data ?? [], false);
        $this->setIfExists('text_tag_definitions', $data ?? [], null);
        $this->setIfExists('auto_detect_fields', $data ?? [], false);
        $this->setIfExists('on_behalf_of', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('template_labels', $data ?? [], null);
        $this->setIfExists('recipient_notification_settings', $data ?? [], null);
        $this->setIfExists('form_groups', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ((mb_strlen($this->container['title']) > 256)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getViewOptionAllowableValues();
        if (!is_null($this->container['view_option']) && !in_array($this->container['view_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'view_option', must be one of '%s'",
                $this->container['view_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocaleAllowableValues();
        if (!is_null($this->container['locale']) && !in_array($this->container['locale'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'locale', must be one of '%s'",
                $this->container['locale'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 5000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['document_title']) && (mb_strlen($this->container['document_title']) > 256)) {
            $invalidProperties[] = "invalid value for 'document_title', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['document_title']) && (mb_strlen($this->container['document_title']) < 0)) {
            $invalidProperties[] = "invalid value for 'document_title', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['document_message']) && (mb_strlen($this->container['document_message']) > 5000)) {
            $invalidProperties[] = "invalid value for 'document_message', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['document_message']) && (mb_strlen($this->container['document_message']) < 0)) {
            $invalidProperties[] = "invalid value for 'document_message', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        if ((mb_strlen($title) > 256)) {
            throw new \InvalidArgumentException('invalid length for $title when calling EmbeddedCreateTemplateRequest., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling EmbeddedCreateTemplateRequest., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string|null $redirect_url redirect_url
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets show_toolbar
     *
     * @return bool|null
     */
    public function getShowToolbar()
    {
        return $this->container['show_toolbar'];
    }

    /**
     * Sets show_toolbar
     *
     * @param bool|null $show_toolbar show_toolbar
     *
     * @return self
     */
    public function setShowToolbar($show_toolbar)
    {
        if (is_null($show_toolbar)) {
            throw new \InvalidArgumentException('non-nullable show_toolbar cannot be null');
        }
        $this->container['show_toolbar'] = $show_toolbar;

        return $this;
    }

    /**
     * Gets view_option
     *
     * @return string|null
     */
    public function getViewOption()
    {
        return $this->container['view_option'];
    }

    /**
     * Sets view_option
     *
     * @param string|null $view_option view_option
     *
     * @return self
     */
    public function setViewOption($view_option)
    {
        if (is_null($view_option)) {
            throw new \InvalidArgumentException('non-nullable view_option cannot be null');
        }
        $allowedValues = $this->getViewOptionAllowableValues();
        if (!in_array($view_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'view_option', must be one of '%s'",
                    $view_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['view_option'] = $view_option;

        return $this;
    }

    /**
     * Gets show_save_button
     *
     * @return bool|null
     */
    public function getShowSaveButton()
    {
        return $this->container['show_save_button'];
    }

    /**
     * Sets show_save_button
     *
     * @param bool|null $show_save_button show_save_button
     *
     * @return self
     */
    public function setShowSaveButton($show_save_button)
    {
        if (is_null($show_save_button)) {
            throw new \InvalidArgumentException('non-nullable show_save_button cannot be null');
        }
        $this->container['show_save_button'] = $show_save_button;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $allowedValues = $this->getLocaleAllowableValues();
        if (!in_array($locale, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'locale', must be one of '%s'",
                    $locale,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets show_send_button
     *
     * @return bool|null
     * @deprecated
     */
    public function getShowSendButton()
    {
        return $this->container['show_send_button'];
    }

    /**
     * Sets show_send_button
     *
     * @param bool|null $show_send_button show_send_button
     *
     * @return self
     * @deprecated
     */
    public function setShowSendButton($show_send_button)
    {
        if (is_null($show_send_button)) {
            array_push($this->openAPINullablesSetToNull, 'show_send_button');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_send_button', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_send_button'] = $show_send_button;

        return $this;
    }

    /**
     * Gets show_create_button
     *
     * @return bool|null
     */
    public function getShowCreateButton()
    {
        return $this->container['show_create_button'];
    }

    /**
     * Sets show_create_button
     *
     * @param bool|null $show_create_button show_create_button
     *
     * @return self
     */
    public function setShowCreateButton($show_create_button)
    {
        if (is_null($show_create_button)) {
            throw new \InvalidArgumentException('non-nullable show_create_button cannot be null');
        }
        $this->container['show_create_button'] = $show_create_button;

        return $this;
    }

    /**
     * Gets show_preview_button
     *
     * @return bool|null
     */
    public function getShowPreviewButton()
    {
        return $this->container['show_preview_button'];
    }

    /**
     * Sets show_preview_button
     *
     * @param bool|null $show_preview_button show_preview_button
     *
     * @return self
     */
    public function setShowPreviewButton($show_preview_button)
    {
        if (is_null($show_preview_button)) {
            throw new \InvalidArgumentException('non-nullable show_preview_button cannot be null');
        }
        $this->container['show_preview_button'] = $show_preview_button;

        return $this;
    }

    /**
     * Gets show_navigation_buttons
     *
     * @return bool|null
     */
    public function getShowNavigationButtons()
    {
        return $this->container['show_navigation_buttons'];
    }

    /**
     * Sets show_navigation_buttons
     *
     * @param bool|null $show_navigation_buttons show_navigation_buttons
     *
     * @return self
     */
    public function setShowNavigationButtons($show_navigation_buttons)
    {
        if (is_null($show_navigation_buttons)) {
            throw new \InvalidArgumentException('non-nullable show_navigation_buttons cannot be null');
        }
        $this->container['show_navigation_buttons'] = $show_navigation_buttons;

        return $this;
    }

    /**
     * Gets link_valid_till
     *
     * @return \DateTime|null
     */
    public function getLinkValidTill()
    {
        return $this->container['link_valid_till'];
    }

    /**
     * Sets link_valid_till
     *
     * @param \DateTime|null $link_valid_till link_valid_till
     *
     * @return self
     */
    public function setLinkValidTill($link_valid_till)
    {
        if (is_null($link_valid_till)) {
            array_push($this->openAPINullablesSetToNull, 'link_valid_till');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link_valid_till', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['link_valid_till'] = $link_valid_till;

        return $this;
    }

    /**
     * Gets show_tooltip
     *
     * @return bool|null
     */
    public function getShowTooltip()
    {
        return $this->container['show_tooltip'];
    }

    /**
     * Sets show_tooltip
     *
     * @param bool|null $show_tooltip show_tooltip
     *
     * @return self
     */
    public function setShowTooltip($show_tooltip)
    {
        if (is_null($show_tooltip)) {
            throw new \InvalidArgumentException('non-nullable show_tooltip cannot be null');
        }
        $this->container['show_tooltip'] = $show_tooltip;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($description) && (mb_strlen($description) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling EmbeddedCreateTemplateRequest., must be smaller than or equal to 5000.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling EmbeddedCreateTemplateRequest., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document_title
     *
     * @return string|null
     */
    public function getDocumentTitle()
    {
        return $this->container['document_title'];
    }

    /**
     * Sets document_title
     *
     * @param string|null $document_title document_title
     *
     * @return self
     */
    public function setDocumentTitle($document_title)
    {
        if (is_null($document_title)) {
            array_push($this->openAPINullablesSetToNull, 'document_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($document_title) && (mb_strlen($document_title) > 256)) {
            throw new \InvalidArgumentException('invalid length for $document_title when calling EmbeddedCreateTemplateRequest., must be smaller than or equal to 256.');
        }
        if (!is_null($document_title) && (mb_strlen($document_title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $document_title when calling EmbeddedCreateTemplateRequest., must be bigger than or equal to 0.');
        }

        $this->container['document_title'] = $document_title;

        return $this;
    }

    /**
     * Gets document_message
     *
     * @return string|null
     */
    public function getDocumentMessage()
    {
        return $this->container['document_message'];
    }

    /**
     * Sets document_message
     *
     * @param string|null $document_message document_message
     *
     * @return self
     */
    public function setDocumentMessage($document_message)
    {
        if (is_null($document_message)) {
            array_push($this->openAPINullablesSetToNull, 'document_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($document_message) && (mb_strlen($document_message) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $document_message when calling EmbeddedCreateTemplateRequest., must be smaller than or equal to 5000.');
        }
        if (!is_null($document_message) && (mb_strlen($document_message) < 0)) {
            throw new \InvalidArgumentException('invalid length for $document_message when calling EmbeddedCreateTemplateRequest., must be bigger than or equal to 0.');
        }

        $this->container['document_message'] = $document_message;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \SplFileObject[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \SplFileObject[]|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            array_push($this->openAPINullablesSetToNull, 'files');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('files', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets file_urls
     *
     * @return string[]|null
     */
    public function getFileUrls()
    {
        return $this->container['file_urls'];
    }

    /**
     * Sets file_urls
     *
     * @param string[]|null $file_urls file_urls
     *
     * @return self
     */
    public function setFileUrls($file_urls)
    {
        if (is_null($file_urls)) {
            array_push($this->openAPINullablesSetToNull, 'file_urls');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_urls', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_urls'] = $file_urls;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \BoldSign\Model\TemplateRole[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \BoldSign\Model\TemplateRole[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            array_push($this->openAPINullablesSetToNull, 'roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets allow_modify_files
     *
     * @return bool|null
     */
    public function getAllowModifyFiles()
    {
        return $this->container['allow_modify_files'];
    }

    /**
     * Sets allow_modify_files
     *
     * @param bool|null $allow_modify_files allow_modify_files
     *
     * @return self
     */
    public function setAllowModifyFiles($allow_modify_files)
    {
        if (is_null($allow_modify_files)) {
            throw new \InvalidArgumentException('non-nullable allow_modify_files cannot be null');
        }
        $this->container['allow_modify_files'] = $allow_modify_files;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return \BoldSign\Model\DocumentCC[]|null
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param \BoldSign\Model\DocumentCC[]|null $cc cc
     *
     * @return self
     */
    public function setCc($cc)
    {
        if (is_null($cc)) {
            array_push($this->openAPINullablesSetToNull, 'cc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string|null $brand_id brand_id
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        if (is_null($brand_id)) {
            array_push($this->openAPINullablesSetToNull, 'brand_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets allow_message_editing
     *
     * @return bool|null
     */
    public function getAllowMessageEditing()
    {
        return $this->container['allow_message_editing'];
    }

    /**
     * Sets allow_message_editing
     *
     * @param bool|null $allow_message_editing allow_message_editing
     *
     * @return self
     */
    public function setAllowMessageEditing($allow_message_editing)
    {
        if (is_null($allow_message_editing)) {
            throw new \InvalidArgumentException('non-nullable allow_message_editing cannot be null');
        }
        $this->container['allow_message_editing'] = $allow_message_editing;

        return $this;
    }

    /**
     * Gets allow_new_roles
     *
     * @return bool|null
     */
    public function getAllowNewRoles()
    {
        return $this->container['allow_new_roles'];
    }

    /**
     * Sets allow_new_roles
     *
     * @param bool|null $allow_new_roles allow_new_roles
     *
     * @return self
     */
    public function setAllowNewRoles($allow_new_roles)
    {
        if (is_null($allow_new_roles)) {
            throw new \InvalidArgumentException('non-nullable allow_new_roles cannot be null');
        }
        $this->container['allow_new_roles'] = $allow_new_roles;

        return $this;
    }

    /**
     * Gets allow_new_files
     *
     * @return bool|null
     */
    public function getAllowNewFiles()
    {
        return $this->container['allow_new_files'];
    }

    /**
     * Sets allow_new_files
     *
     * @param bool|null $allow_new_files allow_new_files
     *
     * @return self
     */
    public function setAllowNewFiles($allow_new_files)
    {
        if (is_null($allow_new_files)) {
            throw new \InvalidArgumentException('non-nullable allow_new_files cannot be null');
        }
        $this->container['allow_new_files'] = $allow_new_files;

        return $this;
    }

    /**
     * Gets enable_reassign
     *
     * @return bool|null
     */
    public function getEnableReassign()
    {
        return $this->container['enable_reassign'];
    }

    /**
     * Sets enable_reassign
     *
     * @param bool|null $enable_reassign enable_reassign
     *
     * @return self
     */
    public function setEnableReassign($enable_reassign)
    {
        if (is_null($enable_reassign)) {
            throw new \InvalidArgumentException('non-nullable enable_reassign cannot be null');
        }
        $this->container['enable_reassign'] = $enable_reassign;

        return $this;
    }

    /**
     * Gets enable_print_and_sign
     *
     * @return bool|null
     */
    public function getEnablePrintAndSign()
    {
        return $this->container['enable_print_and_sign'];
    }

    /**
     * Sets enable_print_and_sign
     *
     * @param bool|null $enable_print_and_sign enable_print_and_sign
     *
     * @return self
     */
    public function setEnablePrintAndSign($enable_print_and_sign)
    {
        if (is_null($enable_print_and_sign)) {
            throw new \InvalidArgumentException('non-nullable enable_print_and_sign cannot be null');
        }
        $this->container['enable_print_and_sign'] = $enable_print_and_sign;

        return $this;
    }

    /**
     * Gets enable_signing_order
     *
     * @return bool|null
     */
    public function getEnableSigningOrder()
    {
        return $this->container['enable_signing_order'];
    }

    /**
     * Sets enable_signing_order
     *
     * @param bool|null $enable_signing_order enable_signing_order
     *
     * @return self
     */
    public function setEnableSigningOrder($enable_signing_order)
    {
        if (is_null($enable_signing_order)) {
            throw new \InvalidArgumentException('non-nullable enable_signing_order cannot be null');
        }
        $this->container['enable_signing_order'] = $enable_signing_order;

        return $this;
    }

    /**
     * Gets document_info
     *
     * @return \BoldSign\Model\DocumentInfo[]|null
     */
    public function getDocumentInfo()
    {
        return $this->container['document_info'];
    }

    /**
     * Sets document_info
     *
     * @param \BoldSign\Model\DocumentInfo[]|null $document_info document_info
     *
     * @return self
     */
    public function setDocumentInfo($document_info)
    {
        if (is_null($document_info)) {
            array_push($this->openAPINullablesSetToNull, 'document_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_info'] = $document_info;

        return $this;
    }

    /**
     * Gets use_text_tags
     *
     * @return bool|null
     */
    public function getUseTextTags()
    {
        return $this->container['use_text_tags'];
    }

    /**
     * Sets use_text_tags
     *
     * @param bool|null $use_text_tags use_text_tags
     *
     * @return self
     */
    public function setUseTextTags($use_text_tags)
    {
        if (is_null($use_text_tags)) {
            throw new \InvalidArgumentException('non-nullable use_text_tags cannot be null');
        }
        $this->container['use_text_tags'] = $use_text_tags;

        return $this;
    }

    /**
     * Gets text_tag_definitions
     *
     * @return \BoldSign\Model\TextTagDefinition[]|null
     */
    public function getTextTagDefinitions()
    {
        return $this->container['text_tag_definitions'];
    }

    /**
     * Sets text_tag_definitions
     *
     * @param \BoldSign\Model\TextTagDefinition[]|null $text_tag_definitions text_tag_definitions
     *
     * @return self
     */
    public function setTextTagDefinitions($text_tag_definitions)
    {
        if (is_null($text_tag_definitions)) {
            array_push($this->openAPINullablesSetToNull, 'text_tag_definitions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text_tag_definitions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['text_tag_definitions'] = $text_tag_definitions;

        return $this;
    }

    /**
     * Gets auto_detect_fields
     *
     * @return bool|null
     */
    public function getAutoDetectFields()
    {
        return $this->container['auto_detect_fields'];
    }

    /**
     * Sets auto_detect_fields
     *
     * @param bool|null $auto_detect_fields auto_detect_fields
     *
     * @return self
     */
    public function setAutoDetectFields($auto_detect_fields)
    {
        if (is_null($auto_detect_fields)) {
            throw new \InvalidArgumentException('non-nullable auto_detect_fields cannot be null');
        }
        $this->container['auto_detect_fields'] = $auto_detect_fields;

        return $this;
    }

    /**
     * Gets on_behalf_of
     *
     * @return string|null
     */
    public function getOnBehalfOf()
    {
        return $this->container['on_behalf_of'];
    }

    /**
     * Sets on_behalf_of
     *
     * @param string|null $on_behalf_of on_behalf_of
     *
     * @return self
     */
    public function setOnBehalfOf($on_behalf_of)
    {
        if (is_null($on_behalf_of)) {
            array_push($this->openAPINullablesSetToNull, 'on_behalf_of');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('on_behalf_of', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['on_behalf_of'] = $on_behalf_of;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            array_push($this->openAPINullablesSetToNull, 'labels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('labels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets template_labels
     *
     * @return string[]|null
     */
    public function getTemplateLabels()
    {
        return $this->container['template_labels'];
    }

    /**
     * Sets template_labels
     *
     * @param string[]|null $template_labels template_labels
     *
     * @return self
     */
    public function setTemplateLabels($template_labels)
    {
        if (is_null($template_labels)) {
            array_push($this->openAPINullablesSetToNull, 'template_labels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_labels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_labels'] = $template_labels;

        return $this;
    }

    /**
     * Gets recipient_notification_settings
     *
     * @return \BoldSign\Model\RecipientNotificationSettings|null
     */
    public function getRecipientNotificationSettings()
    {
        return $this->container['recipient_notification_settings'];
    }

    /**
     * Sets recipient_notification_settings
     *
     * @param \BoldSign\Model\RecipientNotificationSettings|null $recipient_notification_settings recipient_notification_settings
     *
     * @return self
     */
    public function setRecipientNotificationSettings($recipient_notification_settings)
    {
        if (is_null($recipient_notification_settings)) {
            throw new \InvalidArgumentException('non-nullable recipient_notification_settings cannot be null');
        }
        $this->container['recipient_notification_settings'] = $recipient_notification_settings;

        return $this;
    }

    /**
     * Gets form_groups
     *
     * @return \BoldSign\Model\FormGroup[]|null
     */
    public function getFormGroups()
    {
        return $this->container['form_groups'];
    }

    /**
     * Sets form_groups
     *
     * @param \BoldSign\Model\FormGroup[]|null $form_groups form_groups
     *
     * @return self
     */
    public function setFormGroups($form_groups)
    {
        if (is_null($form_groups)) {
            array_push($this->openAPINullablesSetToNull, 'form_groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_groups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_groups'] = $form_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


