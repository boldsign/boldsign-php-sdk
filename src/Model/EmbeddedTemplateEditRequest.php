<?php
/**
 * EmbeddedTemplateEditRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * EmbeddedTemplateEditRequest Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmbeddedTemplateEditRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmbeddedTemplateEditRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'redirect_url' => 'string',
        'show_toolbar' => 'bool',
        'view_option' => 'string',
        'show_save_button' => 'bool',
        'locale' => 'string',
        'show_create_button' => 'bool',
        'show_preview_button' => 'bool',
        'show_navigation_buttons' => 'bool',
        'link_valid_till' => '\DateTime',
        'show_tooltip' => 'bool',
        'on_behalf_of' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'redirect_url' => 'uri',
        'show_toolbar' => null,
        'view_option' => null,
        'show_save_button' => null,
        'locale' => null,
        'show_create_button' => null,
        'show_preview_button' => null,
        'show_navigation_buttons' => null,
        'link_valid_till' => 'date-time',
        'show_tooltip' => null,
        'on_behalf_of' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'redirect_url' => true,
        'show_toolbar' => false,
        'view_option' => false,
        'show_save_button' => false,
        'locale' => false,
        'show_create_button' => false,
        'show_preview_button' => false,
        'show_navigation_buttons' => false,
        'link_valid_till' => true,
        'show_tooltip' => false,
        'on_behalf_of' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'redirect_url' => 'redirectUrl',
        'show_toolbar' => 'showToolbar',
        'view_option' => 'viewOption',
        'show_save_button' => 'showSaveButton',
        'locale' => 'locale',
        'show_create_button' => 'showCreateButton',
        'show_preview_button' => 'showPreviewButton',
        'show_navigation_buttons' => 'showNavigationButtons',
        'link_valid_till' => 'linkValidTill',
        'show_tooltip' => 'showTooltip',
        'on_behalf_of' => 'onBehalfOf'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'redirect_url' => 'setRedirectUrl',
        'show_toolbar' => 'setShowToolbar',
        'view_option' => 'setViewOption',
        'show_save_button' => 'setShowSaveButton',
        'locale' => 'setLocale',
        'show_create_button' => 'setShowCreateButton',
        'show_preview_button' => 'setShowPreviewButton',
        'show_navigation_buttons' => 'setShowNavigationButtons',
        'link_valid_till' => 'setLinkValidTill',
        'show_tooltip' => 'setShowTooltip',
        'on_behalf_of' => 'setOnBehalfOf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'redirect_url' => 'getRedirectUrl',
        'show_toolbar' => 'getShowToolbar',
        'view_option' => 'getViewOption',
        'show_save_button' => 'getShowSaveButton',
        'locale' => 'getLocale',
        'show_create_button' => 'getShowCreateButton',
        'show_preview_button' => 'getShowPreviewButton',
        'show_navigation_buttons' => 'getShowNavigationButtons',
        'link_valid_till' => 'getLinkValidTill',
        'show_tooltip' => 'getShowTooltip',
        'on_behalf_of' => 'getOnBehalfOf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VIEW_OPTION_PREPARE_PAGE = 'PreparePage';
    public const VIEW_OPTION_FILLING_PAGE = 'FillingPage';
    public const LOCALE_EN = 'EN';
    public const LOCALE_NO = 'NO';
    public const LOCALE_FR = 'FR';
    public const LOCALE_DE = 'DE';
    public const LOCALE_ES = 'ES';
    public const LOCALE_BG = 'BG';
    public const LOCALE_CS = 'CS';
    public const LOCALE_DA = 'DA';
    public const LOCALE_IT = 'IT';
    public const LOCALE_NL = 'NL';
    public const LOCALE_PL = 'PL';
    public const LOCALE_PT = 'PT';
    public const LOCALE_RO = 'RO';
    public const LOCALE_RU = 'RU';
    public const LOCALE_SV = 'SV';
    public const LOCALE__DEFAULT = 'Default';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViewOptionAllowableValues()
    {
        return [
            self::VIEW_OPTION_PREPARE_PAGE,
            self::VIEW_OPTION_FILLING_PAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocaleAllowableValues()
    {
        return [
            self::LOCALE_EN,
            self::LOCALE_NO,
            self::LOCALE_FR,
            self::LOCALE_DE,
            self::LOCALE_ES,
            self::LOCALE_BG,
            self::LOCALE_CS,
            self::LOCALE_DA,
            self::LOCALE_IT,
            self::LOCALE_NL,
            self::LOCALE_PL,
            self::LOCALE_PT,
            self::LOCALE_RO,
            self::LOCALE_RU,
            self::LOCALE_SV,
            self::LOCALE__DEFAULT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('show_toolbar', $data ?? [], false);
        $this->setIfExists('view_option', $data ?? [], 'PreparePage');
        $this->setIfExists('show_save_button', $data ?? [], true);
        $this->setIfExists('locale', $data ?? [], 'EN');
        $this->setIfExists('show_create_button', $data ?? [], true);
        $this->setIfExists('show_preview_button', $data ?? [], true);
        $this->setIfExists('show_navigation_buttons', $data ?? [], true);
        $this->setIfExists('link_valid_till', $data ?? [], null);
        $this->setIfExists('show_tooltip', $data ?? [], false);
        $this->setIfExists('on_behalf_of', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getViewOptionAllowableValues();
        if (!is_null($this->container['view_option']) && !in_array($this->container['view_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'view_option', must be one of '%s'",
                $this->container['view_option'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocaleAllowableValues();
        if (!is_null($this->container['locale']) && !in_array($this->container['locale'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'locale', must be one of '%s'",
                $this->container['locale'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets redirect_url
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string|null $redirect_url redirect_url
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets show_toolbar
     *
     * @return bool|null
     */
    public function getShowToolbar()
    {
        return $this->container['show_toolbar'];
    }

    /**
     * Sets show_toolbar
     *
     * @param bool|null $show_toolbar show_toolbar
     *
     * @return self
     */
    public function setShowToolbar($show_toolbar)
    {
        if (is_null($show_toolbar)) {
            throw new \InvalidArgumentException('non-nullable show_toolbar cannot be null');
        }
        $this->container['show_toolbar'] = $show_toolbar;

        return $this;
    }

    /**
     * Gets view_option
     *
     * @return string|null
     */
    public function getViewOption()
    {
        return $this->container['view_option'];
    }

    /**
     * Sets view_option
     *
     * @param string|null $view_option view_option
     *
     * @return self
     */
    public function setViewOption($view_option)
    {
        if (is_null($view_option)) {
            throw new \InvalidArgumentException('non-nullable view_option cannot be null');
        }
        $allowedValues = $this->getViewOptionAllowableValues();
        if (!in_array($view_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'view_option', must be one of '%s'",
                    $view_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['view_option'] = $view_option;

        return $this;
    }

    /**
     * Gets show_save_button
     *
     * @return bool|null
     */
    public function getShowSaveButton()
    {
        return $this->container['show_save_button'];
    }

    /**
     * Sets show_save_button
     *
     * @param bool|null $show_save_button show_save_button
     *
     * @return self
     */
    public function setShowSaveButton($show_save_button)
    {
        if (is_null($show_save_button)) {
            throw new \InvalidArgumentException('non-nullable show_save_button cannot be null');
        }
        $this->container['show_save_button'] = $show_save_button;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $allowedValues = $this->getLocaleAllowableValues();
        if (!in_array($locale, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'locale', must be one of '%s'",
                    $locale,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets show_create_button
     *
     * @return bool|null
     */
    public function getShowCreateButton()
    {
        return $this->container['show_create_button'];
    }

    /**
     * Sets show_create_button
     *
     * @param bool|null $show_create_button show_create_button
     *
     * @return self
     */
    public function setShowCreateButton($show_create_button)
    {
        if (is_null($show_create_button)) {
            throw new \InvalidArgumentException('non-nullable show_create_button cannot be null');
        }
        $this->container['show_create_button'] = $show_create_button;

        return $this;
    }

    /**
     * Gets show_preview_button
     *
     * @return bool|null
     */
    public function getShowPreviewButton()
    {
        return $this->container['show_preview_button'];
    }

    /**
     * Sets show_preview_button
     *
     * @param bool|null $show_preview_button show_preview_button
     *
     * @return self
     */
    public function setShowPreviewButton($show_preview_button)
    {
        if (is_null($show_preview_button)) {
            throw new \InvalidArgumentException('non-nullable show_preview_button cannot be null');
        }
        $this->container['show_preview_button'] = $show_preview_button;

        return $this;
    }

    /**
     * Gets show_navigation_buttons
     *
     * @return bool|null
     */
    public function getShowNavigationButtons()
    {
        return $this->container['show_navigation_buttons'];
    }

    /**
     * Sets show_navigation_buttons
     *
     * @param bool|null $show_navigation_buttons show_navigation_buttons
     *
     * @return self
     */
    public function setShowNavigationButtons($show_navigation_buttons)
    {
        if (is_null($show_navigation_buttons)) {
            throw new \InvalidArgumentException('non-nullable show_navigation_buttons cannot be null');
        }
        $this->container['show_navigation_buttons'] = $show_navigation_buttons;

        return $this;
    }

    /**
     * Gets link_valid_till
     *
     * @return \DateTime|null
     */
    public function getLinkValidTill()
    {
        return $this->container['link_valid_till'];
    }

    /**
     * Sets link_valid_till
     *
     * @param \DateTime|null $link_valid_till link_valid_till
     *
     * @return self
     */
    public function setLinkValidTill($link_valid_till)
    {
        if (is_null($link_valid_till)) {
            array_push($this->openAPINullablesSetToNull, 'link_valid_till');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link_valid_till', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['link_valid_till'] = $link_valid_till;

        return $this;
    }

    /**
     * Gets show_tooltip
     *
     * @return bool|null
     */
    public function getShowTooltip()
    {
        return $this->container['show_tooltip'];
    }

    /**
     * Sets show_tooltip
     *
     * @param bool|null $show_tooltip show_tooltip
     *
     * @return self
     */
    public function setShowTooltip($show_tooltip)
    {
        if (is_null($show_tooltip)) {
            throw new \InvalidArgumentException('non-nullable show_tooltip cannot be null');
        }
        $this->container['show_tooltip'] = $show_tooltip;

        return $this;
    }

    /**
     * Gets on_behalf_of
     *
     * @return string|null
     */
    public function getOnBehalfOf()
    {
        return $this->container['on_behalf_of'];
    }

    /**
     * Sets on_behalf_of
     *
     * @param string|null $on_behalf_of on_behalf_of
     *
     * @return self
     */
    public function setOnBehalfOf($on_behalf_of)
    {
        if (is_null($on_behalf_of)) {
            array_push($this->openAPINullablesSetToNull, 'on_behalf_of');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('on_behalf_of', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['on_behalf_of'] = $on_behalf_of;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


