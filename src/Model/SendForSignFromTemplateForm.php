<?php
/**
 * SendForSignFromTemplateForm
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * SendForSignFromTemplateForm Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SendForSignFromTemplateForm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendForSignFromTemplateForm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'files' => '\SplFileObject[]',
        'file_urls' => 'string[]',
        'document_id' => 'string',
        'title' => 'string',
        'message' => 'string',
        'roles' => '\BoldSign\Model\Role[]',
        'brand_id' => 'string',
        'labels' => 'string[]',
        'disable_emails' => 'bool',
        'disable_sms' => 'bool',
        'hide_document_id' => 'bool',
        'reminder_settings' => '\BoldSign\Model\ReminderSettings',
        'cc' => '\BoldSign\Model\DocumentCC[]',
        'expiry_days' => 'int',
        'expiry_date_type' => 'string',
        'expiry_value' => 'int',
        'enable_print_and_sign' => 'bool',
        'enable_reassign' => 'bool',
        'enable_signing_order' => 'bool',
        'disable_expiry_alert' => 'bool',
        'document_info' => '\BoldSign\Model\DocumentInfo[]',
        'on_behalf_of' => 'string',
        'is_sandbox' => 'bool',
        'role_removal_indices' => 'int[]',
        'document_download_option' => 'string',
        'meta_data' => 'array<string,string>',
        'recipient_notification_settings' => '\BoldSign\Model\RecipientNotificationSettings',
        'form_groups' => '\BoldSign\Model\FormGroup[]',
        'remove_form_fields' => 'string[]',
        'enable_audit_trail_localization' => 'bool',
        'download_file_name' => 'string',
        'scheduled_send_time' => 'int',
        'allow_scheduled_send' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'files' => 'binary',
        'file_urls' => 'uri',
        'document_id' => null,
        'title' => null,
        'message' => null,
        'roles' => null,
        'brand_id' => null,
        'labels' => null,
        'disable_emails' => null,
        'disable_sms' => null,
        'hide_document_id' => null,
        'reminder_settings' => null,
        'cc' => null,
        'expiry_days' => 'int32',
        'expiry_date_type' => null,
        'expiry_value' => 'int64',
        'enable_print_and_sign' => null,
        'enable_reassign' => null,
        'enable_signing_order' => null,
        'disable_expiry_alert' => null,
        'document_info' => null,
        'on_behalf_of' => null,
        'is_sandbox' => null,
        'role_removal_indices' => 'int32',
        'document_download_option' => null,
        'meta_data' => null,
        'recipient_notification_settings' => null,
        'form_groups' => null,
        'remove_form_fields' => null,
        'enable_audit_trail_localization' => null,
        'download_file_name' => null,
        'scheduled_send_time' => 'int64',
        'allow_scheduled_send' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'files' => true,
        'file_urls' => true,
        'document_id' => true,
        'title' => true,
        'message' => true,
        'roles' => true,
        'brand_id' => true,
        'labels' => true,
        'disable_emails' => false,
        'disable_sms' => false,
        'hide_document_id' => true,
        'reminder_settings' => false,
        'cc' => true,
        'expiry_days' => false,
        'expiry_date_type' => true,
        'expiry_value' => false,
        'enable_print_and_sign' => false,
        'enable_reassign' => true,
        'enable_signing_order' => true,
        'disable_expiry_alert' => true,
        'document_info' => true,
        'on_behalf_of' => true,
        'is_sandbox' => true,
        'role_removal_indices' => true,
        'document_download_option' => true,
        'meta_data' => true,
        'recipient_notification_settings' => false,
        'form_groups' => true,
        'remove_form_fields' => true,
        'enable_audit_trail_localization' => true,
        'download_file_name' => true,
        'scheduled_send_time' => true,
        'allow_scheduled_send' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'files' => 'files',
        'file_urls' => 'fileUrls',
        'document_id' => 'documentId',
        'title' => 'title',
        'message' => 'message',
        'roles' => 'roles',
        'brand_id' => 'brandId',
        'labels' => 'labels',
        'disable_emails' => 'disableEmails',
        'disable_sms' => 'disableSMS',
        'hide_document_id' => 'hideDocumentId',
        'reminder_settings' => 'reminderSettings',
        'cc' => 'cc',
        'expiry_days' => 'expiryDays',
        'expiry_date_type' => 'expiryDateType',
        'expiry_value' => 'expiryValue',
        'enable_print_and_sign' => 'enablePrintAndSign',
        'enable_reassign' => 'enableReassign',
        'enable_signing_order' => 'enableSigningOrder',
        'disable_expiry_alert' => 'disableExpiryAlert',
        'document_info' => 'documentInfo',
        'on_behalf_of' => 'onBehalfOf',
        'is_sandbox' => 'isSandbox',
        'role_removal_indices' => 'roleRemovalIndices',
        'document_download_option' => 'documentDownloadOption',
        'meta_data' => 'metaData',
        'recipient_notification_settings' => 'recipientNotificationSettings',
        'form_groups' => 'formGroups',
        'remove_form_fields' => 'removeFormFields',
        'enable_audit_trail_localization' => 'enableAuditTrailLocalization',
        'download_file_name' => 'downloadFileName',
        'scheduled_send_time' => 'scheduledSendTime',
        'allow_scheduled_send' => 'allowScheduledSend'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'files' => 'setFiles',
        'file_urls' => 'setFileUrls',
        'document_id' => 'setDocumentId',
        'title' => 'setTitle',
        'message' => 'setMessage',
        'roles' => 'setRoles',
        'brand_id' => 'setBrandId',
        'labels' => 'setLabels',
        'disable_emails' => 'setDisableEmails',
        'disable_sms' => 'setDisableSms',
        'hide_document_id' => 'setHideDocumentId',
        'reminder_settings' => 'setReminderSettings',
        'cc' => 'setCc',
        'expiry_days' => 'setExpiryDays',
        'expiry_date_type' => 'setExpiryDateType',
        'expiry_value' => 'setExpiryValue',
        'enable_print_and_sign' => 'setEnablePrintAndSign',
        'enable_reassign' => 'setEnableReassign',
        'enable_signing_order' => 'setEnableSigningOrder',
        'disable_expiry_alert' => 'setDisableExpiryAlert',
        'document_info' => 'setDocumentInfo',
        'on_behalf_of' => 'setOnBehalfOf',
        'is_sandbox' => 'setIsSandbox',
        'role_removal_indices' => 'setRoleRemovalIndices',
        'document_download_option' => 'setDocumentDownloadOption',
        'meta_data' => 'setMetaData',
        'recipient_notification_settings' => 'setRecipientNotificationSettings',
        'form_groups' => 'setFormGroups',
        'remove_form_fields' => 'setRemoveFormFields',
        'enable_audit_trail_localization' => 'setEnableAuditTrailLocalization',
        'download_file_name' => 'setDownloadFileName',
        'scheduled_send_time' => 'setScheduledSendTime',
        'allow_scheduled_send' => 'setAllowScheduledSend'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'files' => 'getFiles',
        'file_urls' => 'getFileUrls',
        'document_id' => 'getDocumentId',
        'title' => 'getTitle',
        'message' => 'getMessage',
        'roles' => 'getRoles',
        'brand_id' => 'getBrandId',
        'labels' => 'getLabels',
        'disable_emails' => 'getDisableEmails',
        'disable_sms' => 'getDisableSms',
        'hide_document_id' => 'getHideDocumentId',
        'reminder_settings' => 'getReminderSettings',
        'cc' => 'getCc',
        'expiry_days' => 'getExpiryDays',
        'expiry_date_type' => 'getExpiryDateType',
        'expiry_value' => 'getExpiryValue',
        'enable_print_and_sign' => 'getEnablePrintAndSign',
        'enable_reassign' => 'getEnableReassign',
        'enable_signing_order' => 'getEnableSigningOrder',
        'disable_expiry_alert' => 'getDisableExpiryAlert',
        'document_info' => 'getDocumentInfo',
        'on_behalf_of' => 'getOnBehalfOf',
        'is_sandbox' => 'getIsSandbox',
        'role_removal_indices' => 'getRoleRemovalIndices',
        'document_download_option' => 'getDocumentDownloadOption',
        'meta_data' => 'getMetaData',
        'recipient_notification_settings' => 'getRecipientNotificationSettings',
        'form_groups' => 'getFormGroups',
        'remove_form_fields' => 'getRemoveFormFields',
        'enable_audit_trail_localization' => 'getEnableAuditTrailLocalization',
        'download_file_name' => 'getDownloadFileName',
        'scheduled_send_time' => 'getScheduledSendTime',
        'allow_scheduled_send' => 'getAllowScheduledSend'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EXPIRY_DATE_TYPE_DAYS = 'Days';
    public const EXPIRY_DATE_TYPE_HOURS = 'Hours';
    public const EXPIRY_DATE_TYPE_SPECIFIC_DATE_TIME = 'SpecificDateTime';
    public const EXPIRY_DATE_TYPE_NULL = 'null';
    public const DOCUMENT_DOWNLOAD_OPTION_COMBINED = 'Combined';
    public const DOCUMENT_DOWNLOAD_OPTION_INDIVIDUALLY = 'Individually';
    public const DOCUMENT_DOWNLOAD_OPTION_NULL = 'null';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExpiryDateTypeAllowableValues()
    {
        return [
            self::EXPIRY_DATE_TYPE_DAYS,
            self::EXPIRY_DATE_TYPE_HOURS,
            self::EXPIRY_DATE_TYPE_SPECIFIC_DATE_TIME,
            self::EXPIRY_DATE_TYPE_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentDownloadOptionAllowableValues()
    {
        return [
            self::DOCUMENT_DOWNLOAD_OPTION_COMBINED,
            self::DOCUMENT_DOWNLOAD_OPTION_INDIVIDUALLY,
            self::DOCUMENT_DOWNLOAD_OPTION_NULL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('file_urls', $data ?? [], null);
        $this->setIfExists('document_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('brand_id', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('disable_emails', $data ?? [], null);
        $this->setIfExists('disable_sms', $data ?? [], false);
        $this->setIfExists('hide_document_id', $data ?? [], null);
        $this->setIfExists('reminder_settings', $data ?? [], null);
        $this->setIfExists('cc', $data ?? [], null);
        $this->setIfExists('expiry_days', $data ?? [], null);
        $this->setIfExists('expiry_date_type', $data ?? [], null);
        $this->setIfExists('expiry_value', $data ?? [], 60);
        $this->setIfExists('enable_print_and_sign', $data ?? [], null);
        $this->setIfExists('enable_reassign', $data ?? [], null);
        $this->setIfExists('enable_signing_order', $data ?? [], null);
        $this->setIfExists('disable_expiry_alert', $data ?? [], null);
        $this->setIfExists('document_info', $data ?? [], null);
        $this->setIfExists('on_behalf_of', $data ?? [], null);
        $this->setIfExists('is_sandbox', $data ?? [], null);
        $this->setIfExists('role_removal_indices', $data ?? [], null);
        $this->setIfExists('document_download_option', $data ?? [], null);
        $this->setIfExists('meta_data', $data ?? [], null);
        $this->setIfExists('recipient_notification_settings', $data ?? [], null);
        $this->setIfExists('form_groups', $data ?? [], null);
        $this->setIfExists('remove_form_fields', $data ?? [], null);
        $this->setIfExists('enable_audit_trail_localization', $data ?? [], null);
        $this->setIfExists('download_file_name', $data ?? [], null);
        $this->setIfExists('scheduled_send_time', $data ?? [], null);
        $this->setIfExists('allow_scheduled_send', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 256)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) < 0)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['message']) && (mb_strlen($this->container['message']) > 5000)) {
            $invalidProperties[] = "invalid value for 'message', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['message']) && (mb_strlen($this->container['message']) < 0)) {
            $invalidProperties[] = "invalid value for 'message', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getExpiryDateTypeAllowableValues();
        if (!is_null($this->container['expiry_date_type']) && !in_array($this->container['expiry_date_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'expiry_date_type', must be one of '%s'",
                $this->container['expiry_date_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentDownloadOptionAllowableValues();
        if (!is_null($this->container['document_download_option']) && !in_array($this->container['document_download_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_download_option', must be one of '%s'",
                $this->container['document_download_option'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['download_file_name']) && (mb_strlen($this->container['download_file_name']) > 250)) {
            $invalidProperties[] = "invalid value for 'download_file_name', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['download_file_name']) && (mb_strlen($this->container['download_file_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'download_file_name', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets files
     *
     * @return \SplFileObject[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \SplFileObject[]|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            array_push($this->openAPINullablesSetToNull, 'files');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('files', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets file_urls
     *
     * @return string[]|null
     */
    public function getFileUrls()
    {
        return $this->container['file_urls'];
    }

    /**
     * Sets file_urls
     *
     * @param string[]|null $file_urls file_urls
     *
     * @return self
     */
    public function setFileUrls($file_urls)
    {
        if (is_null($file_urls)) {
            array_push($this->openAPINullablesSetToNull, 'file_urls');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_urls', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_urls'] = $file_urls;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string|null $document_id document_id
     *
     * @return self
     */
    public function setDocumentId($document_id)
    {
        if (is_null($document_id)) {
            array_push($this->openAPINullablesSetToNull, 'document_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($title) && (mb_strlen($title) > 256)) {
            throw new \InvalidArgumentException('invalid length for $title when calling SendForSignFromTemplateForm., must be smaller than or equal to 256.');
        }
        if (!is_null($title) && (mb_strlen($title) < 0)) {
            throw new \InvalidArgumentException('invalid length for $title when calling SendForSignFromTemplateForm., must be bigger than or equal to 0.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            array_push($this->openAPINullablesSetToNull, 'message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($message) && (mb_strlen($message) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $message when calling SendForSignFromTemplateForm., must be smaller than or equal to 5000.');
        }
        if (!is_null($message) && (mb_strlen($message) < 0)) {
            throw new \InvalidArgumentException('invalid length for $message when calling SendForSignFromTemplateForm., must be bigger than or equal to 0.');
        }

        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \BoldSign\Model\Role[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \BoldSign\Model\Role[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            array_push($this->openAPINullablesSetToNull, 'roles');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('roles', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string|null $brand_id brand_id
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        if (is_null($brand_id)) {
            array_push($this->openAPINullablesSetToNull, 'brand_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            array_push($this->openAPINullablesSetToNull, 'labels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('labels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets disable_emails
     *
     * @return bool|null
     */
    public function getDisableEmails()
    {
        return $this->container['disable_emails'];
    }

    /**
     * Sets disable_emails
     *
     * @param bool|null $disable_emails disable_emails
     *
     * @return self
     */
    public function setDisableEmails($disable_emails)
    {
        if (is_null($disable_emails)) {
            throw new \InvalidArgumentException('non-nullable disable_emails cannot be null');
        }
        $this->container['disable_emails'] = $disable_emails;

        return $this;
    }

    /**
     * Gets disable_sms
     *
     * @return bool|null
     */
    public function getDisableSms()
    {
        return $this->container['disable_sms'];
    }

    /**
     * Sets disable_sms
     *
     * @param bool|null $disable_sms disable_sms
     *
     * @return self
     */
    public function setDisableSms($disable_sms)
    {
        if (is_null($disable_sms)) {
            throw new \InvalidArgumentException('non-nullable disable_sms cannot be null');
        }
        $this->container['disable_sms'] = $disable_sms;

        return $this;
    }

    /**
     * Gets hide_document_id
     *
     * @return bool|null
     */
    public function getHideDocumentId()
    {
        return $this->container['hide_document_id'];
    }

    /**
     * Sets hide_document_id
     *
     * @param bool|null $hide_document_id hide_document_id
     *
     * @return self
     */
    public function setHideDocumentId($hide_document_id)
    {
        if (is_null($hide_document_id)) {
            array_push($this->openAPINullablesSetToNull, 'hide_document_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hide_document_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hide_document_id'] = $hide_document_id;

        return $this;
    }

    /**
     * Gets reminder_settings
     *
     * @return \BoldSign\Model\ReminderSettings|null
     */
    public function getReminderSettings()
    {
        return $this->container['reminder_settings'];
    }

    /**
     * Sets reminder_settings
     *
     * @param \BoldSign\Model\ReminderSettings|null $reminder_settings reminder_settings
     *
     * @return self
     */
    public function setReminderSettings($reminder_settings)
    {
        if (is_null($reminder_settings)) {
            throw new \InvalidArgumentException('non-nullable reminder_settings cannot be null');
        }
        $this->container['reminder_settings'] = $reminder_settings;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return \BoldSign\Model\DocumentCC[]|null
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param \BoldSign\Model\DocumentCC[]|null $cc cc
     *
     * @return self
     */
    public function setCc($cc)
    {
        if (is_null($cc)) {
            array_push($this->openAPINullablesSetToNull, 'cc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets expiry_days
     *
     * @return int|null
     * @deprecated
     */
    public function getExpiryDays()
    {
        return $this->container['expiry_days'];
    }

    /**
     * Sets expiry_days
     *
     * @param int|null $expiry_days expiry_days
     *
     * @return self
     * @deprecated
     */
    public function setExpiryDays($expiry_days)
    {
        if (is_null($expiry_days)) {
            throw new \InvalidArgumentException('non-nullable expiry_days cannot be null');
        }
        $this->container['expiry_days'] = $expiry_days;

        return $this;
    }

    /**
     * Gets expiry_date_type
     *
     * @return string|null
     */
    public function getExpiryDateType()
    {
        return $this->container['expiry_date_type'];
    }

    /**
     * Sets expiry_date_type
     *
     * @param string|null $expiry_date_type expiry_date_type
     *
     * @return self
     */
    public function setExpiryDateType($expiry_date_type)
    {
        if (is_null($expiry_date_type)) {
            array_push($this->openAPINullablesSetToNull, 'expiry_date_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expiry_date_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getExpiryDateTypeAllowableValues();
        if (!is_null($expiry_date_type) && !in_array($expiry_date_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'expiry_date_type', must be one of '%s'",
                    $expiry_date_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['expiry_date_type'] = $expiry_date_type;

        return $this;
    }

    /**
     * Gets expiry_value
     *
     * @return int|null
     */
    public function getExpiryValue()
    {
        return $this->container['expiry_value'];
    }

    /**
     * Sets expiry_value
     *
     * @param int|null $expiry_value expiry_value
     *
     * @return self
     */
    public function setExpiryValue($expiry_value)
    {
        if (is_null($expiry_value)) {
            throw new \InvalidArgumentException('non-nullable expiry_value cannot be null');
        }
        $this->container['expiry_value'] = $expiry_value;

        return $this;
    }

    /**
     * Gets enable_print_and_sign
     *
     * @return bool|null
     */
    public function getEnablePrintAndSign()
    {
        return $this->container['enable_print_and_sign'];
    }

    /**
     * Sets enable_print_and_sign
     *
     * @param bool|null $enable_print_and_sign enable_print_and_sign
     *
     * @return self
     */
    public function setEnablePrintAndSign($enable_print_and_sign)
    {
        if (is_null($enable_print_and_sign)) {
            throw new \InvalidArgumentException('non-nullable enable_print_and_sign cannot be null');
        }
        $this->container['enable_print_and_sign'] = $enable_print_and_sign;

        return $this;
    }

    /**
     * Gets enable_reassign
     *
     * @return bool|null
     */
    public function getEnableReassign()
    {
        return $this->container['enable_reassign'];
    }

    /**
     * Sets enable_reassign
     *
     * @param bool|null $enable_reassign enable_reassign
     *
     * @return self
     */
    public function setEnableReassign($enable_reassign)
    {
        if (is_null($enable_reassign)) {
            array_push($this->openAPINullablesSetToNull, 'enable_reassign');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_reassign', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_reassign'] = $enable_reassign;

        return $this;
    }

    /**
     * Gets enable_signing_order
     *
     * @return bool|null
     */
    public function getEnableSigningOrder()
    {
        return $this->container['enable_signing_order'];
    }

    /**
     * Sets enable_signing_order
     *
     * @param bool|null $enable_signing_order enable_signing_order
     *
     * @return self
     */
    public function setEnableSigningOrder($enable_signing_order)
    {
        if (is_null($enable_signing_order)) {
            array_push($this->openAPINullablesSetToNull, 'enable_signing_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_signing_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_signing_order'] = $enable_signing_order;

        return $this;
    }

    /**
     * Gets disable_expiry_alert
     *
     * @return bool|null
     */
    public function getDisableExpiryAlert()
    {
        return $this->container['disable_expiry_alert'];
    }

    /**
     * Sets disable_expiry_alert
     *
     * @param bool|null $disable_expiry_alert disable_expiry_alert
     *
     * @return self
     */
    public function setDisableExpiryAlert($disable_expiry_alert)
    {
        if (is_null($disable_expiry_alert)) {
            array_push($this->openAPINullablesSetToNull, 'disable_expiry_alert');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disable_expiry_alert', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disable_expiry_alert'] = $disable_expiry_alert;

        return $this;
    }

    /**
     * Gets document_info
     *
     * @return \BoldSign\Model\DocumentInfo[]|null
     */
    public function getDocumentInfo()
    {
        return $this->container['document_info'];
    }

    /**
     * Sets document_info
     *
     * @param \BoldSign\Model\DocumentInfo[]|null $document_info document_info
     *
     * @return self
     */
    public function setDocumentInfo($document_info)
    {
        if (is_null($document_info)) {
            array_push($this->openAPINullablesSetToNull, 'document_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_info'] = $document_info;

        return $this;
    }

    /**
     * Gets on_behalf_of
     *
     * @return string|null
     */
    public function getOnBehalfOf()
    {
        return $this->container['on_behalf_of'];
    }

    /**
     * Sets on_behalf_of
     *
     * @param string|null $on_behalf_of on_behalf_of
     *
     * @return self
     */
    public function setOnBehalfOf($on_behalf_of)
    {
        if (is_null($on_behalf_of)) {
            array_push($this->openAPINullablesSetToNull, 'on_behalf_of');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('on_behalf_of', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['on_behalf_of'] = $on_behalf_of;

        return $this;
    }

    /**
     * Gets is_sandbox
     *
     * @return bool|null
     */
    public function getIsSandbox()
    {
        return $this->container['is_sandbox'];
    }

    /**
     * Sets is_sandbox
     *
     * @param bool|null $is_sandbox is_sandbox
     *
     * @return self
     */
    public function setIsSandbox($is_sandbox)
    {
        if (is_null($is_sandbox)) {
            array_push($this->openAPINullablesSetToNull, 'is_sandbox');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_sandbox', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_sandbox'] = $is_sandbox;

        return $this;
    }

    /**
     * Gets role_removal_indices
     *
     * @return int[]|null
     */
    public function getRoleRemovalIndices()
    {
        return $this->container['role_removal_indices'];
    }

    /**
     * Sets role_removal_indices
     *
     * @param int[]|null $role_removal_indices role_removal_indices
     *
     * @return self
     */
    public function setRoleRemovalIndices($role_removal_indices)
    {
        if (is_null($role_removal_indices)) {
            array_push($this->openAPINullablesSetToNull, 'role_removal_indices');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('role_removal_indices', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['role_removal_indices'] = $role_removal_indices;

        return $this;
    }

    /**
     * Gets document_download_option
     *
     * @return string|null
     */
    public function getDocumentDownloadOption()
    {
        return $this->container['document_download_option'];
    }

    /**
     * Sets document_download_option
     *
     * @param string|null $document_download_option document_download_option
     *
     * @return self
     */
    public function setDocumentDownloadOption($document_download_option)
    {
        if (is_null($document_download_option)) {
            array_push($this->openAPINullablesSetToNull, 'document_download_option');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_download_option', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDocumentDownloadOptionAllowableValues();
        if (!is_null($document_download_option) && !in_array($document_download_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_download_option', must be one of '%s'",
                    $document_download_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_download_option'] = $document_download_option;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return array<string,string>|null
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param array<string,string>|null $meta_data meta_data
     *
     * @return self
     */
    public function setMetaData($meta_data)
    {
        if (is_null($meta_data)) {
            array_push($this->openAPINullablesSetToNull, 'meta_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets recipient_notification_settings
     *
     * @return \BoldSign\Model\RecipientNotificationSettings|null
     */
    public function getRecipientNotificationSettings()
    {
        return $this->container['recipient_notification_settings'];
    }

    /**
     * Sets recipient_notification_settings
     *
     * @param \BoldSign\Model\RecipientNotificationSettings|null $recipient_notification_settings recipient_notification_settings
     *
     * @return self
     */
    public function setRecipientNotificationSettings($recipient_notification_settings)
    {
        if (is_null($recipient_notification_settings)) {
            throw new \InvalidArgumentException('non-nullable recipient_notification_settings cannot be null');
        }
        $this->container['recipient_notification_settings'] = $recipient_notification_settings;

        return $this;
    }

    /**
     * Gets form_groups
     *
     * @return \BoldSign\Model\FormGroup[]|null
     */
    public function getFormGroups()
    {
        return $this->container['form_groups'];
    }

    /**
     * Sets form_groups
     *
     * @param \BoldSign\Model\FormGroup[]|null $form_groups form_groups
     *
     * @return self
     */
    public function setFormGroups($form_groups)
    {
        if (is_null($form_groups)) {
            array_push($this->openAPINullablesSetToNull, 'form_groups');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_groups', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_groups'] = $form_groups;

        return $this;
    }

    /**
     * Gets remove_form_fields
     *
     * @return string[]|null
     */
    public function getRemoveFormFields()
    {
        return $this->container['remove_form_fields'];
    }

    /**
     * Sets remove_form_fields
     *
     * @param string[]|null $remove_form_fields remove_form_fields
     *
     * @return self
     */
    public function setRemoveFormFields($remove_form_fields)
    {
        if (is_null($remove_form_fields)) {
            array_push($this->openAPINullablesSetToNull, 'remove_form_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remove_form_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remove_form_fields'] = $remove_form_fields;

        return $this;
    }

    /**
     * Gets enable_audit_trail_localization
     *
     * @return bool|null
     */
    public function getEnableAuditTrailLocalization()
    {
        return $this->container['enable_audit_trail_localization'];
    }

    /**
     * Sets enable_audit_trail_localization
     *
     * @param bool|null $enable_audit_trail_localization enable_audit_trail_localization
     *
     * @return self
     */
    public function setEnableAuditTrailLocalization($enable_audit_trail_localization)
    {
        if (is_null($enable_audit_trail_localization)) {
            array_push($this->openAPINullablesSetToNull, 'enable_audit_trail_localization');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_audit_trail_localization', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_audit_trail_localization'] = $enable_audit_trail_localization;

        return $this;
    }

    /**
     * Gets download_file_name
     *
     * @return string|null
     */
    public function getDownloadFileName()
    {
        return $this->container['download_file_name'];
    }

    /**
     * Sets download_file_name
     *
     * @param string|null $download_file_name download_file_name
     *
     * @return self
     */
    public function setDownloadFileName($download_file_name)
    {
        if (is_null($download_file_name)) {
            array_push($this->openAPINullablesSetToNull, 'download_file_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('download_file_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($download_file_name) && (mb_strlen($download_file_name) > 250)) {
            throw new \InvalidArgumentException('invalid length for $download_file_name when calling SendForSignFromTemplateForm., must be smaller than or equal to 250.');
        }
        if (!is_null($download_file_name) && (mb_strlen($download_file_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $download_file_name when calling SendForSignFromTemplateForm., must be bigger than or equal to 0.');
        }

        $this->container['download_file_name'] = $download_file_name;

        return $this;
    }

    /**
     * Gets scheduled_send_time
     *
     * @return int|null
     */
    public function getScheduledSendTime()
    {
        return $this->container['scheduled_send_time'];
    }

    /**
     * Sets scheduled_send_time
     *
     * @param int|null $scheduled_send_time scheduled_send_time
     *
     * @return self
     */
    public function setScheduledSendTime($scheduled_send_time)
    {
        if (is_null($scheduled_send_time)) {
            array_push($this->openAPINullablesSetToNull, 'scheduled_send_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduled_send_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduled_send_time'] = $scheduled_send_time;

        return $this;
    }

    /**
     * Gets allow_scheduled_send
     *
     * @return bool|null
     */
    public function getAllowScheduledSend()
    {
        return $this->container['allow_scheduled_send'];
    }

    /**
     * Sets allow_scheduled_send
     *
     * @param bool|null $allow_scheduled_send allow_scheduled_send
     *
     * @return self
     */
    public function setAllowScheduledSend($allow_scheduled_send)
    {
        if (is_null($allow_scheduled_send)) {
            throw new \InvalidArgumentException('non-nullable allow_scheduled_send cannot be null');
        }
        $this->container['allow_scheduled_send'] = $allow_scheduled_send;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


