<?php
/**
 * Template
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * Template Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Template implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Template';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'document_id' => 'string',
        'sender_detail' => '\BoldSign\Model\TemplateSenderDetails',
        'cc_details' => '\BoldSign\Model\TemplateCC[]',
        'created_date' => 'int',
        'activity_date' => 'int',
        'activity_by' => 'string',
        'message_title' => 'string',
        'status' => 'string',
        'signer_details' => '\BoldSign\Model\TemplateSignerDetails[]',
        'enable_signing_order' => 'bool',
        'template_name' => 'string',
        'template_description' => 'string',
        'access_type' => 'string',
        'access_tid' => 'string',
        'is_template' => 'bool',
        'behalf_of' => '\BoldSign\Model\BehalfOf',
        'template_labels' => 'string[]',
        'labels' => 'string[]',
        'brand_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'document_id' => null,
        'sender_detail' => null,
        'cc_details' => null,
        'created_date' => 'int64',
        'activity_date' => 'int64',
        'activity_by' => null,
        'message_title' => null,
        'status' => null,
        'signer_details' => null,
        'enable_signing_order' => null,
        'template_name' => null,
        'template_description' => null,
        'access_type' => null,
        'access_tid' => null,
        'is_template' => null,
        'behalf_of' => null,
        'template_labels' => null,
        'labels' => null,
        'brand_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'document_id' => true,
        'sender_detail' => false,
        'cc_details' => true,
        'created_date' => false,
        'activity_date' => false,
        'activity_by' => true,
        'message_title' => true,
        'status' => false,
        'signer_details' => true,
        'enable_signing_order' => false,
        'template_name' => true,
        'template_description' => true,
        'access_type' => false,
        'access_tid' => true,
        'is_template' => false,
        'behalf_of' => false,
        'template_labels' => true,
        'labels' => true,
        'brand_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_id' => 'documentId',
        'sender_detail' => 'senderDetail',
        'cc_details' => 'ccDetails',
        'created_date' => 'createdDate',
        'activity_date' => 'activityDate',
        'activity_by' => 'activityBy',
        'message_title' => 'messageTitle',
        'status' => 'status',
        'signer_details' => 'signerDetails',
        'enable_signing_order' => 'enableSigningOrder',
        'template_name' => 'templateName',
        'template_description' => 'templateDescription',
        'access_type' => 'accessType',
        'access_tid' => 'accessTid',
        'is_template' => 'isTemplate',
        'behalf_of' => 'behalfOf',
        'template_labels' => 'templateLabels',
        'labels' => 'labels',
        'brand_id' => 'brandId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_id' => 'setDocumentId',
        'sender_detail' => 'setSenderDetail',
        'cc_details' => 'setCcDetails',
        'created_date' => 'setCreatedDate',
        'activity_date' => 'setActivityDate',
        'activity_by' => 'setActivityBy',
        'message_title' => 'setMessageTitle',
        'status' => 'setStatus',
        'signer_details' => 'setSignerDetails',
        'enable_signing_order' => 'setEnableSigningOrder',
        'template_name' => 'setTemplateName',
        'template_description' => 'setTemplateDescription',
        'access_type' => 'setAccessType',
        'access_tid' => 'setAccessTid',
        'is_template' => 'setIsTemplate',
        'behalf_of' => 'setBehalfOf',
        'template_labels' => 'setTemplateLabels',
        'labels' => 'setLabels',
        'brand_id' => 'setBrandId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_id' => 'getDocumentId',
        'sender_detail' => 'getSenderDetail',
        'cc_details' => 'getCcDetails',
        'created_date' => 'getCreatedDate',
        'activity_date' => 'getActivityDate',
        'activity_by' => 'getActivityBy',
        'message_title' => 'getMessageTitle',
        'status' => 'getStatus',
        'signer_details' => 'getSignerDetails',
        'enable_signing_order' => 'getEnableSigningOrder',
        'template_name' => 'getTemplateName',
        'template_description' => 'getTemplateDescription',
        'access_type' => 'getAccessType',
        'access_tid' => 'getAccessTid',
        'is_template' => 'getIsTemplate',
        'behalf_of' => 'getBehalfOf',
        'template_labels' => 'getTemplateLabels',
        'labels' => 'getLabels',
        'brand_id' => 'getBrandId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_IN_PROGRESS = 'InProgress';
    public const STATUS_COMPLETED = 'Completed';
    public const STATUS_DECLINED = 'Declined';
    public const STATUS_EXPIRED = 'Expired';
    public const STATUS_REVOKED = 'Revoked';
    public const STATUS_DRAFT = 'Draft';
    public const STATUS_SCHEDULED = 'Scheduled';
    public const ACCESS_TYPE__USE = 'Use';
    public const ACCESS_TYPE_EDIT = 'Edit';
    public const ACCESS_TYPE_NONE = 'None';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_IN_PROGRESS,
            self::STATUS_COMPLETED,
            self::STATUS_DECLINED,
            self::STATUS_EXPIRED,
            self::STATUS_REVOKED,
            self::STATUS_DRAFT,
            self::STATUS_SCHEDULED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessTypeAllowableValues()
    {
        return [
            self::ACCESS_TYPE__USE,
            self::ACCESS_TYPE_EDIT,
            self::ACCESS_TYPE_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('document_id', $data ?? [], null);
        $this->setIfExists('sender_detail', $data ?? [], null);
        $this->setIfExists('cc_details', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('activity_date', $data ?? [], null);
        $this->setIfExists('activity_by', $data ?? [], null);
        $this->setIfExists('message_title', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('signer_details', $data ?? [], null);
        $this->setIfExists('enable_signing_order', $data ?? [], null);
        $this->setIfExists('template_name', $data ?? [], null);
        $this->setIfExists('template_description', $data ?? [], null);
        $this->setIfExists('access_type', $data ?? [], null);
        $this->setIfExists('access_tid', $data ?? [], null);
        $this->setIfExists('is_template', $data ?? [], false);
        $this->setIfExists('behalf_of', $data ?? [], null);
        $this->setIfExists('template_labels', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('brand_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessTypeAllowableValues();
        if (!is_null($this->container['access_type']) && !in_array($this->container['access_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'access_type', must be one of '%s'",
                $this->container['access_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_id
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string|null $document_id document_id
     *
     * @return self
     */
    public function setDocumentId($document_id)
    {
        if (is_null($document_id)) {
            array_push($this->openAPINullablesSetToNull, 'document_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets sender_detail
     *
     * @return \BoldSign\Model\TemplateSenderDetails|null
     */
    public function getSenderDetail()
    {
        return $this->container['sender_detail'];
    }

    /**
     * Sets sender_detail
     *
     * @param \BoldSign\Model\TemplateSenderDetails|null $sender_detail sender_detail
     *
     * @return self
     */
    public function setSenderDetail($sender_detail)
    {
        if (is_null($sender_detail)) {
            throw new \InvalidArgumentException('non-nullable sender_detail cannot be null');
        }
        $this->container['sender_detail'] = $sender_detail;

        return $this;
    }

    /**
     * Gets cc_details
     *
     * @return \BoldSign\Model\TemplateCC[]|null
     */
    public function getCcDetails()
    {
        return $this->container['cc_details'];
    }

    /**
     * Sets cc_details
     *
     * @param \BoldSign\Model\TemplateCC[]|null $cc_details cc_details
     *
     * @return self
     */
    public function setCcDetails($cc_details)
    {
        if (is_null($cc_details)) {
            array_push($this->openAPINullablesSetToNull, 'cc_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cc_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cc_details'] = $cc_details;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets activity_date
     *
     * @return int|null
     */
    public function getActivityDate()
    {
        return $this->container['activity_date'];
    }

    /**
     * Sets activity_date
     *
     * @param int|null $activity_date activity_date
     *
     * @return self
     */
    public function setActivityDate($activity_date)
    {
        if (is_null($activity_date)) {
            throw new \InvalidArgumentException('non-nullable activity_date cannot be null');
        }
        $this->container['activity_date'] = $activity_date;

        return $this;
    }

    /**
     * Gets activity_by
     *
     * @return string|null
     */
    public function getActivityBy()
    {
        return $this->container['activity_by'];
    }

    /**
     * Sets activity_by
     *
     * @param string|null $activity_by activity_by
     *
     * @return self
     */
    public function setActivityBy($activity_by)
    {
        if (is_null($activity_by)) {
            array_push($this->openAPINullablesSetToNull, 'activity_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('activity_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['activity_by'] = $activity_by;

        return $this;
    }

    /**
     * Gets message_title
     *
     * @return string|null
     */
    public function getMessageTitle()
    {
        return $this->container['message_title'];
    }

    /**
     * Sets message_title
     *
     * @param string|null $message_title message_title
     *
     * @return self
     */
    public function setMessageTitle($message_title)
    {
        if (is_null($message_title)) {
            array_push($this->openAPINullablesSetToNull, 'message_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message_title'] = $message_title;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets signer_details
     *
     * @return \BoldSign\Model\TemplateSignerDetails[]|null
     */
    public function getSignerDetails()
    {
        return $this->container['signer_details'];
    }

    /**
     * Sets signer_details
     *
     * @param \BoldSign\Model\TemplateSignerDetails[]|null $signer_details signer_details
     *
     * @return self
     */
    public function setSignerDetails($signer_details)
    {
        if (is_null($signer_details)) {
            array_push($this->openAPINullablesSetToNull, 'signer_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('signer_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['signer_details'] = $signer_details;

        return $this;
    }

    /**
     * Gets enable_signing_order
     *
     * @return bool|null
     */
    public function getEnableSigningOrder()
    {
        return $this->container['enable_signing_order'];
    }

    /**
     * Sets enable_signing_order
     *
     * @param bool|null $enable_signing_order enable_signing_order
     *
     * @return self
     */
    public function setEnableSigningOrder($enable_signing_order)
    {
        if (is_null($enable_signing_order)) {
            throw new \InvalidArgumentException('non-nullable enable_signing_order cannot be null');
        }
        $this->container['enable_signing_order'] = $enable_signing_order;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string|null
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string|null $template_name template_name
     *
     * @return self
     */
    public function setTemplateName($template_name)
    {
        if (is_null($template_name)) {
            array_push($this->openAPINullablesSetToNull, 'template_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets template_description
     *
     * @return string|null
     */
    public function getTemplateDescription()
    {
        return $this->container['template_description'];
    }

    /**
     * Sets template_description
     *
     * @param string|null $template_description template_description
     *
     * @return self
     */
    public function setTemplateDescription($template_description)
    {
        if (is_null($template_description)) {
            array_push($this->openAPINullablesSetToNull, 'template_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_description'] = $template_description;

        return $this;
    }

    /**
     * Gets access_type
     *
     * @return string|null
     */
    public function getAccessType()
    {
        return $this->container['access_type'];
    }

    /**
     * Sets access_type
     *
     * @param string|null $access_type access_type
     *
     * @return self
     */
    public function setAccessType($access_type)
    {
        if (is_null($access_type)) {
            throw new \InvalidArgumentException('non-nullable access_type cannot be null');
        }
        $allowedValues = $this->getAccessTypeAllowableValues();
        if (!in_array($access_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'access_type', must be one of '%s'",
                    $access_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['access_type'] = $access_type;

        return $this;
    }

    /**
     * Gets access_tid
     *
     * @return string|null
     */
    public function getAccessTid()
    {
        return $this->container['access_tid'];
    }

    /**
     * Sets access_tid
     *
     * @param string|null $access_tid access_tid
     *
     * @return self
     */
    public function setAccessTid($access_tid)
    {
        if (is_null($access_tid)) {
            array_push($this->openAPINullablesSetToNull, 'access_tid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('access_tid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['access_tid'] = $access_tid;

        return $this;
    }

    /**
     * Gets is_template
     *
     * @return bool|null
     */
    public function getIsTemplate()
    {
        return $this->container['is_template'];
    }

    /**
     * Sets is_template
     *
     * @param bool|null $is_template is_template
     *
     * @return self
     */
    public function setIsTemplate($is_template)
    {
        if (is_null($is_template)) {
            throw new \InvalidArgumentException('non-nullable is_template cannot be null');
        }
        $this->container['is_template'] = $is_template;

        return $this;
    }

    /**
     * Gets behalf_of
     *
     * @return \BoldSign\Model\BehalfOf|null
     */
    public function getBehalfOf()
    {
        return $this->container['behalf_of'];
    }

    /**
     * Sets behalf_of
     *
     * @param \BoldSign\Model\BehalfOf|null $behalf_of behalf_of
     *
     * @return self
     */
    public function setBehalfOf($behalf_of)
    {
        if (is_null($behalf_of)) {
            throw new \InvalidArgumentException('non-nullable behalf_of cannot be null');
        }
        $this->container['behalf_of'] = $behalf_of;

        return $this;
    }

    /**
     * Gets template_labels
     *
     * @return string[]|null
     */
    public function getTemplateLabels()
    {
        return $this->container['template_labels'];
    }

    /**
     * Sets template_labels
     *
     * @param string[]|null $template_labels template_labels
     *
     * @return self
     */
    public function setTemplateLabels($template_labels)
    {
        if (is_null($template_labels)) {
            array_push($this->openAPINullablesSetToNull, 'template_labels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_labels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_labels'] = $template_labels;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[]|null $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            array_push($this->openAPINullablesSetToNull, 'labels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('labels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string|null $brand_id brand_id
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        if (is_null($brand_id)) {
            array_push($this->openAPINullablesSetToNull, 'brand_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_id'] = $brand_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


