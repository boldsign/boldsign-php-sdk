<?php
/**
 * TemplateRole
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * TemplateRole Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TemplateRole implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TemplateRole';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'index' => 'int',
        'name' => 'string',
        'default_signer_name' => 'string',
        'default_signer_email' => 'string',
        'signer_order' => 'int',
        'signer_type' => 'string',
        'host_email' => 'string',
        'language' => 'int',
        'locale' => 'string',
        'impose_authentication' => 'string',
        'phone_number' => '\BoldSign\Model\PhoneNumber',
        'delivery_mode' => 'string',
        'allow_field_configuration' => 'bool',
        'form_fields' => '\BoldSign\Model\FormField[]',
        'allow_role_edit' => 'bool',
        'allow_role_delete' => 'bool',
        'recipient_notification_settings' => '\BoldSign\Model\RecipientNotificationSettings',
        'enable_qes' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'index' => 'int32',
        'name' => null,
        'default_signer_name' => null,
        'default_signer_email' => null,
        'signer_order' => 'int32',
        'signer_type' => null,
        'host_email' => null,
        'language' => 'int32',
        'locale' => null,
        'impose_authentication' => null,
        'phone_number' => null,
        'delivery_mode' => null,
        'allow_field_configuration' => null,
        'form_fields' => null,
        'allow_role_edit' => null,
        'allow_role_delete' => null,
        'recipient_notification_settings' => null,
        'enable_qes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'index' => false,
        'name' => true,
        'default_signer_name' => true,
        'default_signer_email' => true,
        'signer_order' => false,
        'signer_type' => false,
        'host_email' => true,
        'language' => false,
        'locale' => false,
        'impose_authentication' => false,
        'phone_number' => false,
        'delivery_mode' => false,
        'allow_field_configuration' => false,
        'form_fields' => true,
        'allow_role_edit' => false,
        'allow_role_delete' => false,
        'recipient_notification_settings' => false,
        'enable_qes' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'index' => 'index',
        'name' => 'name',
        'default_signer_name' => 'defaultSignerName',
        'default_signer_email' => 'defaultSignerEmail',
        'signer_order' => 'signerOrder',
        'signer_type' => 'signerType',
        'host_email' => 'hostEmail',
        'language' => 'language',
        'locale' => 'locale',
        'impose_authentication' => 'imposeAuthentication',
        'phone_number' => 'phoneNumber',
        'delivery_mode' => 'deliveryMode',
        'allow_field_configuration' => 'allowFieldConfiguration',
        'form_fields' => 'formFields',
        'allow_role_edit' => 'allowRoleEdit',
        'allow_role_delete' => 'allowRoleDelete',
        'recipient_notification_settings' => 'recipientNotificationSettings',
        'enable_qes' => 'enableQes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'index' => 'setIndex',
        'name' => 'setName',
        'default_signer_name' => 'setDefaultSignerName',
        'default_signer_email' => 'setDefaultSignerEmail',
        'signer_order' => 'setSignerOrder',
        'signer_type' => 'setSignerType',
        'host_email' => 'setHostEmail',
        'language' => 'setLanguage',
        'locale' => 'setLocale',
        'impose_authentication' => 'setImposeAuthentication',
        'phone_number' => 'setPhoneNumber',
        'delivery_mode' => 'setDeliveryMode',
        'allow_field_configuration' => 'setAllowFieldConfiguration',
        'form_fields' => 'setFormFields',
        'allow_role_edit' => 'setAllowRoleEdit',
        'allow_role_delete' => 'setAllowRoleDelete',
        'recipient_notification_settings' => 'setRecipientNotificationSettings',
        'enable_qes' => 'setEnableQes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'index' => 'getIndex',
        'name' => 'getName',
        'default_signer_name' => 'getDefaultSignerName',
        'default_signer_email' => 'getDefaultSignerEmail',
        'signer_order' => 'getSignerOrder',
        'signer_type' => 'getSignerType',
        'host_email' => 'getHostEmail',
        'language' => 'getLanguage',
        'locale' => 'getLocale',
        'impose_authentication' => 'getImposeAuthentication',
        'phone_number' => 'getPhoneNumber',
        'delivery_mode' => 'getDeliveryMode',
        'allow_field_configuration' => 'getAllowFieldConfiguration',
        'form_fields' => 'getFormFields',
        'allow_role_edit' => 'getAllowRoleEdit',
        'allow_role_delete' => 'getAllowRoleDelete',
        'recipient_notification_settings' => 'getRecipientNotificationSettings',
        'enable_qes' => 'getEnableQes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SIGNER_TYPE_SIGNER = 'Signer';
    public const SIGNER_TYPE_REVIEWER = 'Reviewer';
    public const SIGNER_TYPE_IN_PERSON_SIGNER = 'InPersonSigner';
    public const LANGUAGE_0 = 0;
    public const LANGUAGE_1 = 1;
    public const LANGUAGE_2 = 2;
    public const LANGUAGE_3 = 3;
    public const LANGUAGE_4 = 4;
    public const LANGUAGE_5 = 5;
    public const LANGUAGE_6 = 6;
    public const LANGUAGE_7 = 7;
    public const LANGUAGE_8 = 8;
    public const LANGUAGE_9 = 9;
    public const LANGUAGE_10 = 10;
    public const LANGUAGE_11 = 11;
    public const LANGUAGE_12 = 12;
    public const LANGUAGE_13 = 13;
    public const LANGUAGE_14 = 14;
    public const LANGUAGE_15 = 15;
    public const LOCALE_EN = 'EN';
    public const LOCALE_NO = 'NO';
    public const LOCALE_FR = 'FR';
    public const LOCALE_DE = 'DE';
    public const LOCALE_ES = 'ES';
    public const LOCALE_BG = 'BG';
    public const LOCALE_CS = 'CS';
    public const LOCALE_DA = 'DA';
    public const LOCALE_IT = 'IT';
    public const LOCALE_NL = 'NL';
    public const LOCALE_PL = 'PL';
    public const LOCALE_PT = 'PT';
    public const LOCALE_RO = 'RO';
    public const LOCALE_RU = 'RU';
    public const LOCALE_SV = 'SV';
    public const LOCALE__DEFAULT = 'Default';
    public const IMPOSE_AUTHENTICATION_NONE = 'None';
    public const IMPOSE_AUTHENTICATION_EMAIL_OTP = 'EmailOTP';
    public const IMPOSE_AUTHENTICATION_ACCESS_CODE = 'AccessCode';
    public const IMPOSE_AUTHENTICATION_SMSOTP = 'SMSOTP';
    public const IMPOSE_AUTHENTICATION_ID_VERIFICATION = 'IdVerification';
    public const DELIVERY_MODE_EMAIL = 'Email';
    public const DELIVERY_MODE_SMS = 'SMS';
    public const DELIVERY_MODE_EMAIL_AND_SMS = 'EmailAndSMS';
    public const DELIVERY_MODE_WHATS_APP = 'WhatsApp';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSignerTypeAllowableValues()
    {
        return [
            self::SIGNER_TYPE_SIGNER,
            self::SIGNER_TYPE_REVIEWER,
            self::SIGNER_TYPE_IN_PERSON_SIGNER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_0,
            self::LANGUAGE_1,
            self::LANGUAGE_2,
            self::LANGUAGE_3,
            self::LANGUAGE_4,
            self::LANGUAGE_5,
            self::LANGUAGE_6,
            self::LANGUAGE_7,
            self::LANGUAGE_8,
            self::LANGUAGE_9,
            self::LANGUAGE_10,
            self::LANGUAGE_11,
            self::LANGUAGE_12,
            self::LANGUAGE_13,
            self::LANGUAGE_14,
            self::LANGUAGE_15,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocaleAllowableValues()
    {
        return [
            self::LOCALE_EN,
            self::LOCALE_NO,
            self::LOCALE_FR,
            self::LOCALE_DE,
            self::LOCALE_ES,
            self::LOCALE_BG,
            self::LOCALE_CS,
            self::LOCALE_DA,
            self::LOCALE_IT,
            self::LOCALE_NL,
            self::LOCALE_PL,
            self::LOCALE_PT,
            self::LOCALE_RO,
            self::LOCALE_RU,
            self::LOCALE_SV,
            self::LOCALE__DEFAULT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImposeAuthenticationAllowableValues()
    {
        return [
            self::IMPOSE_AUTHENTICATION_NONE,
            self::IMPOSE_AUTHENTICATION_EMAIL_OTP,
            self::IMPOSE_AUTHENTICATION_ACCESS_CODE,
            self::IMPOSE_AUTHENTICATION_SMSOTP,
            self::IMPOSE_AUTHENTICATION_ID_VERIFICATION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryModeAllowableValues()
    {
        return [
            self::DELIVERY_MODE_EMAIL,
            self::DELIVERY_MODE_SMS,
            self::DELIVERY_MODE_EMAIL_AND_SMS,
            self::DELIVERY_MODE_WHATS_APP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('index', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('default_signer_name', $data ?? [], null);
        $this->setIfExists('default_signer_email', $data ?? [], null);
        $this->setIfExists('signer_order', $data ?? [], null);
        $this->setIfExists('signer_type', $data ?? [], null);
        $this->setIfExists('host_email', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('impose_authentication', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('delivery_mode', $data ?? [], null);
        $this->setIfExists('allow_field_configuration', $data ?? [], null);
        $this->setIfExists('form_fields', $data ?? [], null);
        $this->setIfExists('allow_role_edit', $data ?? [], null);
        $this->setIfExists('allow_role_delete', $data ?? [], null);
        $this->setIfExists('recipient_notification_settings', $data ?? [], null);
        $this->setIfExists('enable_qes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['index'] === null) {
            $invalidProperties[] = "'index' can't be null";
        }
        if (($this->container['index'] > 50)) {
            $invalidProperties[] = "invalid value for 'index', must be smaller than or equal to 50.";
        }

        if (($this->container['index'] < 1)) {
            $invalidProperties[] = "invalid value for 'index', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['default_signer_name']) && (mb_strlen($this->container['default_signer_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'default_signer_name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['default_signer_name']) && (mb_strlen($this->container['default_signer_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'default_signer_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['default_signer_email']) && (mb_strlen($this->container['default_signer_email']) > 250)) {
            $invalidProperties[] = "invalid value for 'default_signer_email', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['default_signer_email']) && (mb_strlen($this->container['default_signer_email']) < 0)) {
            $invalidProperties[] = "invalid value for 'default_signer_email', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getSignerTypeAllowableValues();
        if (!is_null($this->container['signer_type']) && !in_array($this->container['signer_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'signer_type', must be one of '%s'",
                $this->container['signer_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'language', must be one of '%s'",
                $this->container['language'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocaleAllowableValues();
        if (!is_null($this->container['locale']) && !in_array($this->container['locale'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'locale', must be one of '%s'",
                $this->container['locale'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getImposeAuthenticationAllowableValues();
        if (!is_null($this->container['impose_authentication']) && !in_array($this->container['impose_authentication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'impose_authentication', must be one of '%s'",
                $this->container['impose_authentication'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!is_null($this->container['delivery_mode']) && !in_array($this->container['delivery_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'delivery_mode', must be one of '%s'",
                $this->container['delivery_mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index index
     *
     * @return self
     */
    public function setIndex($index)
    {
        if (is_null($index)) {
            throw new \InvalidArgumentException('non-nullable index cannot be null');
        }

        if (($index > 50)) {
            throw new \InvalidArgumentException('invalid value for $index when calling TemplateRole., must be smaller than or equal to 50.');
        }
        if (($index < 1)) {
            throw new \InvalidArgumentException('invalid value for $index when calling TemplateRole., must be bigger than or equal to 1.');
        }

        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling TemplateRole., must be smaller than or equal to 100.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling TemplateRole., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets default_signer_name
     *
     * @return string|null
     */
    public function getDefaultSignerName()
    {
        return $this->container['default_signer_name'];
    }

    /**
     * Sets default_signer_name
     *
     * @param string|null $default_signer_name default_signer_name
     *
     * @return self
     */
    public function setDefaultSignerName($default_signer_name)
    {
        if (is_null($default_signer_name)) {
            array_push($this->openAPINullablesSetToNull, 'default_signer_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_signer_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($default_signer_name) && (mb_strlen($default_signer_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $default_signer_name when calling TemplateRole., must be smaller than or equal to 100.');
        }
        if (!is_null($default_signer_name) && (mb_strlen($default_signer_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $default_signer_name when calling TemplateRole., must be bigger than or equal to 0.');
        }

        $this->container['default_signer_name'] = $default_signer_name;

        return $this;
    }

    /**
     * Gets default_signer_email
     *
     * @return string|null
     */
    public function getDefaultSignerEmail()
    {
        return $this->container['default_signer_email'];
    }

    /**
     * Sets default_signer_email
     *
     * @param string|null $default_signer_email default_signer_email
     *
     * @return self
     */
    public function setDefaultSignerEmail($default_signer_email)
    {
        if (is_null($default_signer_email)) {
            array_push($this->openAPINullablesSetToNull, 'default_signer_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_signer_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($default_signer_email) && (mb_strlen($default_signer_email) > 250)) {
            throw new \InvalidArgumentException('invalid length for $default_signer_email when calling TemplateRole., must be smaller than or equal to 250.');
        }
        if (!is_null($default_signer_email) && (mb_strlen($default_signer_email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $default_signer_email when calling TemplateRole., must be bigger than or equal to 0.');
        }

        $this->container['default_signer_email'] = $default_signer_email;

        return $this;
    }

    /**
     * Gets signer_order
     *
     * @return int|null
     */
    public function getSignerOrder()
    {
        return $this->container['signer_order'];
    }

    /**
     * Sets signer_order
     *
     * @param int|null $signer_order signer_order
     *
     * @return self
     */
    public function setSignerOrder($signer_order)
    {
        if (is_null($signer_order)) {
            throw new \InvalidArgumentException('non-nullable signer_order cannot be null');
        }
        $this->container['signer_order'] = $signer_order;

        return $this;
    }

    /**
     * Gets signer_type
     *
     * @return string|null
     */
    public function getSignerType()
    {
        return $this->container['signer_type'];
    }

    /**
     * Sets signer_type
     *
     * @param string|null $signer_type signer_type
     *
     * @return self
     */
    public function setSignerType($signer_type)
    {
        if (is_null($signer_type)) {
            throw new \InvalidArgumentException('non-nullable signer_type cannot be null');
        }
        $allowedValues = $this->getSignerTypeAllowableValues();
        if (!in_array($signer_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'signer_type', must be one of '%s'",
                    $signer_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['signer_type'] = $signer_type;

        return $this;
    }

    /**
     * Gets host_email
     *
     * @return string|null
     */
    public function getHostEmail()
    {
        return $this->container['host_email'];
    }

    /**
     * Sets host_email
     *
     * @param string|null $host_email host_email
     *
     * @return self
     */
    public function setHostEmail($host_email)
    {
        if (is_null($host_email)) {
            array_push($this->openAPINullablesSetToNull, 'host_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('host_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['host_email'] = $host_email;

        return $this;
    }

    /**
     * Gets language
     *
     * @return int|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param int|null $language <p>Description:</p><ul><li><i>0</i> - None</li><li><i>1</i> - English</li><li><i>2</i> - Spanish</li><li><i>3</i> - German</li><li><i>4</i> - French</li><li><i>5</i> - Romanian</li><li><i>6</i> - Norwegian</li><li><i>7</i> - Bulgarian</li><li><i>8</i> - Italian</li><li><i>9</i> - Danish</li><li><i>10</i> - Polish</li><li><i>11</i> - Portuguese</li><li><i>12</i> - Czech</li><li><i>13</i> - Dutch</li><li><i>14</i> - Swedish</li><li><i>15</i> - Russian</li></ul>
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $allowedValues = $this->getLanguageAllowableValues();
        if (!in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'language', must be one of '%s'",
                    $language,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $allowedValues = $this->getLocaleAllowableValues();
        if (!in_array($locale, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'locale', must be one of '%s'",
                    $locale,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets impose_authentication
     *
     * @return string|null
     */
    public function getImposeAuthentication()
    {
        return $this->container['impose_authentication'];
    }

    /**
     * Sets impose_authentication
     *
     * @param string|null $impose_authentication impose_authentication
     *
     * @return self
     */
    public function setImposeAuthentication($impose_authentication)
    {
        if (is_null($impose_authentication)) {
            throw new \InvalidArgumentException('non-nullable impose_authentication cannot be null');
        }
        $allowedValues = $this->getImposeAuthenticationAllowableValues();
        if (!in_array($impose_authentication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'impose_authentication', must be one of '%s'",
                    $impose_authentication,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['impose_authentication'] = $impose_authentication;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return \BoldSign\Model\PhoneNumber|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param \BoldSign\Model\PhoneNumber|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets delivery_mode
     *
     * @return string|null
     */
    public function getDeliveryMode()
    {
        return $this->container['delivery_mode'];
    }

    /**
     * Sets delivery_mode
     *
     * @param string|null $delivery_mode delivery_mode
     *
     * @return self
     */
    public function setDeliveryMode($delivery_mode)
    {
        if (is_null($delivery_mode)) {
            throw new \InvalidArgumentException('non-nullable delivery_mode cannot be null');
        }
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!in_array($delivery_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'delivery_mode', must be one of '%s'",
                    $delivery_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_mode'] = $delivery_mode;

        return $this;
    }

    /**
     * Gets allow_field_configuration
     *
     * @return bool|null
     */
    public function getAllowFieldConfiguration()
    {
        return $this->container['allow_field_configuration'];
    }

    /**
     * Sets allow_field_configuration
     *
     * @param bool|null $allow_field_configuration allow_field_configuration
     *
     * @return self
     */
    public function setAllowFieldConfiguration($allow_field_configuration)
    {
        if (is_null($allow_field_configuration)) {
            throw new \InvalidArgumentException('non-nullable allow_field_configuration cannot be null');
        }
        $this->container['allow_field_configuration'] = $allow_field_configuration;

        return $this;
    }

    /**
     * Gets form_fields
     *
     * @return \BoldSign\Model\FormField[]|null
     */
    public function getFormFields()
    {
        return $this->container['form_fields'];
    }

    /**
     * Sets form_fields
     *
     * @param \BoldSign\Model\FormField[]|null $form_fields form_fields
     *
     * @return self
     */
    public function setFormFields($form_fields)
    {
        if (is_null($form_fields)) {
            array_push($this->openAPINullablesSetToNull, 'form_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('form_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['form_fields'] = $form_fields;

        return $this;
    }

    /**
     * Gets allow_role_edit
     *
     * @return bool|null
     */
    public function getAllowRoleEdit()
    {
        return $this->container['allow_role_edit'];
    }

    /**
     * Sets allow_role_edit
     *
     * @param bool|null $allow_role_edit allow_role_edit
     *
     * @return self
     */
    public function setAllowRoleEdit($allow_role_edit)
    {
        if (is_null($allow_role_edit)) {
            throw new \InvalidArgumentException('non-nullable allow_role_edit cannot be null');
        }
        $this->container['allow_role_edit'] = $allow_role_edit;

        return $this;
    }

    /**
     * Gets allow_role_delete
     *
     * @return bool|null
     */
    public function getAllowRoleDelete()
    {
        return $this->container['allow_role_delete'];
    }

    /**
     * Sets allow_role_delete
     *
     * @param bool|null $allow_role_delete allow_role_delete
     *
     * @return self
     */
    public function setAllowRoleDelete($allow_role_delete)
    {
        if (is_null($allow_role_delete)) {
            throw new \InvalidArgumentException('non-nullable allow_role_delete cannot be null');
        }
        $this->container['allow_role_delete'] = $allow_role_delete;

        return $this;
    }

    /**
     * Gets recipient_notification_settings
     *
     * @return \BoldSign\Model\RecipientNotificationSettings|null
     */
    public function getRecipientNotificationSettings()
    {
        return $this->container['recipient_notification_settings'];
    }

    /**
     * Sets recipient_notification_settings
     *
     * @param \BoldSign\Model\RecipientNotificationSettings|null $recipient_notification_settings recipient_notification_settings
     *
     * @return self
     */
    public function setRecipientNotificationSettings($recipient_notification_settings)
    {
        if (is_null($recipient_notification_settings)) {
            throw new \InvalidArgumentException('non-nullable recipient_notification_settings cannot be null');
        }
        $this->container['recipient_notification_settings'] = $recipient_notification_settings;

        return $this;
    }

    /**
     * Gets enable_qes
     *
     * @return bool|null
     */
    public function getEnableQes()
    {
        return $this->container['enable_qes'];
    }

    /**
     * Sets enable_qes
     *
     * @param bool|null $enable_qes enable_qes
     *
     * @return self
     */
    public function setEnableQes($enable_qes)
    {
        if (is_null($enable_qes)) {
            array_push($this->openAPINullablesSetToNull, 'enable_qes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_qes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_qes'] = $enable_qes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


