<?php
/**
 * TextTagDefinition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * TextTagDefinition Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TextTagDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TextTagDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'definition_id' => 'string',
        'type' => 'string',
        'signer_index' => 'int',
        'is_required' => 'bool',
        'placeholder' => 'string',
        'field_id' => 'string',
        'font' => '\BoldSign\Model\Font',
        'validation' => '\BoldSign\Model\Validation',
        'size' => '\BoldSign\Model\Size',
        'date_format' => 'string',
        'time_format' => 'string',
        'radio_group_name' => 'string',
        'group_name' => 'string',
        'value' => 'string',
        'dropdown_options' => 'string[]',
        'image_info' => '\BoldSign\Model\ImageInfo',
        'hyperlink_text' => 'string',
        'attachment_info' => '\BoldSign\Model\AttachmentInfo',
        'background_hex_color' => 'string',
        'is_read_only' => 'bool',
        'offset' => '\BoldSign\Model\TextTagOffset',
        'label' => 'string',
        'tab_index' => 'int',
        'data_sync_tag' => 'string',
        'text_align' => 'string',
        'text_direction' => 'string',
        'character_spacing' => 'float',
        'character_limit' => 'int',
        'formula_field_settings' => '\BoldSign\Model\FormulaFieldSettings',
        'resize_option' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'definition_id' => null,
        'type' => null,
        'signer_index' => 'int32',
        'is_required' => null,
        'placeholder' => null,
        'field_id' => null,
        'font' => null,
        'validation' => null,
        'size' => null,
        'date_format' => null,
        'time_format' => null,
        'radio_group_name' => null,
        'group_name' => null,
        'value' => null,
        'dropdown_options' => null,
        'image_info' => null,
        'hyperlink_text' => null,
        'attachment_info' => null,
        'background_hex_color' => null,
        'is_read_only' => null,
        'offset' => null,
        'label' => null,
        'tab_index' => 'int32',
        'data_sync_tag' => null,
        'text_align' => null,
        'text_direction' => null,
        'character_spacing' => 'float',
        'character_limit' => 'int32',
        'formula_field_settings' => null,
        'resize_option' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'definition_id' => false,
        'type' => false,
        'signer_index' => false,
        'is_required' => false,
        'placeholder' => true,
        'field_id' => true,
        'font' => false,
        'validation' => false,
        'size' => false,
        'date_format' => true,
        'time_format' => true,
        'radio_group_name' => true,
        'group_name' => true,
        'value' => true,
        'dropdown_options' => true,
        'image_info' => false,
        'hyperlink_text' => true,
        'attachment_info' => false,
        'background_hex_color' => true,
        'is_read_only' => false,
        'offset' => false,
        'label' => true,
        'tab_index' => true,
        'data_sync_tag' => true,
        'text_align' => false,
        'text_direction' => false,
        'character_spacing' => false,
        'character_limit' => false,
        'formula_field_settings' => false,
        'resize_option' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'definition_id' => 'definitionId',
        'type' => 'type',
        'signer_index' => 'signerIndex',
        'is_required' => 'isRequired',
        'placeholder' => 'placeholder',
        'field_id' => 'fieldId',
        'font' => 'font',
        'validation' => 'validation',
        'size' => 'size',
        'date_format' => 'dateFormat',
        'time_format' => 'timeFormat',
        'radio_group_name' => 'radioGroupName',
        'group_name' => 'groupName',
        'value' => 'value',
        'dropdown_options' => 'dropdownOptions',
        'image_info' => 'imageInfo',
        'hyperlink_text' => 'hyperlinkText',
        'attachment_info' => 'attachmentInfo',
        'background_hex_color' => 'backgroundHexColor',
        'is_read_only' => 'isReadOnly',
        'offset' => 'offset',
        'label' => 'label',
        'tab_index' => 'tabIndex',
        'data_sync_tag' => 'dataSyncTag',
        'text_align' => 'textAlign',
        'text_direction' => 'textDirection',
        'character_spacing' => 'characterSpacing',
        'character_limit' => 'characterLimit',
        'formula_field_settings' => 'formulaFieldSettings',
        'resize_option' => 'resizeOption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'definition_id' => 'setDefinitionId',
        'type' => 'setType',
        'signer_index' => 'setSignerIndex',
        'is_required' => 'setIsRequired',
        'placeholder' => 'setPlaceholder',
        'field_id' => 'setFieldId',
        'font' => 'setFont',
        'validation' => 'setValidation',
        'size' => 'setSize',
        'date_format' => 'setDateFormat',
        'time_format' => 'setTimeFormat',
        'radio_group_name' => 'setRadioGroupName',
        'group_name' => 'setGroupName',
        'value' => 'setValue',
        'dropdown_options' => 'setDropdownOptions',
        'image_info' => 'setImageInfo',
        'hyperlink_text' => 'setHyperlinkText',
        'attachment_info' => 'setAttachmentInfo',
        'background_hex_color' => 'setBackgroundHexColor',
        'is_read_only' => 'setIsReadOnly',
        'offset' => 'setOffset',
        'label' => 'setLabel',
        'tab_index' => 'setTabIndex',
        'data_sync_tag' => 'setDataSyncTag',
        'text_align' => 'setTextAlign',
        'text_direction' => 'setTextDirection',
        'character_spacing' => 'setCharacterSpacing',
        'character_limit' => 'setCharacterLimit',
        'formula_field_settings' => 'setFormulaFieldSettings',
        'resize_option' => 'setResizeOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'definition_id' => 'getDefinitionId',
        'type' => 'getType',
        'signer_index' => 'getSignerIndex',
        'is_required' => 'getIsRequired',
        'placeholder' => 'getPlaceholder',
        'field_id' => 'getFieldId',
        'font' => 'getFont',
        'validation' => 'getValidation',
        'size' => 'getSize',
        'date_format' => 'getDateFormat',
        'time_format' => 'getTimeFormat',
        'radio_group_name' => 'getRadioGroupName',
        'group_name' => 'getGroupName',
        'value' => 'getValue',
        'dropdown_options' => 'getDropdownOptions',
        'image_info' => 'getImageInfo',
        'hyperlink_text' => 'getHyperlinkText',
        'attachment_info' => 'getAttachmentInfo',
        'background_hex_color' => 'getBackgroundHexColor',
        'is_read_only' => 'getIsReadOnly',
        'offset' => 'getOffset',
        'label' => 'getLabel',
        'tab_index' => 'getTabIndex',
        'data_sync_tag' => 'getDataSyncTag',
        'text_align' => 'getTextAlign',
        'text_direction' => 'getTextDirection',
        'character_spacing' => 'getCharacterSpacing',
        'character_limit' => 'getCharacterLimit',
        'formula_field_settings' => 'getFormulaFieldSettings',
        'resize_option' => 'getResizeOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_SIGNATURE = 'Signature';
    public const TYPE_INITIAL = 'Initial';
    public const TYPE_CHECK_BOX = 'CheckBox';
    public const TYPE_TEXT_BOX = 'TextBox';
    public const TYPE_LABEL = 'Label';
    public const TYPE_DATE_SIGNED = 'DateSigned';
    public const TYPE_RADIO_BUTTON = 'RadioButton';
    public const TYPE_IMAGE = 'Image';
    public const TYPE_ATTACHMENT = 'Attachment';
    public const TYPE_EDITABLE_DATE = 'EditableDate';
    public const TYPE_HYPERLINK = 'Hyperlink';
    public const TYPE_DROPDOWN = 'Dropdown';
    public const TYPE_TITLE = 'Title';
    public const TYPE_COMPANY = 'Company';
    public const TYPE_FORMULA = 'Formula';
    public const TEXT_ALIGN_LEFT = 'Left';
    public const TEXT_ALIGN_CENTER = 'Center';
    public const TEXT_ALIGN_RIGHT = 'Right';
    public const TEXT_DIRECTION_LTR = 'LTR';
    public const TEXT_DIRECTION_RTL = 'RTL';
    public const RESIZE_OPTION_GROW_VERTICALLY = 'GrowVertically';
    public const RESIZE_OPTION_GROW_HORIZONTALLY = 'GrowHorizontally';
    public const RESIZE_OPTION_GROW_BOTH = 'GrowBoth';
    public const RESIZE_OPTION_FIXED = 'Fixed';
    public const RESIZE_OPTION_AUTO_RESIZE_FONT = 'AutoResizeFont';
    public const RESIZE_OPTION_NULL = 'null';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SIGNATURE,
            self::TYPE_INITIAL,
            self::TYPE_CHECK_BOX,
            self::TYPE_TEXT_BOX,
            self::TYPE_LABEL,
            self::TYPE_DATE_SIGNED,
            self::TYPE_RADIO_BUTTON,
            self::TYPE_IMAGE,
            self::TYPE_ATTACHMENT,
            self::TYPE_EDITABLE_DATE,
            self::TYPE_HYPERLINK,
            self::TYPE_DROPDOWN,
            self::TYPE_TITLE,
            self::TYPE_COMPANY,
            self::TYPE_FORMULA,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTextAlignAllowableValues()
    {
        return [
            self::TEXT_ALIGN_LEFT,
            self::TEXT_ALIGN_CENTER,
            self::TEXT_ALIGN_RIGHT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTextDirectionAllowableValues()
    {
        return [
            self::TEXT_DIRECTION_LTR,
            self::TEXT_DIRECTION_RTL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResizeOptionAllowableValues()
    {
        return [
            self::RESIZE_OPTION_GROW_VERTICALLY,
            self::RESIZE_OPTION_GROW_HORIZONTALLY,
            self::RESIZE_OPTION_GROW_BOTH,
            self::RESIZE_OPTION_FIXED,
            self::RESIZE_OPTION_AUTO_RESIZE_FONT,
            self::RESIZE_OPTION_NULL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('definition_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('signer_index', $data ?? [], null);
        $this->setIfExists('is_required', $data ?? [], null);
        $this->setIfExists('placeholder', $data ?? [], null);
        $this->setIfExists('field_id', $data ?? [], null);
        $this->setIfExists('font', $data ?? [], null);
        $this->setIfExists('validation', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('date_format', $data ?? [], null);
        $this->setIfExists('time_format', $data ?? [], null);
        $this->setIfExists('radio_group_name', $data ?? [], null);
        $this->setIfExists('group_name', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('dropdown_options', $data ?? [], null);
        $this->setIfExists('image_info', $data ?? [], null);
        $this->setIfExists('hyperlink_text', $data ?? [], null);
        $this->setIfExists('attachment_info', $data ?? [], null);
        $this->setIfExists('background_hex_color', $data ?? [], null);
        $this->setIfExists('is_read_only', $data ?? [], null);
        $this->setIfExists('offset', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('tab_index', $data ?? [], null);
        $this->setIfExists('data_sync_tag', $data ?? [], null);
        $this->setIfExists('text_align', $data ?? [], null);
        $this->setIfExists('text_direction', $data ?? [], null);
        $this->setIfExists('character_spacing', $data ?? [], null);
        $this->setIfExists('character_limit', $data ?? [], null);
        $this->setIfExists('formula_field_settings', $data ?? [], null);
        $this->setIfExists('resize_option', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['definition_id'] === null) {
            $invalidProperties[] = "'definition_id' can't be null";
        }
        if ((mb_strlen($this->container['definition_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'definition_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['signer_index'] === null) {
            $invalidProperties[] = "'signer_index' can't be null";
        }
        if (($this->container['signer_index'] > 50)) {
            $invalidProperties[] = "invalid value for 'signer_index', must be smaller than or equal to 50.";
        }

        if (($this->container['signer_index'] < 1)) {
            $invalidProperties[] = "invalid value for 'signer_index', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tab_index']) && ($this->container['tab_index'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'tab_index', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['tab_index']) && ($this->container['tab_index'] < -1)) {
            $invalidProperties[] = "invalid value for 'tab_index', must be bigger than or equal to -1.";
        }

        $allowedValues = $this->getTextAlignAllowableValues();
        if (!is_null($this->container['text_align']) && !in_array($this->container['text_align'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'text_align', must be one of '%s'",
                $this->container['text_align'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTextDirectionAllowableValues();
        if (!is_null($this->container['text_direction']) && !in_array($this->container['text_direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'text_direction', must be one of '%s'",
                $this->container['text_direction'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['character_limit']) && ($this->container['character_limit'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'character_limit', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['character_limit']) && ($this->container['character_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'character_limit', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getResizeOptionAllowableValues();
        if (!is_null($this->container['resize_option']) && !in_array($this->container['resize_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'resize_option', must be one of '%s'",
                $this->container['resize_option'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets definition_id
     *
     * @return string
     */
    public function getDefinitionId()
    {
        return $this->container['definition_id'];
    }

    /**
     * Sets definition_id
     *
     * @param string $definition_id definition_id
     *
     * @return self
     */
    public function setDefinitionId($definition_id)
    {
        if (is_null($definition_id)) {
            throw new \InvalidArgumentException('non-nullable definition_id cannot be null');
        }

        if ((mb_strlen($definition_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $definition_id when calling TextTagDefinition., must be bigger than or equal to 1.');
        }

        $this->container['definition_id'] = $definition_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets signer_index
     *
     * @return int
     */
    public function getSignerIndex()
    {
        return $this->container['signer_index'];
    }

    /**
     * Sets signer_index
     *
     * @param int $signer_index signer_index
     *
     * @return self
     */
    public function setSignerIndex($signer_index)
    {
        if (is_null($signer_index)) {
            throw new \InvalidArgumentException('non-nullable signer_index cannot be null');
        }

        if (($signer_index > 50)) {
            throw new \InvalidArgumentException('invalid value for $signer_index when calling TextTagDefinition., must be smaller than or equal to 50.');
        }
        if (($signer_index < 1)) {
            throw new \InvalidArgumentException('invalid value for $signer_index when calling TextTagDefinition., must be bigger than or equal to 1.');
        }

        $this->container['signer_index'] = $signer_index;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool|null
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool|null $is_required is_required
     *
     * @return self
     */
    public function setIsRequired($is_required)
    {
        if (is_null($is_required)) {
            throw new \InvalidArgumentException('non-nullable is_required cannot be null');
        }
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets placeholder
     *
     * @return string|null
     */
    public function getPlaceholder()
    {
        return $this->container['placeholder'];
    }

    /**
     * Sets placeholder
     *
     * @param string|null $placeholder placeholder
     *
     * @return self
     */
    public function setPlaceholder($placeholder)
    {
        if (is_null($placeholder)) {
            array_push($this->openAPINullablesSetToNull, 'placeholder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('placeholder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['placeholder'] = $placeholder;

        return $this;
    }

    /**
     * Gets field_id
     *
     * @return string|null
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param string|null $field_id field_id
     *
     * @return self
     */
    public function setFieldId($field_id)
    {
        if (is_null($field_id)) {
            array_push($this->openAPINullablesSetToNull, 'field_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('field_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets font
     *
     * @return \BoldSign\Model\Font|null
     */
    public function getFont()
    {
        return $this->container['font'];
    }

    /**
     * Sets font
     *
     * @param \BoldSign\Model\Font|null $font font
     *
     * @return self
     */
    public function setFont($font)
    {
        if (is_null($font)) {
            throw new \InvalidArgumentException('non-nullable font cannot be null');
        }
        $this->container['font'] = $font;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return \BoldSign\Model\Validation|null
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param \BoldSign\Model\Validation|null $validation validation
     *
     * @return self
     */
    public function setValidation($validation)
    {
        if (is_null($validation)) {
            throw new \InvalidArgumentException('non-nullable validation cannot be null');
        }
        $this->container['validation'] = $validation;

        return $this;
    }

    /**
     * Gets size
     *
     * @return \BoldSign\Model\Size|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \BoldSign\Model\Size|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets date_format
     *
     * @return string|null
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     *
     * @param string|null $date_format date_format
     *
     * @return self
     */
    public function setDateFormat($date_format)
    {
        if (is_null($date_format)) {
            array_push($this->openAPINullablesSetToNull, 'date_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets time_format
     *
     * @return string|null
     */
    public function getTimeFormat()
    {
        return $this->container['time_format'];
    }

    /**
     * Sets time_format
     *
     * @param string|null $time_format time_format
     *
     * @return self
     */
    public function setTimeFormat($time_format)
    {
        if (is_null($time_format)) {
            array_push($this->openAPINullablesSetToNull, 'time_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_format'] = $time_format;

        return $this;
    }

    /**
     * Gets radio_group_name
     *
     * @return string|null
     */
    public function getRadioGroupName()
    {
        return $this->container['radio_group_name'];
    }

    /**
     * Sets radio_group_name
     *
     * @param string|null $radio_group_name radio_group_name
     *
     * @return self
     */
    public function setRadioGroupName($radio_group_name)
    {
        if (is_null($radio_group_name)) {
            array_push($this->openAPINullablesSetToNull, 'radio_group_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('radio_group_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['radio_group_name'] = $radio_group_name;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string|null
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string|null $group_name group_name
     *
     * @return self
     */
    public function setGroupName($group_name)
    {
        if (is_null($group_name)) {
            array_push($this->openAPINullablesSetToNull, 'group_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            array_push($this->openAPINullablesSetToNull, 'value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets dropdown_options
     *
     * @return string[]|null
     */
    public function getDropdownOptions()
    {
        return $this->container['dropdown_options'];
    }

    /**
     * Sets dropdown_options
     *
     * @param string[]|null $dropdown_options dropdown_options
     *
     * @return self
     */
    public function setDropdownOptions($dropdown_options)
    {
        if (is_null($dropdown_options)) {
            array_push($this->openAPINullablesSetToNull, 'dropdown_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dropdown_options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dropdown_options'] = $dropdown_options;

        return $this;
    }

    /**
     * Gets image_info
     *
     * @return \BoldSign\Model\ImageInfo|null
     */
    public function getImageInfo()
    {
        return $this->container['image_info'];
    }

    /**
     * Sets image_info
     *
     * @param \BoldSign\Model\ImageInfo|null $image_info image_info
     *
     * @return self
     */
    public function setImageInfo($image_info)
    {
        if (is_null($image_info)) {
            throw new \InvalidArgumentException('non-nullable image_info cannot be null');
        }
        $this->container['image_info'] = $image_info;

        return $this;
    }

    /**
     * Gets hyperlink_text
     *
     * @return string|null
     */
    public function getHyperlinkText()
    {
        return $this->container['hyperlink_text'];
    }

    /**
     * Sets hyperlink_text
     *
     * @param string|null $hyperlink_text hyperlink_text
     *
     * @return self
     */
    public function setHyperlinkText($hyperlink_text)
    {
        if (is_null($hyperlink_text)) {
            array_push($this->openAPINullablesSetToNull, 'hyperlink_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hyperlink_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hyperlink_text'] = $hyperlink_text;

        return $this;
    }

    /**
     * Gets attachment_info
     *
     * @return \BoldSign\Model\AttachmentInfo|null
     */
    public function getAttachmentInfo()
    {
        return $this->container['attachment_info'];
    }

    /**
     * Sets attachment_info
     *
     * @param \BoldSign\Model\AttachmentInfo|null $attachment_info attachment_info
     *
     * @return self
     */
    public function setAttachmentInfo($attachment_info)
    {
        if (is_null($attachment_info)) {
            throw new \InvalidArgumentException('non-nullable attachment_info cannot be null');
        }
        $this->container['attachment_info'] = $attachment_info;

        return $this;
    }

    /**
     * Gets background_hex_color
     *
     * @return string|null
     */
    public function getBackgroundHexColor()
    {
        return $this->container['background_hex_color'];
    }

    /**
     * Sets background_hex_color
     *
     * @param string|null $background_hex_color background_hex_color
     *
     * @return self
     */
    public function setBackgroundHexColor($background_hex_color)
    {
        if (is_null($background_hex_color)) {
            array_push($this->openAPINullablesSetToNull, 'background_hex_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_hex_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_hex_color'] = $background_hex_color;

        return $this;
    }

    /**
     * Gets is_read_only
     *
     * @return bool|null
     */
    public function getIsReadOnly()
    {
        return $this->container['is_read_only'];
    }

    /**
     * Sets is_read_only
     *
     * @param bool|null $is_read_only is_read_only
     *
     * @return self
     */
    public function setIsReadOnly($is_read_only)
    {
        if (is_null($is_read_only)) {
            throw new \InvalidArgumentException('non-nullable is_read_only cannot be null');
        }
        $this->container['is_read_only'] = $is_read_only;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return \BoldSign\Model\TextTagOffset|null
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param \BoldSign\Model\TextTagOffset|null $offset offset
     *
     * @return self
     */
    public function setOffset($offset)
    {
        if (is_null($offset)) {
            throw new \InvalidArgumentException('non-nullable offset cannot be null');
        }
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            array_push($this->openAPINullablesSetToNull, 'label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets tab_index
     *
     * @return int|null
     */
    public function getTabIndex()
    {
        return $this->container['tab_index'];
    }

    /**
     * Sets tab_index
     *
     * @param int|null $tab_index tab_index
     *
     * @return self
     */
    public function setTabIndex($tab_index)
    {
        if (is_null($tab_index)) {
            array_push($this->openAPINullablesSetToNull, 'tab_index');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tab_index', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($tab_index) && ($tab_index > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $tab_index when calling TextTagDefinition., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($tab_index) && ($tab_index < -1)) {
            throw new \InvalidArgumentException('invalid value for $tab_index when calling TextTagDefinition., must be bigger than or equal to -1.');
        }

        $this->container['tab_index'] = $tab_index;

        return $this;
    }

    /**
     * Gets data_sync_tag
     *
     * @return string|null
     */
    public function getDataSyncTag()
    {
        return $this->container['data_sync_tag'];
    }

    /**
     * Sets data_sync_tag
     *
     * @param string|null $data_sync_tag data_sync_tag
     *
     * @return self
     */
    public function setDataSyncTag($data_sync_tag)
    {
        if (is_null($data_sync_tag)) {
            array_push($this->openAPINullablesSetToNull, 'data_sync_tag');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_sync_tag', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data_sync_tag'] = $data_sync_tag;

        return $this;
    }

    /**
     * Gets text_align
     *
     * @return string|null
     */
    public function getTextAlign()
    {
        return $this->container['text_align'];
    }

    /**
     * Sets text_align
     *
     * @param string|null $text_align text_align
     *
     * @return self
     */
    public function setTextAlign($text_align)
    {
        if (is_null($text_align)) {
            throw new \InvalidArgumentException('non-nullable text_align cannot be null');
        }
        $allowedValues = $this->getTextAlignAllowableValues();
        if (!in_array($text_align, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'text_align', must be one of '%s'",
                    $text_align,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['text_align'] = $text_align;

        return $this;
    }

    /**
     * Gets text_direction
     *
     * @return string|null
     */
    public function getTextDirection()
    {
        return $this->container['text_direction'];
    }

    /**
     * Sets text_direction
     *
     * @param string|null $text_direction text_direction
     *
     * @return self
     */
    public function setTextDirection($text_direction)
    {
        if (is_null($text_direction)) {
            throw new \InvalidArgumentException('non-nullable text_direction cannot be null');
        }
        $allowedValues = $this->getTextDirectionAllowableValues();
        if (!in_array($text_direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'text_direction', must be one of '%s'",
                    $text_direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['text_direction'] = $text_direction;

        return $this;
    }

    /**
     * Gets character_spacing
     *
     * @return float|null
     */
    public function getCharacterSpacing()
    {
        return $this->container['character_spacing'];
    }

    /**
     * Sets character_spacing
     *
     * @param float|null $character_spacing character_spacing
     *
     * @return self
     */
    public function setCharacterSpacing($character_spacing)
    {
        if (is_null($character_spacing)) {
            throw new \InvalidArgumentException('non-nullable character_spacing cannot be null');
        }
        $this->container['character_spacing'] = $character_spacing;

        return $this;
    }

    /**
     * Gets character_limit
     *
     * @return int|null
     */
    public function getCharacterLimit()
    {
        return $this->container['character_limit'];
    }

    /**
     * Sets character_limit
     *
     * @param int|null $character_limit character_limit
     *
     * @return self
     */
    public function setCharacterLimit($character_limit)
    {
        if (is_null($character_limit)) {
            throw new \InvalidArgumentException('non-nullable character_limit cannot be null');
        }

        if (($character_limit > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $character_limit when calling TextTagDefinition., must be smaller than or equal to 2147483647.');
        }
        if (($character_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $character_limit when calling TextTagDefinition., must be bigger than or equal to 0.');
        }

        $this->container['character_limit'] = $character_limit;

        return $this;
    }

    /**
     * Gets formula_field_settings
     *
     * @return \BoldSign\Model\FormulaFieldSettings|null
     */
    public function getFormulaFieldSettings()
    {
        return $this->container['formula_field_settings'];
    }

    /**
     * Sets formula_field_settings
     *
     * @param \BoldSign\Model\FormulaFieldSettings|null $formula_field_settings formula_field_settings
     *
     * @return self
     */
    public function setFormulaFieldSettings($formula_field_settings)
    {
        if (is_null($formula_field_settings)) {
            throw new \InvalidArgumentException('non-nullable formula_field_settings cannot be null');
        }
        $this->container['formula_field_settings'] = $formula_field_settings;

        return $this;
    }

    /**
     * Gets resize_option
     *
     * @return string|null
     */
    public function getResizeOption()
    {
        return $this->container['resize_option'];
    }

    /**
     * Sets resize_option
     *
     * @param string|null $resize_option resize_option
     *
     * @return self
     */
    public function setResizeOption($resize_option)
    {
        if (is_null($resize_option)) {
            array_push($this->openAPINullablesSetToNull, 'resize_option');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resize_option', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getResizeOptionAllowableValues();
        if (!is_null($resize_option) && !in_array($resize_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'resize_option', must be one of '%s'",
                    $resize_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resize_option'] = $resize_option;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


