<?php
/**
 * ViewBrandDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BoldSign\Model;

use \ArrayAccess;
use \BoldSign\ObjectSerializer;

/**
 * ViewBrandDetails Class Doc Comment
 *
 * @category Class
 * @package  BoldSign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ViewBrandDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ViewBrandDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'brand_id' => 'string',
        'brand_logo' => 'string',
        'brand_name' => 'string',
        'background_color' => 'string',
        'button_color' => 'string',
        'button_text_color' => 'string',
        'email_display_name' => 'string',
        'disclaimer_title' => 'string',
        'disclaimer_description' => 'string',
        'redirect_url' => 'string',
        'is_default' => 'bool',
        'can_hide_tag_line' => 'bool',
        'combine_audit_trail' => 'bool',
        'exclude_audit_trail_from_email' => 'bool',
        'email_signed_document' => 'string',
        'document_time_zone' => 'string',
        'show_built_in_form_fields' => 'bool',
        'allow_custom_field_creation' => 'bool',
        'show_shared_custom_fields' => 'bool',
        'hide_decline' => 'bool',
        'hide_save' => 'bool',
        'document_expiry_settings' => '\BoldSign\Model\DocumentExpirySettings',
        'custom_domain_settings' => '\BoldSign\Model\CustomDomainSettings',
        'is_domain_verified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'brand_id' => null,
        'brand_logo' => null,
        'brand_name' => null,
        'background_color' => null,
        'button_color' => null,
        'button_text_color' => null,
        'email_display_name' => null,
        'disclaimer_title' => null,
        'disclaimer_description' => null,
        'redirect_url' => null,
        'is_default' => null,
        'can_hide_tag_line' => null,
        'combine_audit_trail' => null,
        'exclude_audit_trail_from_email' => null,
        'email_signed_document' => null,
        'document_time_zone' => null,
        'show_built_in_form_fields' => null,
        'allow_custom_field_creation' => null,
        'show_shared_custom_fields' => null,
        'hide_decline' => null,
        'hide_save' => null,
        'document_expiry_settings' => null,
        'custom_domain_settings' => null,
        'is_domain_verified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'brand_id' => true,
        'brand_logo' => true,
        'brand_name' => true,
        'background_color' => true,
        'button_color' => true,
        'button_text_color' => true,
        'email_display_name' => true,
        'disclaimer_title' => true,
        'disclaimer_description' => true,
        'redirect_url' => true,
        'is_default' => false,
        'can_hide_tag_line' => false,
        'combine_audit_trail' => false,
        'exclude_audit_trail_from_email' => false,
        'email_signed_document' => false,
        'document_time_zone' => true,
        'show_built_in_form_fields' => false,
        'allow_custom_field_creation' => false,
        'show_shared_custom_fields' => false,
        'hide_decline' => false,
        'hide_save' => false,
        'document_expiry_settings' => false,
        'custom_domain_settings' => false,
        'is_domain_verified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brand_id' => 'brandId',
        'brand_logo' => 'brandLogo',
        'brand_name' => 'brandName',
        'background_color' => 'backgroundColor',
        'button_color' => 'buttonColor',
        'button_text_color' => 'buttonTextColor',
        'email_display_name' => 'emailDisplayName',
        'disclaimer_title' => 'disclaimerTitle',
        'disclaimer_description' => 'disclaimerDescription',
        'redirect_url' => 'redirectUrl',
        'is_default' => 'isDefault',
        'can_hide_tag_line' => 'canHideTagLine',
        'combine_audit_trail' => 'combineAuditTrail',
        'exclude_audit_trail_from_email' => 'excludeAuditTrailFromEmail',
        'email_signed_document' => 'emailSignedDocument',
        'document_time_zone' => 'documentTimeZone',
        'show_built_in_form_fields' => 'showBuiltInFormFields',
        'allow_custom_field_creation' => 'allowCustomFieldCreation',
        'show_shared_custom_fields' => 'showSharedCustomFields',
        'hide_decline' => 'hideDecline',
        'hide_save' => 'hideSave',
        'document_expiry_settings' => 'documentExpirySettings',
        'custom_domain_settings' => 'customDomainSettings',
        'is_domain_verified' => 'isDomainVerified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brand_id' => 'setBrandId',
        'brand_logo' => 'setBrandLogo',
        'brand_name' => 'setBrandName',
        'background_color' => 'setBackgroundColor',
        'button_color' => 'setButtonColor',
        'button_text_color' => 'setButtonTextColor',
        'email_display_name' => 'setEmailDisplayName',
        'disclaimer_title' => 'setDisclaimerTitle',
        'disclaimer_description' => 'setDisclaimerDescription',
        'redirect_url' => 'setRedirectUrl',
        'is_default' => 'setIsDefault',
        'can_hide_tag_line' => 'setCanHideTagLine',
        'combine_audit_trail' => 'setCombineAuditTrail',
        'exclude_audit_trail_from_email' => 'setExcludeAuditTrailFromEmail',
        'email_signed_document' => 'setEmailSignedDocument',
        'document_time_zone' => 'setDocumentTimeZone',
        'show_built_in_form_fields' => 'setShowBuiltInFormFields',
        'allow_custom_field_creation' => 'setAllowCustomFieldCreation',
        'show_shared_custom_fields' => 'setShowSharedCustomFields',
        'hide_decline' => 'setHideDecline',
        'hide_save' => 'setHideSave',
        'document_expiry_settings' => 'setDocumentExpirySettings',
        'custom_domain_settings' => 'setCustomDomainSettings',
        'is_domain_verified' => 'setIsDomainVerified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brand_id' => 'getBrandId',
        'brand_logo' => 'getBrandLogo',
        'brand_name' => 'getBrandName',
        'background_color' => 'getBackgroundColor',
        'button_color' => 'getButtonColor',
        'button_text_color' => 'getButtonTextColor',
        'email_display_name' => 'getEmailDisplayName',
        'disclaimer_title' => 'getDisclaimerTitle',
        'disclaimer_description' => 'getDisclaimerDescription',
        'redirect_url' => 'getRedirectUrl',
        'is_default' => 'getIsDefault',
        'can_hide_tag_line' => 'getCanHideTagLine',
        'combine_audit_trail' => 'getCombineAuditTrail',
        'exclude_audit_trail_from_email' => 'getExcludeAuditTrailFromEmail',
        'email_signed_document' => 'getEmailSignedDocument',
        'document_time_zone' => 'getDocumentTimeZone',
        'show_built_in_form_fields' => 'getShowBuiltInFormFields',
        'allow_custom_field_creation' => 'getAllowCustomFieldCreation',
        'show_shared_custom_fields' => 'getShowSharedCustomFields',
        'hide_decline' => 'getHideDecline',
        'hide_save' => 'getHideSave',
        'document_expiry_settings' => 'getDocumentExpirySettings',
        'custom_domain_settings' => 'getCustomDomainSettings',
        'is_domain_verified' => 'getIsDomainVerified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EMAIL_SIGNED_DOCUMENT_ATTACHMENT = 'Attachment';
    public const EMAIL_SIGNED_DOCUMENT_DOCUMENT_LINK = 'DocumentLink';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmailSignedDocumentAllowableValues()
    {
        return [
            self::EMAIL_SIGNED_DOCUMENT_ATTACHMENT,
            self::EMAIL_SIGNED_DOCUMENT_DOCUMENT_LINK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('brand_id', $data ?? [], null);
        $this->setIfExists('brand_logo', $data ?? [], null);
        $this->setIfExists('brand_name', $data ?? [], null);
        $this->setIfExists('background_color', $data ?? [], null);
        $this->setIfExists('button_color', $data ?? [], null);
        $this->setIfExists('button_text_color', $data ?? [], null);
        $this->setIfExists('email_display_name', $data ?? [], null);
        $this->setIfExists('disclaimer_title', $data ?? [], null);
        $this->setIfExists('disclaimer_description', $data ?? [], null);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('is_default', $data ?? [], null);
        $this->setIfExists('can_hide_tag_line', $data ?? [], null);
        $this->setIfExists('combine_audit_trail', $data ?? [], null);
        $this->setIfExists('exclude_audit_trail_from_email', $data ?? [], null);
        $this->setIfExists('email_signed_document', $data ?? [], null);
        $this->setIfExists('document_time_zone', $data ?? [], null);
        $this->setIfExists('show_built_in_form_fields', $data ?? [], null);
        $this->setIfExists('allow_custom_field_creation', $data ?? [], null);
        $this->setIfExists('show_shared_custom_fields', $data ?? [], null);
        $this->setIfExists('hide_decline', $data ?? [], null);
        $this->setIfExists('hide_save', $data ?? [], null);
        $this->setIfExists('document_expiry_settings', $data ?? [], null);
        $this->setIfExists('custom_domain_settings', $data ?? [], null);
        $this->setIfExists('is_domain_verified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEmailSignedDocumentAllowableValues();
        if (!is_null($this->container['email_signed_document']) && !in_array($this->container['email_signed_document'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'email_signed_document', must be one of '%s'",
                $this->container['email_signed_document'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brand_id
     *
     * @return string|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string|null $brand_id brand_id
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        if (is_null($brand_id)) {
            array_push($this->openAPINullablesSetToNull, 'brand_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets brand_logo
     *
     * @return string|null
     */
    public function getBrandLogo()
    {
        return $this->container['brand_logo'];
    }

    /**
     * Sets brand_logo
     *
     * @param string|null $brand_logo brand_logo
     *
     * @return self
     */
    public function setBrandLogo($brand_logo)
    {
        if (is_null($brand_logo)) {
            array_push($this->openAPINullablesSetToNull, 'brand_logo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_logo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_logo'] = $brand_logo;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name brand_name
     *
     * @return self
     */
    public function setBrandName($brand_name)
    {
        if (is_null($brand_name)) {
            array_push($this->openAPINullablesSetToNull, 'brand_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('brand_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color background_color
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        if (is_null($background_color)) {
            array_push($this->openAPINullablesSetToNull, 'background_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('background_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets button_color
     *
     * @return string|null
     */
    public function getButtonColor()
    {
        return $this->container['button_color'];
    }

    /**
     * Sets button_color
     *
     * @param string|null $button_color button_color
     *
     * @return self
     */
    public function setButtonColor($button_color)
    {
        if (is_null($button_color)) {
            array_push($this->openAPINullablesSetToNull, 'button_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('button_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['button_color'] = $button_color;

        return $this;
    }

    /**
     * Gets button_text_color
     *
     * @return string|null
     */
    public function getButtonTextColor()
    {
        return $this->container['button_text_color'];
    }

    /**
     * Sets button_text_color
     *
     * @param string|null $button_text_color button_text_color
     *
     * @return self
     */
    public function setButtonTextColor($button_text_color)
    {
        if (is_null($button_text_color)) {
            array_push($this->openAPINullablesSetToNull, 'button_text_color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('button_text_color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['button_text_color'] = $button_text_color;

        return $this;
    }

    /**
     * Gets email_display_name
     *
     * @return string|null
     */
    public function getEmailDisplayName()
    {
        return $this->container['email_display_name'];
    }

    /**
     * Sets email_display_name
     *
     * @param string|null $email_display_name email_display_name
     *
     * @return self
     */
    public function setEmailDisplayName($email_display_name)
    {
        if (is_null($email_display_name)) {
            array_push($this->openAPINullablesSetToNull, 'email_display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email_display_name'] = $email_display_name;

        return $this;
    }

    /**
     * Gets disclaimer_title
     *
     * @return string|null
     */
    public function getDisclaimerTitle()
    {
        return $this->container['disclaimer_title'];
    }

    /**
     * Sets disclaimer_title
     *
     * @param string|null $disclaimer_title disclaimer_title
     *
     * @return self
     */
    public function setDisclaimerTitle($disclaimer_title)
    {
        if (is_null($disclaimer_title)) {
            array_push($this->openAPINullablesSetToNull, 'disclaimer_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disclaimer_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disclaimer_title'] = $disclaimer_title;

        return $this;
    }

    /**
     * Gets disclaimer_description
     *
     * @return string|null
     */
    public function getDisclaimerDescription()
    {
        return $this->container['disclaimer_description'];
    }

    /**
     * Sets disclaimer_description
     *
     * @param string|null $disclaimer_description disclaimer_description
     *
     * @return self
     */
    public function setDisclaimerDescription($disclaimer_description)
    {
        if (is_null($disclaimer_description)) {
            array_push($this->openAPINullablesSetToNull, 'disclaimer_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disclaimer_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disclaimer_description'] = $disclaimer_description;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string|null $redirect_url redirect_url
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default is_default
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException('non-nullable is_default cannot be null');
        }
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets can_hide_tag_line
     *
     * @return bool|null
     */
    public function getCanHideTagLine()
    {
        return $this->container['can_hide_tag_line'];
    }

    /**
     * Sets can_hide_tag_line
     *
     * @param bool|null $can_hide_tag_line can_hide_tag_line
     *
     * @return self
     */
    public function setCanHideTagLine($can_hide_tag_line)
    {
        if (is_null($can_hide_tag_line)) {
            throw new \InvalidArgumentException('non-nullable can_hide_tag_line cannot be null');
        }
        $this->container['can_hide_tag_line'] = $can_hide_tag_line;

        return $this;
    }

    /**
     * Gets combine_audit_trail
     *
     * @return bool|null
     */
    public function getCombineAuditTrail()
    {
        return $this->container['combine_audit_trail'];
    }

    /**
     * Sets combine_audit_trail
     *
     * @param bool|null $combine_audit_trail combine_audit_trail
     *
     * @return self
     */
    public function setCombineAuditTrail($combine_audit_trail)
    {
        if (is_null($combine_audit_trail)) {
            throw new \InvalidArgumentException('non-nullable combine_audit_trail cannot be null');
        }
        $this->container['combine_audit_trail'] = $combine_audit_trail;

        return $this;
    }

    /**
     * Gets exclude_audit_trail_from_email
     *
     * @return bool|null
     */
    public function getExcludeAuditTrailFromEmail()
    {
        return $this->container['exclude_audit_trail_from_email'];
    }

    /**
     * Sets exclude_audit_trail_from_email
     *
     * @param bool|null $exclude_audit_trail_from_email exclude_audit_trail_from_email
     *
     * @return self
     */
    public function setExcludeAuditTrailFromEmail($exclude_audit_trail_from_email)
    {
        if (is_null($exclude_audit_trail_from_email)) {
            throw new \InvalidArgumentException('non-nullable exclude_audit_trail_from_email cannot be null');
        }
        $this->container['exclude_audit_trail_from_email'] = $exclude_audit_trail_from_email;

        return $this;
    }

    /**
     * Gets email_signed_document
     *
     * @return string|null
     */
    public function getEmailSignedDocument()
    {
        return $this->container['email_signed_document'];
    }

    /**
     * Sets email_signed_document
     *
     * @param string|null $email_signed_document email_signed_document
     *
     * @return self
     */
    public function setEmailSignedDocument($email_signed_document)
    {
        if (is_null($email_signed_document)) {
            throw new \InvalidArgumentException('non-nullable email_signed_document cannot be null');
        }
        $allowedValues = $this->getEmailSignedDocumentAllowableValues();
        if (!in_array($email_signed_document, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'email_signed_document', must be one of '%s'",
                    $email_signed_document,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['email_signed_document'] = $email_signed_document;

        return $this;
    }

    /**
     * Gets document_time_zone
     *
     * @return string|null
     */
    public function getDocumentTimeZone()
    {
        return $this->container['document_time_zone'];
    }

    /**
     * Sets document_time_zone
     *
     * @param string|null $document_time_zone document_time_zone
     *
     * @return self
     */
    public function setDocumentTimeZone($document_time_zone)
    {
        if (is_null($document_time_zone)) {
            array_push($this->openAPINullablesSetToNull, 'document_time_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('document_time_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['document_time_zone'] = $document_time_zone;

        return $this;
    }

    /**
     * Gets show_built_in_form_fields
     *
     * @return bool|null
     */
    public function getShowBuiltInFormFields()
    {
        return $this->container['show_built_in_form_fields'];
    }

    /**
     * Sets show_built_in_form_fields
     *
     * @param bool|null $show_built_in_form_fields show_built_in_form_fields
     *
     * @return self
     */
    public function setShowBuiltInFormFields($show_built_in_form_fields)
    {
        if (is_null($show_built_in_form_fields)) {
            throw new \InvalidArgumentException('non-nullable show_built_in_form_fields cannot be null');
        }
        $this->container['show_built_in_form_fields'] = $show_built_in_form_fields;

        return $this;
    }

    /**
     * Gets allow_custom_field_creation
     *
     * @return bool|null
     */
    public function getAllowCustomFieldCreation()
    {
        return $this->container['allow_custom_field_creation'];
    }

    /**
     * Sets allow_custom_field_creation
     *
     * @param bool|null $allow_custom_field_creation allow_custom_field_creation
     *
     * @return self
     */
    public function setAllowCustomFieldCreation($allow_custom_field_creation)
    {
        if (is_null($allow_custom_field_creation)) {
            throw new \InvalidArgumentException('non-nullable allow_custom_field_creation cannot be null');
        }
        $this->container['allow_custom_field_creation'] = $allow_custom_field_creation;

        return $this;
    }

    /**
     * Gets show_shared_custom_fields
     *
     * @return bool|null
     */
    public function getShowSharedCustomFields()
    {
        return $this->container['show_shared_custom_fields'];
    }

    /**
     * Sets show_shared_custom_fields
     *
     * @param bool|null $show_shared_custom_fields show_shared_custom_fields
     *
     * @return self
     */
    public function setShowSharedCustomFields($show_shared_custom_fields)
    {
        if (is_null($show_shared_custom_fields)) {
            throw new \InvalidArgumentException('non-nullable show_shared_custom_fields cannot be null');
        }
        $this->container['show_shared_custom_fields'] = $show_shared_custom_fields;

        return $this;
    }

    /**
     * Gets hide_decline
     *
     * @return bool|null
     */
    public function getHideDecline()
    {
        return $this->container['hide_decline'];
    }

    /**
     * Sets hide_decline
     *
     * @param bool|null $hide_decline hide_decline
     *
     * @return self
     */
    public function setHideDecline($hide_decline)
    {
        if (is_null($hide_decline)) {
            throw new \InvalidArgumentException('non-nullable hide_decline cannot be null');
        }
        $this->container['hide_decline'] = $hide_decline;

        return $this;
    }

    /**
     * Gets hide_save
     *
     * @return bool|null
     */
    public function getHideSave()
    {
        return $this->container['hide_save'];
    }

    /**
     * Sets hide_save
     *
     * @param bool|null $hide_save hide_save
     *
     * @return self
     */
    public function setHideSave($hide_save)
    {
        if (is_null($hide_save)) {
            throw new \InvalidArgumentException('non-nullable hide_save cannot be null');
        }
        $this->container['hide_save'] = $hide_save;

        return $this;
    }

    /**
     * Gets document_expiry_settings
     *
     * @return \BoldSign\Model\DocumentExpirySettings|null
     */
    public function getDocumentExpirySettings()
    {
        return $this->container['document_expiry_settings'];
    }

    /**
     * Sets document_expiry_settings
     *
     * @param \BoldSign\Model\DocumentExpirySettings|null $document_expiry_settings document_expiry_settings
     *
     * @return self
     */
    public function setDocumentExpirySettings($document_expiry_settings)
    {
        if (is_null($document_expiry_settings)) {
            throw new \InvalidArgumentException('non-nullable document_expiry_settings cannot be null');
        }
        $this->container['document_expiry_settings'] = $document_expiry_settings;

        return $this;
    }

    /**
     * Gets custom_domain_settings
     *
     * @return \BoldSign\Model\CustomDomainSettings|null
     */
    public function getCustomDomainSettings()
    {
        return $this->container['custom_domain_settings'];
    }

    /**
     * Sets custom_domain_settings
     *
     * @param \BoldSign\Model\CustomDomainSettings|null $custom_domain_settings custom_domain_settings
     *
     * @return self
     */
    public function setCustomDomainSettings($custom_domain_settings)
    {
        if (is_null($custom_domain_settings)) {
            throw new \InvalidArgumentException('non-nullable custom_domain_settings cannot be null');
        }
        $this->container['custom_domain_settings'] = $custom_domain_settings;

        return $this;
    }

    /**
     * Gets is_domain_verified
     *
     * @return bool|null
     */
    public function getIsDomainVerified()
    {
        return $this->container['is_domain_verified'];
    }

    /**
     * Sets is_domain_verified
     *
     * @param bool|null $is_domain_verified is_domain_verified
     *
     * @return self
     */
    public function setIsDomainVerified($is_domain_verified)
    {
        if (is_null($is_domain_verified)) {
            throw new \InvalidArgumentException('non-nullable is_domain_verified cannot be null');
        }
        $this->container['is_domain_verified'] = $is_domain_verified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


